
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800a168  0800a168  0001a168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a284  0800a284  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a284  0800a284  0001a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a28c  0800a28c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a28c  0800a28c  0001a28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a290  0800a290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005304  20000074  0800a308  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005378  0800a308  00025378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227f6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad0  00000000  00000000  0004289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  00047370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00048f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000077ac  00000000  00000000  0004a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021396  00000000  00000000  0005213c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d15b  00000000  00000000  000734d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011062d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fe4  00000000  00000000  00110680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a150 	.word	0x0800a150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800a150 	.word	0x0800a150

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// printf function
int _write(int file, char *ptr, int len) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x26>
        ITM_SendChar((*ptr++));
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc9 	bl	8000584 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x12>
    }
    return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fb95 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f82f 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8c7 	bl	80007ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800061e:	f000 f897 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2102      	movs	r1, #2
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <main+0x60>)
 8000628:	f000 fe56 	bl	80012d8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 5; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e00a      	b.n	8000648 <main+0x3c>
        HAL_Delay(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000636:	f000 fbc5 	bl	8000dc4 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800063a:	2102      	movs	r1, #2
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x60>)
 800063e:	f000 fe64 	bl	800130a <HAL_GPIO_TogglePin>
    for (int i = 0; i < 5; i++) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b04      	cmp	r3, #4
 800064c:	ddf1      	ble.n	8000632 <main+0x26>
    }

    osKernelInitialize();
 800064e:	f005 fa11 	bl	8005a74 <osKernelInitialize>


    osThreadNew(MAIN, NULL, MAINHandle);
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <main+0x64>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <main+0x68>)
 800065c:	f005 fa54 	bl	8005b08 <osThreadNew>
//    xTaskCreate(MAIN, "MAIN", 128,MAINhandle, 1, NULL );
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000660:	f005 fa08 	bl	8005a74 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000664:	f005 fa2a 	bl	8005abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000668:	e7fe      	b.n	8000668 <main+0x5c>
 800066a:	bf00      	nop
 800066c:	40020000 	.word	0x40020000
 8000670:	200000e4 	.word	0x200000e4
 8000674:	08000889 	.word	0x08000889

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fc15 	bl	8008eb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemClock_Config+0xd0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd4>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ec:	2319      	movs	r3, #25
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 80006f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80006f6:	2306      	movs	r3, #6
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006fa:	2308      	movs	r3, #8
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f001 ffd4 	bl	80026b0 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f93d 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fa36 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f000 f927 	bl	800098c <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f000 fdd7 	bl	8001340 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f8f8 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	; (800087c <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a25      	ldr	r2, [pc, #148]	; (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_GPIO_Init+0xd0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2106      	movs	r1, #6
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fd4e 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xd8>)
 8000852:	f000 fbbd 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000856:	2306      	movs	r3, #6
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0xd4>)
 800086e:	f000 fbaf 	bl	8000fd0 <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <MAIN>:

/* USER CODE BEGIN 4 */


void MAIN(void *argument) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    osThreadId blinking = osThreadNew(StartLED, NULL, LED_manager_attributes);
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MAIN+0x60>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	4814      	ldr	r0, [pc, #80]	; (80008ec <MAIN+0x64>)
 800089a:	f005 f935 	bl	8005b08 <osThreadNew>
 800089e:	60f8      	str	r0, [r7, #12]
    osThreadId send = osThreadNew(run_USB, NULL, COM_manager_handle);
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MAIN+0x68>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MAIN+0x6c>)
 80008aa:	f005 f92d 	bl	8005b08 <osThreadNew>
 80008ae:	60b8      	str	r0, [r7, #8]
    osThreadResume(send);
 80008b0:	68b8      	ldr	r0, [r7, #8]
 80008b2:	f005 f9dc 	bl	8005c6e <osThreadResume>
    printf("\r \n \r");
 80008b6:	4810      	ldr	r0, [pc, #64]	; (80008f8 <MAIN+0x70>)
 80008b8:	f008 fb9a 	bl	8008ff0 <iprintf>

    while (1) {

        osDelay(3000);
 80008bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008c0:	f005 f9f6 	bl	8005cb0 <osDelay>
        osThreadSuspend(blinking);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f005 f9b1 	bl	8005c2c <osThreadSuspend>
        printf("turned off\n \r");
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MAIN+0x74>)
 80008cc:	f008 fb90 	bl	8008ff0 <iprintf>
        osDelay(3000);
 80008d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008d4:	f005 f9ec 	bl	8005cb0 <osDelay>
        osThreadResume(blinking);
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f005 f9c8 	bl	8005c6e <osThreadResume>
        printf("turned on \r \n");
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <MAIN+0x78>)
 80008e0:	f008 fc0c 	bl	80090fc <puts>
        osDelay(3000);
 80008e4:	e7ea      	b.n	80008bc <MAIN+0x34>
 80008e6:	bf00      	nop
 80008e8:	200000ec 	.word	0x200000ec
 80008ec:	0800094d 	.word	0x0800094d
 80008f0:	200000e8 	.word	0x200000e8
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800a180 	.word	0x0800a180
 80008fc:	0800a188 	.word	0x0800a188
 8000900:	0800a198 	.word	0x0800a198

08000904 <run_USB>:

    }
}


void run_USB(void *argument) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    while (1) {
        MessageLength = sprintf(DataToSend, "Wiadomosc nr %d\n\r", MessageCounter);
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <run_USB+0x38>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	490b      	ldr	r1, [pc, #44]	; (8000940 <run_USB+0x3c>)
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <run_USB+0x40>)
 8000916:	f008 fc73 	bl	8009200 <siprintf>
 800091a:	4603      	mov	r3, r0
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <run_USB+0x44>)
 8000920:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_FS(DataToSend, MessageLength);
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <run_USB+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <run_USB+0x40>)
 800092c:	f007 ff66 	bl	80087fc <CDC_Transmit_FS>
        osDelay(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000934:	f005 f9bc 	bl	8005cb0 <osDelay>
        MessageLength = sprintf(DataToSend, "Wiadomosc nr %d\n\r", MessageCounter);
 8000938:	e7e8      	b.n	800090c <COM_manager+0x8>
 800093a:	bf00      	nop
 800093c:	20000118 	.word	0x20000118
 8000940:	0800a1a8 	.word	0x0800a1a8
 8000944:	200000f0 	.word	0x200000f0
 8000948:	20000119 	.word	0x20000119

0800094c <StartLED>:
    }
}


void StartLED(void *argument) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000954:	2102      	movs	r1, #2
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <StartLED+0x18>)
 8000958:	f000 fcd7 	bl	800130a <HAL_GPIO_TogglePin>
        osDelay(100);
 800095c:	2064      	movs	r0, #100	; 0x64
 800095e:	f005 f9a7 	bl	8005cb0 <osDelay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000962:	e7f7      	b.n	8000954 <LED_manager+0x8>
 8000964:	40020000 	.word	0x40020000

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 fa03 	bl	8000d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40014800 	.word	0x40014800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 facd 	bl	8000f7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12b      	bne.n	8000a6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a32:	2312      	movs	r3, #18
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_I2C_MspInit+0x8c>)
 8000a4a:	f000 fac1 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_InitTick+0xd0>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a98:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_InitTick+0xd0>)
 8000a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <HAL_InitTick+0xd0>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 020c 	add.w	r2, r7, #12
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fa52 	bl	8002f60 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000abc:	f002 fa3c 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 8000ac0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_InitTick+0xd4>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	3b01      	subs	r3, #1
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_InitTick+0xd8>)
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <HAL_InitTick+0xdc>)
 8000ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <HAL_InitTick+0xd8>)
 8000ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000adc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_InitTick+0xd8>)
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_InitTick+0xd8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <HAL_InitTick+0xd8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_InitTick+0xd8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <HAL_InitTick+0xd8>)
 8000af8:	f002 fa64 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d11b      	bne.n	8000b42 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000b0a:	4813      	ldr	r0, [pc, #76]	; (8000b58 <HAL_InitTick+0xd8>)
 8000b0c:	f002 fab4 	bl	8003078 <HAL_TIM_Base_Start_IT>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d111      	bne.n	8000b42 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b1e:	201a      	movs	r0, #26
 8000b20:	f000 fa48 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d808      	bhi.n	8000b3c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	201a      	movs	r0, #26
 8000b30:	f000 fa24 	bl	8000f7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_InitTick+0xe0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e002      	b.n	8000b42 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3730      	adds	r7, #48	; 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	431bde83 	.word	0x431bde83
 8000b58:	2000011c 	.word	0x2000011c
 8000b5c:	40014800 	.word	0x40014800
 8000b60:	20000004 	.word	0x20000004

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b96:	f002 fad1 	bl	800313c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000011c 	.word	0x2000011c

08000ba4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <OTG_FS_IRQHandler+0x10>)
 8000baa:	f000 fd0d 	bl	80015c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20004e5c 	.word	0x20004e5c

08000bb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
  }

  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f007 ffe2 	bl	8008c54 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20010000 	.word	0x20010000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	20000164 	.word	0x20000164
 8000cc4:	20005378 	.word	0x20005378

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d16:	f7ff ffd7 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f008 f897 	bl	8008e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fc75 	bl	800060c <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d30:	0800a294 	.word	0x0800a294
  ldr r2, =_sbss
 8000d34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d38:	20005378 	.word	0x20005378

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f8fc 	bl	8000f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff fe86 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fe10 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000168 	.word	0x20000168

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000168 	.word	0x20000168

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008

08000e0c <__NVIC_SetPriorityGrouping>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8e:	f7ff ff61 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f7ff ffb1 	bl	8000f00 <NVIC_EncodePriority>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff80 	bl	8000eac <__NVIC_SetPriority>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff54 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e159      	b.n	80012a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8148 	bne.w	800129a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80a2 	beq.w	800129a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b57      	ldr	r3, [pc, #348]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a56      	ldr	r2, [pc, #344]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <HAL_GPIO_Init+0x2e8>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_GPIO_Init+0x2ec>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a49      	ldr	r2, [pc, #292]	; (80012c0 <HAL_GPIO_Init+0x2f0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d019      	beq.n	80011d2 <HAL_GPIO_Init+0x202>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <HAL_GPIO_Init+0x2f4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x1fe>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a47      	ldr	r2, [pc, #284]	; (80012c8 <HAL_GPIO_Init+0x2f8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x1fa>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a46      	ldr	r2, [pc, #280]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x1f6>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_GPIO_Init+0x300>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x1f2>
 80011be:	2304      	movs	r3, #4
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x204>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	; (80012bc <HAL_GPIO_Init+0x2ec>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_GPIO_Init+0x304>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_GPIO_Init+0x304>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f aea2 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43d9      	mvns	r1, r3
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	400b      	ands	r3, r1
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e12b      	b.n	80015aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fb42 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013a4:	f001 fdb4 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 80013a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a81      	ldr	r2, [pc, #516]	; (80015b4 <HAL_I2C_Init+0x274>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d807      	bhi.n	80013c4 <HAL_I2C_Init+0x84>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a80      	ldr	r2, [pc, #512]	; (80015b8 <HAL_I2C_Init+0x278>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	e006      	b.n	80013d2 <HAL_I2C_Init+0x92>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a7d      	ldr	r2, [pc, #500]	; (80015bc <HAL_I2C_Init+0x27c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf94      	ite	ls
 80013cc:	2301      	movls	r3, #1
 80013ce:	2300      	movhi	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0e7      	b.n	80015aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a78      	ldr	r2, [pc, #480]	; (80015c0 <HAL_I2C_Init+0x280>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a6a      	ldr	r2, [pc, #424]	; (80015b4 <HAL_I2C_Init+0x274>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d802      	bhi.n	8001414 <HAL_I2C_Init+0xd4>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3301      	adds	r3, #1
 8001412:	e009      	b.n	8001428 <HAL_I2C_Init+0xe8>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	4a69      	ldr	r2, [pc, #420]	; (80015c4 <HAL_I2C_Init+0x284>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	3301      	adds	r3, #1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	430b      	orrs	r3, r1
 800142e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800143a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	495c      	ldr	r1, [pc, #368]	; (80015b4 <HAL_I2C_Init+0x274>)
 8001444:	428b      	cmp	r3, r1
 8001446:	d819      	bhi.n	800147c <HAL_I2C_Init+0x13c>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e59      	subs	r1, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fbb1 f3f3 	udiv	r3, r1, r3
 8001456:	1c59      	adds	r1, r3, #1
 8001458:	f640 73fc 	movw	r3, #4092	; 0xffc
 800145c:	400b      	ands	r3, r1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <HAL_I2C_Init+0x138>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e59      	subs	r1, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001476:	e051      	b.n	800151c <HAL_I2C_Init+0x1dc>
 8001478:	2304      	movs	r3, #4
 800147a:	e04f      	b.n	800151c <HAL_I2C_Init+0x1dc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d111      	bne.n	80014a8 <HAL_I2C_Init+0x168>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	e012      	b.n	80014ce <HAL_I2C_Init+0x18e>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	0099      	lsls	r1, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x196>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e022      	b.n	800151c <HAL_I2C_Init+0x1dc>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10e      	bne.n	80014fc <HAL_I2C_Init+0x1bc>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1e58      	subs	r0, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	440b      	add	r3, r1
 80014ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	e00f      	b.n	800151c <HAL_I2C_Init+0x1dc>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e58      	subs	r0, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	0099      	lsls	r1, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	6809      	ldr	r1, [r1, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800154a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6911      	ldr	r1, [r2, #16]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68d2      	ldr	r2, [r2, #12]
 8001556:	4311      	orrs	r1, r2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	000186a0 	.word	0x000186a0
 80015b8:	001e847f 	.word	0x001e847f
 80015bc:	003d08ff 	.word	0x003d08ff
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	10624dd3 	.word	0x10624dd3

080015c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b08d      	sub	sp, #52	; 0x34
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 ff5f 	bl	80044a2 <USB_GetMode>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 848a 	bne.w	8001f00 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fec3 	bl	800437c <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8480 	beq.w	8001efe <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f002 feb0 	bl	800437c <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b02      	cmp	r3, #2
 8001624:	d107      	bne.n	8001636 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f002 0202 	and.w	r2, r2, #2
 8001634:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fe9e 	bl	800437c <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b10      	cmp	r3, #16
 8001648:	d161      	bne.n	800170e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0210 	bic.w	r2, r2, #16
 8001658:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f003 020f 	and.w	r2, r3, #15
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	0c5b      	lsrs	r3, r3, #17
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	2b02      	cmp	r3, #2
 8001684:	d124      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d035      	beq.n	80016fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800169c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	6a38      	ldr	r0, [r7, #32]
 80016a6:	f002 fd17 	bl	80040d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b6:	441a      	add	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c8:	441a      	add	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	621a      	str	r2, [r3, #32]
 80016ce:	e016      	b.n	80016fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	0c5b      	lsrs	r3, r3, #17
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d110      	bne.n	80016fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016e2:	2208      	movs	r2, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	6a38      	ldr	r0, [r7, #32]
 80016e8:	f002 fcf6 	bl	80040d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f8:	441a      	add	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699a      	ldr	r2, [r3, #24]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0210 	orr.w	r2, r2, #16
 800170c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fe32 	bl	800437c <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001722:	f040 80a7 	bne.w	8001874 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fe37 	bl	80043a2 <USB_ReadDevAllOutEpInterrupt>
 8001734:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001736:	e099      	b.n	800186c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 808e 	beq.w	8001860 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fe5b 	bl	800440a <USB_ReadDevOutEPInterrupt>
 8001754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176c:	461a      	mov	r2, r3
 800176e:	2301      	movs	r3, #1
 8001770:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fe61 	bl	800243c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001790:	461a      	mov	r2, r3
 8001792:	2308      	movs	r3, #8
 8001794:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 ff37 	bl	800260c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b4:	461a      	mov	r2, r3
 80017b6:	2310      	movs	r3, #16
 80017b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d030      	beq.n	8001826 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017cc:	2b80      	cmp	r3, #128	; 0x80
 80017ce:	d109      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	3304      	adds	r3, #4
 80017f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	78db      	ldrb	r3, [r3, #3]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2200      	movs	r2, #0
 8001806:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f007 f8c2 	bl	8008998 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	015a      	lsls	r2, r3, #5
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
 800181c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001820:	461a      	mov	r2, r3
 8001822:	2302      	movs	r3, #2
 8001824:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183c:	461a      	mov	r2, r3
 800183e:	2320      	movs	r3, #32
 8001840:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001858:	461a      	mov	r2, r3
 800185a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f af62 	bne.w	8001738 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fd7f 	bl	800437c <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001888:	f040 80db 	bne.w	8001a42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fda0 	bl	80043d6 <USB_ReadDevAllInEpInterrupt>
 8001896:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800189c:	e0cd      	b.n	8001a3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80c2 	beq.w	8001a2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fdc6 	bl	8004446 <USB_ReadDevInEPInterrupt>
 80018ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d057      	beq.n	8001976 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	2201      	movs	r2, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69f9      	ldr	r1, [r7, #28]
 80018e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018e6:	4013      	ands	r3, r2
 80018e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f6:	461a      	mov	r2, r3
 80018f8:	2301      	movs	r3, #1
 80018fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d132      	bne.n	800196a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	334c      	adds	r3, #76	; 0x4c
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4403      	add	r3, r0
 8001924:	3348      	adds	r3, #72	; 0x48
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4419      	add	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4403      	add	r3, r0
 8001938:	334c      	adds	r3, #76	; 0x4c
 800193a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	2b00      	cmp	r3, #0
 8001940:	d113      	bne.n	800196a <HAL_PCD_IRQHandler+0x3a2>
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3354      	adds	r3, #84	; 0x54
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d108      	bne.n	800196a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001962:	461a      	mov	r2, r3
 8001964:	2101      	movs	r1, #1
 8001966:	f002 fdcd 	bl	8004504 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f006 ff96 	bl	80088a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800198c:	461a      	mov	r2, r3
 800198e:	2308      	movs	r3, #8
 8001990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a8:	461a      	mov	r2, r3
 80019aa:	2310      	movs	r3, #16
 80019ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c4:	461a      	mov	r2, r3
 80019c6:	2340      	movs	r3, #64	; 0x40
 80019c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d023      	beq.n	8001a1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019d6:	6a38      	ldr	r0, [r7, #32]
 80019d8:	f001 fe16 	bl	8003608 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	3338      	adds	r3, #56	; 0x38
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	78db      	ldrb	r3, [r3, #3]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d108      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2200      	movs	r2, #0
 80019fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f006 ffd9 	bl	80089bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a16:	461a      	mov	r2, r3
 8001a18:	2302      	movs	r3, #2
 8001a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fc79 	bl	8002320 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	3301      	adds	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f47f af2e 	bne.w	800189e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fc98 	bl	800437c <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a56:	d122      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fe09 	bl	8002698 <HAL_PCDEx_LPM_Callback>
 8001a86:	e002      	b.n	8001a8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f006 ff77 	bl	800897c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fc6a 	bl	800437c <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab2:	d112      	bne.n	8001ada <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d102      	bne.n	8001aca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f006 ff33 	bl	8008930 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ad8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fc4c 	bl	800437c <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aee:	f040 80b7 	bne.w	8001c60 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 fd7b 	bl	8003608 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b16:	e046      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b24:	461a      	mov	r2, r3
 8001b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	0151      	lsls	r1, r2, #5
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	440a      	add	r2, r1
 8001b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b70:	0151      	lsls	r1, r2, #5
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	440a      	add	r2, r1
 8001b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b90:	0151      	lsls	r1, r2, #5
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	440a      	add	r2, r1
 8001b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3b3      	bcc.n	8001b18 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bbe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bc2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d016      	beq.n	8001bfa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bdc:	f043 030b 	orr.w	r3, r3, #11
 8001be0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf2:	f043 030b 	orr.w	r3, r3, #11
 8001bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf8:	e015      	b.n	8001c26 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c0c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c10:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c20:	f043 030b 	orr.w	r3, r3, #11
 8001c24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f002 fc5a 	bl	8004504 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fb89 	bl	800437c <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c74:	d124      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fc1f 	bl	80044be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fcf3 	bl	8003670 <USB_GetDevSpeed>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681c      	ldr	r4, [r3, #0]
 8001c96:	f001 f92f 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8001c9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f001 fc0d 	bl	80034c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f006 fe21 	bl	80088f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fb59 	bl	800437c <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d10a      	bne.n	8001cea <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f006 fdfe 	bl	80088d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 0208 	and.w	r2, r2, #8
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fb44 	bl	800437c <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	2b80      	cmp	r3, #128	; 0x80
 8001cfc:	d122      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	e014      	b.n	8001d3a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fac5 	bl	80022be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	3301      	adds	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3e5      	bcc.n	8001d10 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 fb17 	bl	800437c <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d58:	d13b      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	e02b      	b.n	8001db8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3340      	adds	r3, #64	; 0x40
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d115      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da12      	bge.n	8001db2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	333f      	adds	r3, #63	; 0x3f
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fa86 	bl	80022be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	3301      	adds	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3ce      	bcc.n	8001d60 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 fad0 	bl	800437c <USB_ReadInterrupts>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001de6:	d155      	bne.n	8001e94 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001de8:	2301      	movs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	e045      	b.n	8001e7a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12e      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da2b      	bge.n	8001e74 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d121      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10a      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e70:	6053      	str	r3, [r2, #4]
            break;
 8001e72:	e007      	b.n	8001e84 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3301      	adds	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3b4      	bcc.n	8001dee <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fa6f 	bl	800437c <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f006 fd98 	bl	80089e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fa59 	bl	800437c <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d115      	bne.n	8001f00 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f006 fd88 	bl	80089fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	e000      	b.n	8001f00 <HAL_PCD_IRQHandler+0x938>
      return;
 8001efe:	bf00      	nop
    }
  }
}
 8001f00:	3734      	adds	r7, #52	; 0x34
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}

08001f06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_SetAddress+0x1a>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e013      	b.n	8001f48 <HAL_PCD_SetAddress+0x42>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 f9f9 	bl	8004330 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	70fb      	strb	r3, [r7, #3]
 8001f62:	460b      	mov	r3, r1
 8001f64:	803b      	strh	r3, [r7, #0]
 8001f66:	4613      	mov	r3, r2
 8001f68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da0f      	bge.n	8001f96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3338      	adds	r3, #56	; 0x38
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	705a      	strb	r2, [r3, #1]
 8001f94:	e00f      	b.n	8001fb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fc2:	883a      	ldrh	r2, [r7, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	78ba      	ldrb	r2, [r7, #2]
 8001fcc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d004      	beq.n	8001fe0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fe0:	78bb      	ldrb	r3, [r7, #2]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d102      	bne.n	8001fec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_EP_Open+0xaa>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00e      	b.n	8002018 <HAL_PCD_EP_Open+0xc8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fb56 	bl	80036ba <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002016:	7afb      	ldrb	r3, [r7, #11]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	f003 020f 	and.w	r2, r3, #15
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2200      	movs	r2, #0
 8002060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	b2da      	uxtb	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	f001 fde0 	bl	8003c58 <USB_EP0StartXfer>
 8002098:	e008      	b.n	80020ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6979      	ldr	r1, [r7, #20]
 80020a8:	f001 fb8e 	bl	80037c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	460b      	mov	r3, r1
 80020c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	3338      	adds	r3, #56	; 0x38
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	3304      	adds	r3, #4
 80020dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2201      	movs	r2, #1
 80020f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6979      	ldr	r1, [r7, #20]
 8002128:	f001 fd96 	bl	8003c58 <USB_EP0StartXfer>
 800212c:	e008      	b.n	8002140 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	6979      	ldr	r1, [r7, #20]
 800213c:	f001 fb44 	bl	80037c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 020f 	and.w	r2, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d901      	bls.n	8002168 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e050      	b.n	800220a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da0f      	bge.n	8002190 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 020f 	and.w	r2, r3, #15
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3338      	adds	r3, #56	; 0x38
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	705a      	strb	r2, [r3, #1]
 800218e:	e00d      	b.n	80021ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_PCD_EP_SetStall+0x82>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e01e      	b.n	800220a <HAL_PCD_EP_SetStall+0xc0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 ffd4 	bl	8004188 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	b2d9      	uxtb	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021fa:	461a      	mov	r2, r3
 80021fc:	f002 f982 	bl	8004504 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d901      	bls.n	8002230 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e042      	b.n	80022b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	da0f      	bge.n	8002258 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3338      	adds	r3, #56	; 0x38
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	705a      	strb	r2, [r3, #1]
 8002256:	e00f      	b.n	8002278 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	b2da      	uxtb	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_PCD_EP_ClrStall+0x86>
 8002294:	2302      	movs	r3, #2
 8002296:	e00e      	b.n	80022b6 <HAL_PCD_EP_ClrStall+0xa4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68f9      	ldr	r1, [r7, #12]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 ffdc 	bl	8004264 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da0c      	bge.n	80022ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 020f 	and.w	r2, r3, #15
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	3338      	adds	r3, #56	; 0x38
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e00c      	b.n	8002306 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	4618      	mov	r0, r3
 800230e:	f001 fdfb 	bl	8003f08 <USB_EPStopXfer>
 8002312:	4603      	mov	r3, r0
 8002314:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002316:	7afb      	ldrb	r3, [r7, #11]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af02      	add	r7, sp, #8
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	d901      	bls.n	8002358 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e06c      	b.n	8002432 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	429a      	cmp	r2, r3
 800236c:	d902      	bls.n	8002374 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3303      	adds	r3, #3
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800237c:	e02b      	b.n	80023d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	d902      	bls.n	800239a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3303      	adds	r3, #3
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4603      	mov	r3, r0
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f001 fe4f 	bl	800405c <USB_WritePacket>

    ep->xfer_buff  += len;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	441a      	add	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	441a      	add	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d809      	bhi.n	8002400 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d203      	bcs.n	8002400 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1be      	bne.n	800237e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d811      	bhi.n	8002430 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2201      	movs	r2, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	43db      	mvns	r3, r3
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800242c:	4013      	ands	r3, r2
 800242e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	333c      	adds	r3, #60	; 0x3c
 8002454:	3304      	adds	r3, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d17b      	bne.n	800256a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4a61      	ldr	r2, [pc, #388]	; (8002604 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	f240 80b9 	bls.w	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80b3 	beq.w	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4413      	add	r3, r2
 800249a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249e:	461a      	mov	r2, r3
 80024a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a4:	6093      	str	r3, [r2, #8]
 80024a6:	e0a7      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024be:	461a      	mov	r2, r3
 80024c0:	2320      	movs	r3, #32
 80024c2:	6093      	str	r3, [r2, #8]
 80024c4:	e098      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 8093 	bne.w	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	; (8002604 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d90f      	bls.n	80024fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f6:	6093      	str	r3, [r2, #8]
 80024f8:	e07e      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	0159      	lsls	r1, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	440b      	add	r3, r1
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	1ad2      	subs	r2, r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d114      	bne.n	800255c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002544:	461a      	mov	r2, r3
 8002546:	2101      	movs	r1, #1
 8002548:	f001 ffdc 	bl	8004504 <USB_EP0_OutStart>
 800254c:	e006      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	441a      	add	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f006 f982 	bl	800886c <HAL_PCD_DataOutStageCallback>
 8002568:	e046      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4a26      	ldr	r2, [pc, #152]	; (8002608 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d124      	bne.n	80025bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	e032      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a8:	461a      	mov	r2, r3
 80025aa:	2320      	movs	r3, #32
 80025ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f006 f959 	bl	800886c <HAL_PCD_DataOutStageCallback>
 80025ba:	e01d      	b.n	80025f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d114      	bne.n	80025ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e4:	461a      	mov	r2, r3
 80025e6:	2100      	movs	r1, #0
 80025e8:	f001 ff8c 	bl	8004504 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f006 f93a 	bl	800886c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	4f54300a 	.word	0x4f54300a
 8002608:	4f54310a 	.word	0x4f54310a

0800260c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	333c      	adds	r3, #60	; 0x3c
 8002624:	3304      	adds	r3, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <PCD_EP_OutSetupPacket_int+0x88>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d90e      	bls.n	8002660 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002658:	461a      	mov	r2, r3
 800265a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f006 f8f1 	bl	8008848 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <PCD_EP_OutSetupPacket_int+0x88>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d90c      	bls.n	8002688 <PCD_EP_OutSetupPacket_int+0x7c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002680:	461a      	mov	r2, r3
 8002682:	2101      	movs	r1, #1
 8002684:	f001 ff3e 	bl	8004504 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	4f54300a 	.word	0x4f54300a

08002698 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e267      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d075      	beq.n	80027ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ce:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d00c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d112      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4b82      	ldr	r3, [pc, #520]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	4b7e      	ldr	r3, [pc, #504]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d05b      	beq.n	80027b8 <HAL_RCC_OscConfig+0x108>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d157      	bne.n	80027b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e242      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x74>
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xb0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x98>
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6f      	ldr	r2, [pc, #444]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6c      	ldr	r2, [pc, #432]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xb0>
 8002748:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a65      	ldr	r2, [pc, #404]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fb20 	bl	8000dac <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fb1c 	bl	8000dac <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e207      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xc0>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fb0c 	bl	8000dac <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fb08 	bl	8000dac <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1f3      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0xe8>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d063      	beq.n	800288e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11c      	bne.n	8002818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027de:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d116      	bne.n	8002818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x152>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1c7      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4937      	ldr	r1, [pc, #220]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	e03a      	b.n	800288e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCC_OscConfig+0x244>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fac1 	bl	8000dac <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fabd 	bl	8000dac <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1a8      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4925      	ldr	r1, [pc, #148]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_RCC_OscConfig+0x244>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe faa0 	bl	8000dac <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002870:	f7fe fa9c 	bl	8000dac <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e187      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d036      	beq.n	8002908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCC_OscConfig+0x248>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe fa80 	bl	8000dac <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe fa7c 	bl	8000dac <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e167      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x200>
 80028ce:	e01b      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_OscConfig+0x248>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fa69 	bl	8000dac <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	e00e      	b.n	80028fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe fa65 	bl	8000dac <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d907      	bls.n	80028fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e150      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	42470000 	.word	0x42470000
 80028f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ea      	bne.n	80028de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8097 	beq.w	8002a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b7d      	ldr	r3, [pc, #500]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a7c      	ldr	r2, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b77      	ldr	r3, [pc, #476]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d118      	bne.n	8002984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a73      	ldr	r2, [pc, #460]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7fe fa25 	bl	8000dac <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe fa21 	bl	8000dac <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e10c      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x2ea>
 800298c:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	e01c      	b.n	80029d4 <HAL_RCC_OscConfig+0x324>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x30c>
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0x324>
 80029bc:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a57      	ldr	r2, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	4a54      	ldr	r2, [pc, #336]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029ce:	f023 0304 	bic.w	r3, r3, #4
 80029d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe f9e6 	bl	8000dac <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe f9e2 	bl	8000dac <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0cb      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ee      	beq.n	80029e4 <HAL_RCC_OscConfig+0x334>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a08:	f7fe f9d0 	bl	8000dac <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe f9cc 	bl	8000dac <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0b5      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ee      	bne.n	8002a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a1 	beq.w	8002b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d05c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d141      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCC_OscConfig+0x478>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe f9a0 	bl	8000dac <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe f99c 	bl	8000dac <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e087      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	491b      	ldr	r1, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x478>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe f975 	bl	8000dac <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe f971 	bl	8000dac <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e05c      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x416>
 8002ae4:	e054      	b.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe f95e 	bl	8000dac <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe f95a 	bl	8000dac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e045      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x444>
 8002b12:	e03d      	b.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e038      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCC_OscConfig+0x4ec>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d028      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d121      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d111      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0cc      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b68      	ldr	r3, [pc, #416]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d90c      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0b8      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	494d      	ldr	r1, [pc, #308]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d044      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d119      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e07f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e067      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4934      	ldr	r1, [pc, #208]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c90:	f7fe f88c 	bl	8000dac <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe f888 	bl	8000dac <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e04f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 020c 	and.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1eb      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d20c      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e032      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4916      	ldr	r1, [pc, #88]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	490e      	ldr	r1, [pc, #56]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d26:	f000 f821 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	490a      	ldr	r1, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fe9a 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40023c00 	.word	0x40023c00
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	0800a1d4 	.word	0x0800a1d4
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000004 	.word	0x20000004

08002d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d70:	b090      	sub	sp, #64	; 0x40
 8002d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
 8002d78:	2300      	movs	r3, #0
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_GetSysClockFreq+0x180>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x40>
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	f200 80a1 	bhi.w	8002ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d9e:	e09b      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002da2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002da4:	e09b      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da6:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002daa:	e098      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dac:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <HAL_RCC_GetSysClockFreq+0x180>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db6:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <HAL_RCC_GetSysClockFreq+0x180>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	2200      	movs	r2, #0
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	627a      	str	r2, [r7, #36]	; 0x24
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd8:	fb03 f201 	mul.w	r2, r3, r1
 8002ddc:	2300      	movs	r3, #0
 8002dde:	fb00 f303 	mul.w	r3, r0, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	4a43      	ldr	r2, [pc, #268]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002de6:	fba0 1202 	umull	r1, r2, r0, r2
 8002dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dec:	460a      	mov	r2, r1
 8002dee:	62ba      	str	r2, [r7, #40]	; 0x28
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	4413      	add	r3, r2
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	61fa      	str	r2, [r7, #28]
 8002dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e06:	f7fd fa3b 	bl	8000280 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4613      	mov	r3, r2
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e12:	e053      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_RCC_GetSysClockFreq+0x180>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	617a      	str	r2, [r7, #20]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e26:	f04f 0b00 	mov.w	fp, #0
 8002e2a:	4652      	mov	r2, sl
 8002e2c:	465b      	mov	r3, fp
 8002e2e:	f04f 0000 	mov.w	r0, #0
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	0159      	lsls	r1, r3, #5
 8002e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e3c:	0150      	lsls	r0, r2, #5
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	ebb2 080a 	subs.w	r8, r2, sl
 8002e46:	eb63 090b 	sbc.w	r9, r3, fp
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e62:	eb63 0509 	sbc.w	r5, r3, r9
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	00eb      	lsls	r3, r5, #3
 8002e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e74:	00e2      	lsls	r2, r4, #3
 8002e76:	4614      	mov	r4, r2
 8002e78:	461d      	mov	r5, r3
 8002e7a:	eb14 030a 	adds.w	r3, r4, sl
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	eb45 030b 	adc.w	r3, r5, fp
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e92:	4629      	mov	r1, r5
 8002e94:	028b      	lsls	r3, r1, #10
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	028a      	lsls	r2, r1, #10
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb0:	f7fd f9e6 	bl	8000280 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3740      	adds	r7, #64	; 0x40
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	017d7840 	.word	0x017d7840

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000000 	.word	0x20000000

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f14:	f7ff fff0 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	0800a1e4 	.word	0x0800a1e4

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f3c:	f7ff ffdc 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0b5b      	lsrs	r3, r3, #13
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	0800a1e4 	.word	0x0800a1e4

08002f60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCC_GetClockConfig+0x5c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0203 	and.w	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <HAL_RCC_GetClockConfig+0x5c>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_GetClockConfig+0x5c>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCC_GetClockConfig+0x5c>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	08db      	lsrs	r3, r3, #3
 8002f9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_RCC_GetClockConfig+0x60>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0207 	and.w	r2, r3, #7
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	601a      	str	r2, [r3, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40023c00 	.word	0x40023c00

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e041      	b.n	800305a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f839 	bl	8003062 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 f9ca 	bl	800339c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d001      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e044      	b.n	800311a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_TIM_Base_Start_IT+0xb0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d018      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x6c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d013      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x6c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1a      	ldr	r2, [pc, #104]	; (800312c <HAL_TIM_Base_Start_IT+0xb4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x6c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a19      	ldr	r2, [pc, #100]	; (8003130 <HAL_TIM_Base_Start_IT+0xb8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d009      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x6c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_TIM_Base_Start_IT+0xbc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x6c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIM_Base_Start_IT+0xc0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d010      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	e007      	b.n	8003118 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40010000 	.word	0x40010000
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800
 8003134:	40000c00 	.word	0x40000c00
 8003138:	40014000 	.word	0x40014000

0800313c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0202 	mvn.w	r2, #2
 8003168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8ee 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8e0 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8f1 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0204 	mvn.w	r2, #4
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8c4 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8b6 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8c7 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b08      	cmp	r3, #8
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0208 	mvn.w	r2, #8
 8003210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2204      	movs	r2, #4
 8003216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f89a 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f88c 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f89d 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b10      	cmp	r3, #16
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b10      	cmp	r3, #16
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0210 	mvn.w	r2, #16
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2208      	movs	r2, #8
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f870 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f862 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f873 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0201 	mvn.w	r2, #1
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fb54 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b80      	cmp	r3, #128	; 0x80
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8e2 	bl	80034b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f838 	bl	8003388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b20      	cmp	r3, #32
 8003324:	d10e      	bne.n	8003344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b20      	cmp	r3, #32
 8003332:	d107      	bne.n	8003344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0220 	mvn.w	r2, #32
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8ac 	bl	800349c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a34      	ldr	r2, [pc, #208]	; (8003480 <TIM_Base_SetConfig+0xe4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00f      	beq.n	80033d4 <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d00b      	beq.n	80033d4 <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a31      	ldr	r2, [pc, #196]	; (8003484 <TIM_Base_SetConfig+0xe8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_Base_SetConfig+0x38>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a30      	ldr	r2, [pc, #192]	; (8003488 <TIM_Base_SetConfig+0xec>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0x38>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2f      	ldr	r2, [pc, #188]	; (800348c <TIM_Base_SetConfig+0xf0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d108      	bne.n	80033e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a25      	ldr	r2, [pc, #148]	; (8003480 <TIM_Base_SetConfig+0xe4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01b      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d017      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a22      	ldr	r2, [pc, #136]	; (8003484 <TIM_Base_SetConfig+0xe8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a21      	ldr	r2, [pc, #132]	; (8003488 <TIM_Base_SetConfig+0xec>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <TIM_Base_SetConfig+0xf0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <TIM_Base_SetConfig+0xf4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <TIM_Base_SetConfig+0xf8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0x8a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <TIM_Base_SetConfig+0xfc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a08      	ldr	r2, [pc, #32]	; (8003480 <TIM_Base_SetConfig+0xe4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800

0800349c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d165      	bne.n	80035a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a41      	ldr	r2, [pc, #260]	; (80035e0 <USB_SetTurnaroundTime+0x11c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d906      	bls.n	80034ee <USB_SetTurnaroundTime+0x2a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <USB_SetTurnaroundTime+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d202      	bcs.n	80034ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80034e8:	230f      	movs	r3, #15
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e062      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <USB_SetTurnaroundTime+0x120>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d306      	bcc.n	8003504 <USB_SetTurnaroundTime+0x40>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <USB_SetTurnaroundTime+0x124>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d202      	bcs.n	8003504 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80034fe:	230e      	movs	r3, #14
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e057      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <USB_SetTurnaroundTime+0x124>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d306      	bcc.n	800351a <USB_SetTurnaroundTime+0x56>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4a37      	ldr	r2, [pc, #220]	; (80035ec <USB_SetTurnaroundTime+0x128>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d202      	bcs.n	800351a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003514:	230d      	movs	r3, #13
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e04c      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4a33      	ldr	r2, [pc, #204]	; (80035ec <USB_SetTurnaroundTime+0x128>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d306      	bcc.n	8003530 <USB_SetTurnaroundTime+0x6c>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <USB_SetTurnaroundTime+0x12c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d802      	bhi.n	8003530 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800352a:	230c      	movs	r3, #12
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e041      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <USB_SetTurnaroundTime+0x12c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d906      	bls.n	8003546 <USB_SetTurnaroundTime+0x82>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <USB_SetTurnaroundTime+0x130>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d802      	bhi.n	8003546 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003540:	230b      	movs	r3, #11
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e036      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <USB_SetTurnaroundTime+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d906      	bls.n	800355c <USB_SetTurnaroundTime+0x98>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <USB_SetTurnaroundTime+0x134>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d802      	bhi.n	800355c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003556:	230a      	movs	r3, #10
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e02b      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <USB_SetTurnaroundTime+0x134>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d906      	bls.n	8003572 <USB_SetTurnaroundTime+0xae>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <USB_SetTurnaroundTime+0x138>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d202      	bcs.n	8003572 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800356c:	2309      	movs	r3, #9
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e020      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <USB_SetTurnaroundTime+0x138>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d306      	bcc.n	8003588 <USB_SetTurnaroundTime+0xc4>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <USB_SetTurnaroundTime+0x13c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d802      	bhi.n	8003588 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003582:	2308      	movs	r3, #8
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e015      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <USB_SetTurnaroundTime+0x13c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d906      	bls.n	800359e <USB_SetTurnaroundTime+0xda>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <USB_SetTurnaroundTime+0x140>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d202      	bcs.n	800359e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003598:	2307      	movs	r3, #7
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e00a      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800359e:	2306      	movs	r3, #6
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	e007      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035aa:	2309      	movs	r3, #9
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e001      	b.n	80035b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035b0:	2309      	movs	r3, #9
 80035b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	029b      	lsls	r3, r3, #10
 80035c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	00d8acbf 	.word	0x00d8acbf
 80035e4:	00e4e1c0 	.word	0x00e4e1c0
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	01067380 	.word	0x01067380
 80035f0:	011a499f 	.word	0x011a499f
 80035f4:	01312cff 	.word	0x01312cff
 80035f8:	014ca43f 	.word	0x014ca43f
 80035fc:	016e3600 	.word	0x016e3600
 8003600:	01a6ab1f 	.word	0x01a6ab1f
 8003604:	01e84800 	.word	0x01e84800

08003608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3301      	adds	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <USB_FlushTxFifo+0x64>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e01b      	b.n	8003660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	daf2      	bge.n	8003616 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	019b      	lsls	r3, r3, #6
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <USB_FlushTxFifo+0x64>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e006      	b.n	8003660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d0f0      	beq.n	8003640 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	00030d40 	.word	0x00030d40

08003670 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0306 	and.w	r3, r3, #6
 8003688:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]
 8003694:	e00a      	b.n	80036ac <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d002      	beq.n	80036a2 <USB_GetDevSpeed+0x32>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d102      	bne.n	80036a8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80036a2:	2302      	movs	r3, #2
 80036a4:	75fb      	strb	r3, [r7, #23]
 80036a6:	e001      	b.n	80036ac <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80036a8:	230f      	movs	r3, #15
 80036aa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d13a      	bne.n	800374c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d155      	bne.n	80037ba <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	791b      	ldrb	r3, [r3, #4]
 8003728:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800372a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	059b      	lsls	r3, r3, #22
 8003730:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003732:	4313      	orrs	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e036      	b.n	80037ba <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	68f9      	ldr	r1, [r7, #12]
 8003766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800376a:	4313      	orrs	r3, r2
 800376c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11a      	bne.n	80037ba <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	791b      	ldrb	r3, [r3, #4]
 800379e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037a0:	430b      	orrs	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 815c 	bne.w	8003aa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d132      	bne.n	8003858 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	0151      	lsls	r1, r2, #5
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	440a      	add	r2, r1
 8003808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003810:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003850:	0cdb      	lsrs	r3, r3, #19
 8003852:	04db      	lsls	r3, r3, #19
 8003854:	6113      	str	r3, [r2, #16]
 8003856:	e074      	b.n	8003942 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	440a      	add	r2, r1
 800386e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003872:	0cdb      	lsrs	r3, r3, #19
 8003874:	04db      	lsls	r3, r3, #19
 8003876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800389a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6999      	ldr	r1, [r3, #24]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	440b      	add	r3, r1
 80038b4:	1e59      	subs	r1, r3, #1
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80038be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038c0:	4b9d      	ldr	r3, [pc, #628]	; (8003b38 <USB_EPStartXfer+0x370>)
 80038c2:	400b      	ands	r3, r1
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	0148      	lsls	r0, r1, #5
 80038c8:	69f9      	ldr	r1, [r7, #28]
 80038ca:	4401      	add	r1, r0
 80038cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038d0:	4313      	orrs	r3, r2
 80038d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	69b9      	ldr	r1, [r7, #24]
 80038ec:	0148      	lsls	r0, r1, #5
 80038ee:	69f9      	ldr	r1, [r7, #28]
 80038f0:	4401      	add	r1, r0
 80038f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	791b      	ldrb	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d11f      	bne.n	8003942 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003920:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	0151      	lsls	r1, r2, #5
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	440a      	add	r2, r1
 8003938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003940:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d14b      	bne.n	80039e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d128      	bne.n	80039be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d110      	bne.n	800399e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	440a      	add	r2, r1
 8003992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e00f      	b.n	80039be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e133      	b.n	8003c48 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d015      	beq.n	8003a34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 811b 	beq.w	8003c48 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	634b      	str	r3, [r1, #52]	; 0x34
 8003a32:	e109      	b.n	8003c48 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d110      	bne.n	8003a66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e00f      	b.n	8003a86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6919      	ldr	r1, [r3, #16]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	b298      	uxth	r0, r3
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4603      	mov	r3, r0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fade 	bl	800405c <USB_WritePacket>
 8003aa0:	e0d2      	b.n	8003c48 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abc:	0cdb      	lsrs	r3, r3, #19
 8003abe:	04db      	lsls	r3, r3, #19
 8003ac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003adc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ae4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d126      	bne.n	8003b3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	0148      	lsls	r0, r1, #5
 8003b08:	69f9      	ldr	r1, [r7, #28]
 8003b0a:	4401      	add	r1, r0
 8003b0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b10:	4313      	orrs	r3, r2
 8003b12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	0151      	lsls	r1, r2, #5
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	440a      	add	r2, r1
 8003b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b32:	6113      	str	r3, [r2, #16]
 8003b34:	e03a      	b.n	8003bac <USB_EPStartXfer+0x3e4>
 8003b36:	bf00      	nop
 8003b38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	1e5a      	subs	r2, r3, #1
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	8afa      	ldrh	r2, [r7, #22]
 8003b58:	fb03 f202 	mul.w	r2, r3, r2
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	04d9      	lsls	r1, r3, #19
 8003b72:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <USB_EPStartXfer+0x48c>)
 8003b74:	400b      	ands	r3, r1
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	0148      	lsls	r0, r1, #5
 8003b7a:	69f9      	ldr	r1, [r7, #28]
 8003b7c:	4401      	add	r1, r0
 8003b7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	0148      	lsls	r0, r1, #5
 8003ba0:	69f9      	ldr	r1, [r7, #28]
 8003ba2:	4401      	add	r1, r0
 8003ba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10d      	bne.n	8003bce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	6919      	ldr	r1, [r3, #16]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	460a      	mov	r2, r1
 8003bcc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	791b      	ldrb	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d128      	bne.n	8003c28 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d110      	bne.n	8003c08 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00f      	b.n	8003c28 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	1ff80000 	.word	0x1ff80000

08003c58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 80ce 	bne.w	8003e16 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d132      	bne.n	8003ce8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	0151      	lsls	r1, r2, #5
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	440a      	add	r2, r1
 8003c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ca0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	0151      	lsls	r1, r2, #5
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	440a      	add	r2, r1
 8003cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce0:	0cdb      	lsrs	r3, r3, #19
 8003ce2:	04db      	lsls	r3, r3, #19
 8003ce4:	6113      	str	r3, [r2, #16]
 8003ce6:	e04e      	b.n	8003d86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d02:	0cdb      	lsrs	r3, r3, #19
 8003d04:	04db      	lsls	r3, r3, #19
 8003d06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d903      	bls.n	8003d40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d76:	6939      	ldr	r1, [r7, #16]
 8003d78:	0148      	lsls	r0, r1, #5
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	4401      	add	r1, r0
 8003d7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d82:	4313      	orrs	r3, r2
 8003d84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d11e      	bne.n	8003dca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e097      	b.n	8003efa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003de8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8083 	beq.w	8003efa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	6979      	ldr	r1, [r7, #20]
 8003e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e10:	4313      	orrs	r3, r2
 8003e12:	634b      	str	r3, [r1, #52]	; 0x34
 8003e14:	e071      	b.n	8003efa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e30:	0cdb      	lsrs	r3, r3, #19
 8003e32:	04db      	lsls	r3, r3, #19
 8003e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	0148      	lsls	r0, r1, #5
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	4401      	add	r1, r0
 8003eb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10d      	bne.n	8003eda <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6919      	ldr	r1, [r3, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ef8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d14a      	bne.n	8003fbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f3e:	f040 8086 	bne.w	800404e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d902      	bls.n	8003fa0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f9e:	e056      	b.n	800404e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb8:	d0e7      	beq.n	8003f8a <USB_EPStopXfer+0x82>
 8003fba:	e048      	b.n	800404e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd4:	d13b      	bne.n	800404e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ff8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800401c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f242 7210 	movw	r2, #10000	; 0x2710
 800402a:	4293      	cmp	r3, r2
 800402c:	d902      	bls.n	8004034 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
          break;
 8004032:	e00c      	b.n	800404e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800404c:	d0e7      	beq.n	800401e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004050:	4618      	mov	r0, r3
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800405c:	b480      	push	{r7}
 800405e:	b089      	sub	sp, #36	; 0x24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	460b      	mov	r3, r1
 800406c:	71fb      	strb	r3, [r7, #7]
 800406e:	4613      	mov	r3, r2
 8004070:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800407a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d123      	bne.n	80040ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004082:	88bb      	ldrh	r3, [r7, #4]
 8004084:	3303      	adds	r3, #3
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e018      	b.n	80040c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	031a      	lsls	r2, r3, #12
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4413      	add	r3, r2
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	461a      	mov	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3301      	adds	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	3301      	adds	r3, #1
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3e2      	bcc.n	8004090 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3724      	adds	r7, #36	; 0x24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040d8:	b480      	push	{r7}
 80040da:	b08b      	sub	sp, #44	; 0x2c
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	e014      	b.n	800412e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	3301      	adds	r3, #1
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	3301      	adds	r3, #1
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	3301      	adds	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	3301      	adds	r3, #1
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	3301      	adds	r3, #1
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	6a3a      	ldr	r2, [r7, #32]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	429a      	cmp	r2, r3
 8004134:	d3e6      	bcc.n	8004104 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004136:	8bfb      	ldrh	r3, [r7, #30]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01e      	beq.n	800417a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004146:	461a      	mov	r2, r3
 8004148:	f107 0310 	add.w	r3, r7, #16
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	701a      	strb	r2, [r3, #0]
      i++;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	3301      	adds	r3, #1
 8004166:	623b      	str	r3, [r7, #32]
      pDest++;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	3301      	adds	r3, #1
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800416e:	8bfb      	ldrh	r3, [r7, #30]
 8004170:	3b01      	subs	r3, #1
 8004172:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004174:	8bfb      	ldrh	r3, [r7, #30]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ea      	bne.n	8004150 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417c:	4618      	mov	r0, r3
 800417e:	372c      	adds	r7, #44	; 0x2c
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d12c      	bne.n	80041fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db12      	blt.n	80041dc <USB_EPSetStall+0x54>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e02b      	b.n	8004256 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db12      	blt.n	8004236 <USB_EPSetStall+0xae>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00f      	beq.n	8004236 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004234:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004254:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d128      	bne.n	80042d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800429e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	791b      	ldrb	r3, [r3, #4]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d003      	beq.n	80042b0 <USB_EPClearStall+0x4c>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	791b      	ldrb	r3, [r3, #4]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d138      	bne.n	8004322 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e027      	b.n	8004322 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	791b      	ldrb	r3, [r3, #4]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d003      	beq.n	8004302 <USB_EPClearStall+0x9e>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d10f      	bne.n	8004322 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800434e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004352:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	4013      	ands	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0c1b      	lsrs	r3, r3, #16
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	b29b      	uxth	r3, r3
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004438:	68bb      	ldr	r3, [r7, #8]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004468:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	b2db      	uxtb	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004494:	68bb      	ldr	r3, [r7, #8]
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0301 	and.w	r3, r3, #1
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	460b      	mov	r3, r1
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	333c      	adds	r3, #60	; 0x3c
 800451a:	3304      	adds	r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4a26      	ldr	r2, [pc, #152]	; (80045bc <USB_EP0_OutStart+0xb8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d90a      	bls.n	800453e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004538:	d101      	bne.n	800453e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e037      	b.n	80045ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800455c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456c:	f043 0318 	orr.w	r3, r3, #24
 8004570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004580:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004584:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10f      	bne.n	80045ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80045aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	4f54300a 	.word	0x4f54300a

080045c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	32b0      	adds	r2, #176	; 0xb0
 80045d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e008      	b.n	80045f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	32b0      	adds	r2, #176	; 0xb0
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	32b0      	adds	r2, #176	; 0xb0
 800462a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004632:	2303      	movs	r3, #3
 8004634:	e025      	b.n	8004682 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11f      	bne.n	8004680 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2201      	movs	r2, #1
 8004644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <USBD_CDC_TransmitPacket+0x88>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 020f 	and.w	r2, r3, #15
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4403      	add	r3, r0
 8004662:	3318      	adds	r3, #24
 8004664:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <USBD_CDC_TransmitPacket+0x88>)
 8004668:	7819      	ldrb	r1, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f004 fa7d 	bl	8008b76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000009 	.word	0x20000009

08004690 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004698:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	4611      	mov	r1, r2
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	4603      	mov	r3, r0
 80046d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	4611      	mov	r1, r2
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004704:	2303      	movs	r3, #3
 8004706:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f8b2 	bl	800588e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2b02      	cmp	r3, #2
 800474c:	d01a      	beq.n	8004784 <USBD_LL_SetupStage+0x72>
 800474e:	2b02      	cmp	r3, #2
 8004750:	d822      	bhi.n	8004798 <USBD_LL_SetupStage+0x86>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <USBD_LL_SetupStage+0x4a>
 8004756:	2b01      	cmp	r3, #1
 8004758:	d00a      	beq.n	8004770 <USBD_LL_SetupStage+0x5e>
 800475a:	e01d      	b.n	8004798 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fb09 	bl	8004d7c <USBD_StdDevReq>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]
      break;
 800476e:	e020      	b.n	80047b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb71 	bl	8004e60 <USBD_StdItfReq>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
      break;
 8004782:	e016      	b.n	80047b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fbd3 	bl	8004f38 <USBD_StdEPReq>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
      break;
 8004796:	e00c      	b.n	80047b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800479e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f004 f95c 	bl	8008a64 <USBD_LL_StallEP>
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]
      break;
 80047b0:	bf00      	nop
  }

  return ret;
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	460b      	mov	r3, r1
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d16e      	bne.n	80048b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80047da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	f040 8098 	bne.w	8004918 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d913      	bls.n	800481c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	1ad2      	subs	r2, r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4293      	cmp	r3, r2
 800480c:	bf28      	it	cs
 800480e:	4613      	movcs	r3, r2
 8004810:	461a      	mov	r2, r3
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f001 f8b1 	bl	800597c <USBD_CtlContinueRx>
 800481a:	e07d      	b.n	8004918 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2b02      	cmp	r3, #2
 8004828:	d014      	beq.n	8004854 <USBD_LL_DataOutStage+0x98>
 800482a:	2b02      	cmp	r3, #2
 800482c:	d81d      	bhi.n	800486a <USBD_LL_DataOutStage+0xae>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <USBD_LL_DataOutStage+0x7c>
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <USBD_LL_DataOutStage+0x82>
 8004836:	e018      	b.n	800486a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	75bb      	strb	r3, [r7, #22]
            break;
 800483c:	e018      	b.n	8004870 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004844:	b2db      	uxtb	r3, r3
 8004846:	4619      	mov	r1, r3
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa5e 	bl	8004d0a <USBD_CoreFindIF>
 800484e:	4603      	mov	r3, r0
 8004850:	75bb      	strb	r3, [r7, #22]
            break;
 8004852:	e00d      	b.n	8004870 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800485a:	b2db      	uxtb	r3, r3
 800485c:	4619      	mov	r1, r3
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa60 	bl	8004d24 <USBD_CoreFindEP>
 8004864:	4603      	mov	r3, r0
 8004866:	75bb      	strb	r3, [r7, #22]
            break;
 8004868:	e002      	b.n	8004870 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	75bb      	strb	r3, [r7, #22]
            break;
 800486e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004870:	7dbb      	ldrb	r3, [r7, #22]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d119      	bne.n	80048aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d113      	bne.n	80048aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004882:	7dba      	ldrb	r2, [r7, #22]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	32ae      	adds	r2, #174	; 0xae
 8004888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004892:	7dba      	ldrb	r2, [r7, #22]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800489a:	7dba      	ldrb	r2, [r7, #22]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	32ae      	adds	r2, #174	; 0xae
 80048a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f001 f877 	bl	800599e <USBD_CtlSendStatus>
 80048b0:	e032      	b.n	8004918 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fa31 	bl	8004d24 <USBD_CoreFindEP>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80048c6:	7dbb      	ldrb	r3, [r7, #22]
 80048c8:	2bff      	cmp	r3, #255	; 0xff
 80048ca:	d025      	beq.n	8004918 <USBD_LL_DataOutStage+0x15c>
 80048cc:	7dbb      	ldrb	r3, [r7, #22]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d122      	bne.n	8004918 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d117      	bne.n	800490e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80048de:	7dba      	ldrb	r2, [r7, #22]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	32ae      	adds	r2, #174	; 0xae
 80048e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80048ee:	7dba      	ldrb	r2, [r7, #22]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80048f6:	7dba      	ldrb	r2, [r7, #22]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	32ae      	adds	r2, #174	; 0xae
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	7afa      	ldrb	r2, [r7, #11]
 8004904:	4611      	mov	r1, r2
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	4798      	blx	r3
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	e000      	b.n	800491a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	460b      	mov	r3, r1
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004930:	7afb      	ldrb	r3, [r7, #11]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d16f      	bne.n	8004a16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3314      	adds	r3, #20
 800493a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004942:	2b02      	cmp	r3, #2
 8004944:	d15a      	bne.n	80049fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	429a      	cmp	r2, r3
 8004950:	d914      	bls.n	800497c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	461a      	mov	r2, r3
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fff6 	bl	800595a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800496e:	2300      	movs	r3, #0
 8004970:	2200      	movs	r2, #0
 8004972:	2100      	movs	r1, #0
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f004 f91f 	bl	8008bb8 <USBD_LL_PrepareReceive>
 800497a:	e03f      	b.n	80049fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d11c      	bne.n	80049c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004990:	429a      	cmp	r2, r3
 8004992:	d316      	bcc.n	80049c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20f      	bcs.n	80049c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 ffd7 	bl	800595a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049b4:	2300      	movs	r3, #0
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f004 f8fc 	bl	8008bb8 <USBD_LL_PrepareReceive>
 80049c0:	e01c      	b.n	80049fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d10f      	bne.n	80049ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f004 f837 	bl	8008a64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 ffe4 	bl	80059c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03a      	beq.n	8004a7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fe42 	bl	8004690 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a14:	e032      	b.n	8004a7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f97f 	bl	8004d24 <USBD_CoreFindEP>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2bff      	cmp	r3, #255	; 0xff
 8004a2e:	d025      	beq.n	8004a7c <USBD_LL_DataInStage+0x15a>
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d122      	bne.n	8004a7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d11c      	bne.n	8004a7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004a42:	7dfa      	ldrb	r2, [r7, #23]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	32ae      	adds	r2, #174	; 0xae
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d014      	beq.n	8004a7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004a52:	7dfa      	ldrb	r2, [r7, #23]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004a5a:	7dfa      	ldrb	r2, [r7, #23]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	32ae      	adds	r2, #174	; 0xae
 8004a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	7afa      	ldrb	r2, [r7, #11]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	4798      	blx	r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004a72:	7dbb      	ldrb	r3, [r7, #22]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004a78:	7dbb      	ldrb	r3, [r7, #22]
 8004a7a:	e000      	b.n	8004a7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d014      	beq.n	8004aec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6852      	ldr	r2, [r2, #4]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	4611      	mov	r1, r2
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004aec:	2340      	movs	r3, #64	; 0x40
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f003 ff90 	bl	8008a18 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2240      	movs	r2, #64	; 0x40
 8004b04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f003 ff82 	bl	8008a18 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2240      	movs	r2, #64	; 0x40
 8004b1e:	621a      	str	r2, [r3, #32]

  return ret;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2204      	movs	r2, #4
 8004b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d106      	bne.n	8004b98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d110      	bne.n	8004bdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	32ae      	adds	r2, #174	; 0xae
 8004bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e01c      	b.n	8004c42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d115      	bne.n	8004c40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	32ae      	adds	r2, #174	; 0xae
 8004c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	32ae      	adds	r2, #174	; 0xae
 8004c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	32ae      	adds	r2, #174	; 0xae
 8004c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e01c      	b.n	8004ca6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d115      	bne.n	8004ca4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	32ae      	adds	r2, #174	; 0xae
 8004c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	32ae      	adds	r2, #174	; 0xae
 8004c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00e      	beq.n	8004d00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6852      	ldr	r2, [r2, #4]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004d16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004d30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3301      	adds	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d5c:	8a3b      	ldrh	r3, [r7, #16]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	b21a      	sxth	r2, r3
 8004d62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	b21b      	sxth	r3, r3
 8004d6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d6c:	89fb      	ldrh	r3, [r7, #14]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d005      	beq.n	8004da2 <USBD_StdDevReq+0x26>
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d857      	bhi.n	8004e4a <USBD_StdDevReq+0xce>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00f      	beq.n	8004dbe <USBD_StdDevReq+0x42>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d153      	bne.n	8004e4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	32ae      	adds	r2, #174	; 0xae
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e04a      	b.n	8004e54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b09      	cmp	r3, #9
 8004dc4:	d83b      	bhi.n	8004e3e <USBD_StdDevReq+0xc2>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <USBD_StdDevReq+0x50>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08004e3f 	.word	0x08004e3f
 8004dd8:	08004e2b 	.word	0x08004e2b
 8004ddc:	08004e3f 	.word	0x08004e3f
 8004de0:	08004dff 	.word	0x08004dff
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e3f 	.word	0x08004e3f
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e09 	.word	0x08004e09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa3c 	bl	8005274 <USBD_GetDescriptor>
          break;
 8004dfc:	e024      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fba1 	bl	8005548 <USBD_SetAddress>
          break;
 8004e06:	e01f      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fbe0 	bl	80055d0 <USBD_SetConfig>
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]
          break;
 8004e14:	e018      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc83 	bl	8005724 <USBD_GetConfig>
          break;
 8004e1e:	e013      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fcb4 	bl	8005790 <USBD_GetStatus>
          break;
 8004e28:	e00e      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fce3 	bl	80057f8 <USBD_SetFeature>
          break;
 8004e32:	e009      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fd07 	bl	800584a <USBD_ClrFeature>
          break;
 8004e3c:	e004      	b.n	8004e48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd5e 	bl	8005902 <USBD_CtlError>
          break;
 8004e46:	bf00      	nop
      }
      break;
 8004e48:	e004      	b.n	8004e54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fd58 	bl	8005902 <USBD_CtlError>
      break;
 8004e52:	bf00      	nop
  }

  return ret;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop

08004e60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d005      	beq.n	8004e86 <USBD_StdItfReq+0x26>
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d852      	bhi.n	8004f24 <USBD_StdItfReq+0xc4>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <USBD_StdItfReq+0x26>
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d14e      	bne.n	8004f24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d840      	bhi.n	8004f16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	889b      	ldrh	r3, [r3, #4]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d836      	bhi.n	8004f0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	889b      	ldrh	r3, [r3, #4]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ff2f 	bl	8004d0a <USBD_CoreFindIF>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	2bff      	cmp	r3, #255	; 0xff
 8004eb4:	d01d      	beq.n	8004ef2 <USBD_StdItfReq+0x92>
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11a      	bne.n	8004ef2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8004ebc:	7bba      	ldrb	r2, [r7, #14]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32ae      	adds	r2, #174	; 0xae
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00f      	beq.n	8004eec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8004ecc:	7bba      	ldrb	r2, [r7, #14]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004ed4:	7bba      	ldrb	r2, [r7, #14]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	32ae      	adds	r2, #174	; 0xae
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004eea:	e004      	b.n	8004ef6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8004eec:	2303      	movs	r3, #3
 8004eee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004ef0:	e001      	b.n	8004ef6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d110      	bne.n	8004f20 <USBD_StdItfReq+0xc0>
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10d      	bne.n	8004f20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fd4a 	bl	800599e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004f0a:	e009      	b.n	8004f20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fcf7 	bl	8005902 <USBD_CtlError>
          break;
 8004f14:	e004      	b.n	8004f20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8004f16:	6839      	ldr	r1, [r7, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fcf2 	bl	8005902 <USBD_CtlError>
          break;
 8004f1e:	e000      	b.n	8004f22 <USBD_StdItfReq+0xc2>
          break;
 8004f20:	bf00      	nop
      }
      break;
 8004f22:	e004      	b.n	8004f2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fceb 	bl	8005902 <USBD_CtlError>
      break;
 8004f2c:	bf00      	nop
  }

  return ret;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	889b      	ldrh	r3, [r3, #4]
 8004f4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d007      	beq.n	8004f68 <USBD_StdEPReq+0x30>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	f200 817f 	bhi.w	800525c <USBD_StdEPReq+0x324>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d02a      	beq.n	8004fb8 <USBD_StdEPReq+0x80>
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	f040 817a 	bne.w	800525c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004f68:	7bbb      	ldrb	r3, [r7, #14]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fed9 	bl	8004d24 <USBD_CoreFindEP>
 8004f72:	4603      	mov	r3, r0
 8004f74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f76:	7b7b      	ldrb	r3, [r7, #13]
 8004f78:	2bff      	cmp	r3, #255	; 0xff
 8004f7a:	f000 8174 	beq.w	8005266 <USBD_StdEPReq+0x32e>
 8004f7e:	7b7b      	ldrb	r3, [r7, #13]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8170 	bne.w	8005266 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8004f86:	7b7a      	ldrb	r2, [r7, #13]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8004f8e:	7b7a      	ldrb	r2, [r7, #13]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	32ae      	adds	r2, #174	; 0xae
 8004f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8163 	beq.w	8005266 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004fa0:	7b7a      	ldrb	r2, [r7, #13]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	32ae      	adds	r2, #174	; 0xae
 8004fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4798      	blx	r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fb6:	e156      	b.n	8005266 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d008      	beq.n	8004fd2 <USBD_StdEPReq+0x9a>
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	f300 8145 	bgt.w	8005250 <USBD_StdEPReq+0x318>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 809b 	beq.w	8005102 <USBD_StdEPReq+0x1ca>
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d03c      	beq.n	800504a <USBD_StdEPReq+0x112>
 8004fd0:	e13e      	b.n	8005250 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d002      	beq.n	8004fe4 <USBD_StdEPReq+0xac>
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d016      	beq.n	8005010 <USBD_StdEPReq+0xd8>
 8004fe2:	e02c      	b.n	800503e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fe4:	7bbb      	ldrb	r3, [r7, #14]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <USBD_StdEPReq+0xce>
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d00a      	beq.n	8005006 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ff0:	7bbb      	ldrb	r3, [r7, #14]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f003 fd35 	bl	8008a64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f003 fd31 	bl	8008a64 <USBD_LL_StallEP>
 8005002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005004:	e020      	b.n	8005048 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fc7a 	bl	8005902 <USBD_CtlError>
              break;
 800500e:	e01b      	b.n	8005048 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	885b      	ldrh	r3, [r3, #2]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10e      	bne.n	8005036 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <USBD_StdEPReq+0xfe>
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d008      	beq.n	8005036 <USBD_StdEPReq+0xfe>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	88db      	ldrh	r3, [r3, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f003 fd17 	bl	8008a64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fcb1 	bl	800599e <USBD_CtlSendStatus>

              break;
 800503c:	e004      	b.n	8005048 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fc5e 	bl	8005902 <USBD_CtlError>
              break;
 8005046:	bf00      	nop
          }
          break;
 8005048:	e107      	b.n	800525a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d002      	beq.n	800505c <USBD_StdEPReq+0x124>
 8005056:	2b03      	cmp	r3, #3
 8005058:	d016      	beq.n	8005088 <USBD_StdEPReq+0x150>
 800505a:	e04b      	b.n	80050f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <USBD_StdEPReq+0x146>
 8005062:	7bbb      	ldrb	r3, [r7, #14]
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d00a      	beq.n	800507e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f003 fcf9 	bl	8008a64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005072:	2180      	movs	r1, #128	; 0x80
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f003 fcf5 	bl	8008a64 <USBD_LL_StallEP>
 800507a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800507c:	e040      	b.n	8005100 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fc3e 	bl	8005902 <USBD_CtlError>
              break;
 8005086:	e03b      	b.n	8005100 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	885b      	ldrh	r3, [r3, #2]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d136      	bne.n	80050fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005090:	7bbb      	ldrb	r3, [r7, #14]
 8005092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f003 fcff 	bl	8008aa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fc7a 	bl	800599e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80050aa:	7bbb      	ldrb	r3, [r7, #14]
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fe38 	bl	8004d24 <USBD_CoreFindEP>
 80050b4:	4603      	mov	r3, r0
 80050b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050b8:	7b7b      	ldrb	r3, [r7, #13]
 80050ba:	2bff      	cmp	r3, #255	; 0xff
 80050bc:	d01f      	beq.n	80050fe <USBD_StdEPReq+0x1c6>
 80050be:	7b7b      	ldrb	r3, [r7, #13]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11c      	bne.n	80050fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80050c4:	7b7a      	ldrb	r2, [r7, #13]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80050cc:	7b7a      	ldrb	r2, [r7, #13]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	32ae      	adds	r2, #174	; 0xae
 80050d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80050dc:	7b7a      	ldrb	r2, [r7, #13]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	32ae      	adds	r2, #174	; 0xae
 80050e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80050f2:	e004      	b.n	80050fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fc03 	bl	8005902 <USBD_CtlError>
              break;
 80050fc:	e000      	b.n	8005100 <USBD_StdEPReq+0x1c8>
              break;
 80050fe:	bf00      	nop
          }
          break;
 8005100:	e0ab      	b.n	800525a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d002      	beq.n	8005114 <USBD_StdEPReq+0x1dc>
 800510e:	2b03      	cmp	r3, #3
 8005110:	d032      	beq.n	8005178 <USBD_StdEPReq+0x240>
 8005112:	e097      	b.n	8005244 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <USBD_StdEPReq+0x1f2>
 800511a:	7bbb      	ldrb	r3, [r7, #14]
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d004      	beq.n	800512a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fbed 	bl	8005902 <USBD_CtlError>
                break;
 8005128:	e091      	b.n	800524e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800512a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512e:	2b00      	cmp	r3, #0
 8005130:	da0b      	bge.n	800514a <USBD_StdEPReq+0x212>
 8005132:	7bbb      	ldrb	r3, [r7, #14]
 8005134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3310      	adds	r3, #16
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	3304      	adds	r3, #4
 8005148:	e00b      	b.n	8005162 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800514a:	7bbb      	ldrb	r3, [r7, #14]
 800514c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2202      	movs	r2, #2
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fbd7 	bl	8005924 <USBD_CtlSendData>
              break;
 8005176:	e06a      	b.n	800524e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	da11      	bge.n	80051a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	3324      	adds	r3, #36	; 0x24
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d117      	bne.n	80051ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fbb0 	bl	8005902 <USBD_CtlError>
                  break;
 80051a2:	e054      	b.n	800524e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	f003 020f 	and.w	r2, r3, #15
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb9d 	bl	8005902 <USBD_CtlError>
                  break;
 80051c8:	e041      	b.n	800524e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da0b      	bge.n	80051ea <USBD_StdEPReq+0x2b2>
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	3310      	adds	r3, #16
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	e00b      	b.n	8005202 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4413      	add	r3, r2
 8005200:	3304      	adds	r3, #4
 8005202:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005204:	7bbb      	ldrb	r3, [r7, #14]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <USBD_StdEPReq+0x2d8>
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	2b80      	cmp	r3, #128	; 0x80
 800520e:	d103      	bne.n	8005218 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e00e      	b.n	8005236 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f003 fc5f 	bl	8008ae0 <USBD_LL_IsStallEP>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e002      	b.n	8005236 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2202      	movs	r2, #2
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb71 	bl	8005924 <USBD_CtlSendData>
              break;
 8005242:	e004      	b.n	800524e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fb5b 	bl	8005902 <USBD_CtlError>
              break;
 800524c:	bf00      	nop
          }
          break;
 800524e:	e004      	b.n	800525a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb55 	bl	8005902 <USBD_CtlError>
          break;
 8005258:	bf00      	nop
      }
      break;
 800525a:	e005      	b.n	8005268 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb4f 	bl	8005902 <USBD_CtlError>
      break;
 8005264:	e000      	b.n	8005268 <USBD_StdEPReq+0x330>
      break;
 8005266:	bf00      	nop
  }

  return ret;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	885b      	ldrh	r3, [r3, #2]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	2b06      	cmp	r3, #6
 8005296:	f200 8128 	bhi.w	80054ea <USBD_GetDescriptor+0x276>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <USBD_GetDescriptor+0x2c>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	080052d5 	.word	0x080052d5
 80052a8:	08005315 	.word	0x08005315
 80052ac:	080054eb 	.word	0x080054eb
 80052b0:	080054eb 	.word	0x080054eb
 80052b4:	0800548b 	.word	0x0800548b
 80052b8:	080054b7 	.word	0x080054b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	7c12      	ldrb	r2, [r2, #16]
 80052c8:	f107 0108 	add.w	r1, r7, #8
 80052cc:	4610      	mov	r0, r2
 80052ce:	4798      	blx	r3
 80052d0:	60f8      	str	r0, [r7, #12]
      break;
 80052d2:	e112      	b.n	80054fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7c1b      	ldrb	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10d      	bne.n	80052f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	f107 0208 	add.w	r2, r7, #8
 80052e8:	4610      	mov	r0, r2
 80052ea:	4798      	blx	r3
 80052ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	2202      	movs	r2, #2
 80052f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80052f6:	e100      	b.n	80054fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	f107 0208 	add.w	r2, r7, #8
 8005304:	4610      	mov	r0, r2
 8005306:	4798      	blx	r3
 8005308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	2202      	movs	r2, #2
 8005310:	701a      	strb	r2, [r3, #0]
      break;
 8005312:	e0f2      	b.n	80054fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	885b      	ldrh	r3, [r3, #2]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b05      	cmp	r3, #5
 800531c:	f200 80ac 	bhi.w	8005478 <USBD_GetDescriptor+0x204>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <USBD_GetDescriptor+0xb4>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	08005341 	.word	0x08005341
 800532c:	08005375 	.word	0x08005375
 8005330:	080053a9 	.word	0x080053a9
 8005334:	080053dd 	.word	0x080053dd
 8005338:	08005411 	.word	0x08005411
 800533c:	08005445 	.word	0x08005445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	7c12      	ldrb	r2, [r2, #16]
 8005358:	f107 0108 	add.w	r1, r7, #8
 800535c:	4610      	mov	r0, r2
 800535e:	4798      	blx	r3
 8005360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005362:	e091      	b.n	8005488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 facb 	bl	8005902 <USBD_CtlError>
            err++;
 800536c:	7afb      	ldrb	r3, [r7, #11]
 800536e:	3301      	adds	r3, #1
 8005370:	72fb      	strb	r3, [r7, #11]
          break;
 8005372:	e089      	b.n	8005488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	7c12      	ldrb	r2, [r2, #16]
 800538c:	f107 0108 	add.w	r1, r7, #8
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
 8005394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005396:	e077      	b.n	8005488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fab1 	bl	8005902 <USBD_CtlError>
            err++;
 80053a0:	7afb      	ldrb	r3, [r7, #11]
 80053a2:	3301      	adds	r3, #1
 80053a4:	72fb      	strb	r3, [r7, #11]
          break;
 80053a6:	e06f      	b.n	8005488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	7c12      	ldrb	r2, [r2, #16]
 80053c0:	f107 0108 	add.w	r1, r7, #8
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
 80053c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053ca:	e05d      	b.n	8005488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa97 	bl	8005902 <USBD_CtlError>
            err++;
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	3301      	adds	r3, #1
 80053d8:	72fb      	strb	r3, [r7, #11]
          break;
 80053da:	e055      	b.n	8005488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	7c12      	ldrb	r2, [r2, #16]
 80053f4:	f107 0108 	add.w	r1, r7, #8
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
 80053fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053fe:	e043      	b.n	8005488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa7d 	bl	8005902 <USBD_CtlError>
            err++;
 8005408:	7afb      	ldrb	r3, [r7, #11]
 800540a:	3301      	adds	r3, #1
 800540c:	72fb      	strb	r3, [r7, #11]
          break;
 800540e:	e03b      	b.n	8005488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	7c12      	ldrb	r2, [r2, #16]
 8005428:	f107 0108 	add.w	r1, r7, #8
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005432:	e029      	b.n	8005488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa63 	bl	8005902 <USBD_CtlError>
            err++;
 800543c:	7afb      	ldrb	r3, [r7, #11]
 800543e:	3301      	adds	r3, #1
 8005440:	72fb      	strb	r3, [r7, #11]
          break;
 8005442:	e021      	b.n	8005488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	7c12      	ldrb	r2, [r2, #16]
 800545c:	f107 0108 	add.w	r1, r7, #8
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
 8005464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005466:	e00f      	b.n	8005488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa49 	bl	8005902 <USBD_CtlError>
            err++;
 8005470:	7afb      	ldrb	r3, [r7, #11]
 8005472:	3301      	adds	r3, #1
 8005474:	72fb      	strb	r3, [r7, #11]
          break;
 8005476:	e007      	b.n	8005488 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa41 	bl	8005902 <USBD_CtlError>
          err++;
 8005480:	7afb      	ldrb	r3, [r7, #11]
 8005482:	3301      	adds	r3, #1
 8005484:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005486:	bf00      	nop
      }
      break;
 8005488:	e037      	b.n	80054fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7c1b      	ldrb	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	f107 0208 	add.w	r2, r7, #8
 800549e:	4610      	mov	r0, r2
 80054a0:	4798      	blx	r3
 80054a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054a4:	e029      	b.n	80054fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa2a 	bl	8005902 <USBD_CtlError>
        err++;
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	3301      	adds	r3, #1
 80054b2:	72fb      	strb	r3, [r7, #11]
      break;
 80054b4:	e021      	b.n	80054fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7c1b      	ldrb	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10d      	bne.n	80054da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	f107 0208 	add.w	r2, r7, #8
 80054ca:	4610      	mov	r0, r2
 80054cc:	4798      	blx	r3
 80054ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	2207      	movs	r2, #7
 80054d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054d8:	e00f      	b.n	80054fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa10 	bl	8005902 <USBD_CtlError>
        err++;
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	3301      	adds	r3, #1
 80054e6:	72fb      	strb	r3, [r7, #11]
      break;
 80054e8:	e007      	b.n	80054fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa08 	bl	8005902 <USBD_CtlError>
      err++;
 80054f2:	7afb      	ldrb	r3, [r7, #11]
 80054f4:	3301      	adds	r3, #1
 80054f6:	72fb      	strb	r3, [r7, #11]
      break;
 80054f8:	bf00      	nop
  }

  if (err != 0U)
 80054fa:	7afb      	ldrb	r3, [r7, #11]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11e      	bne.n	800553e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	88db      	ldrh	r3, [r3, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d016      	beq.n	8005536 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005508:	893b      	ldrh	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00e      	beq.n	800552c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	88da      	ldrh	r2, [r3, #6]
 8005512:	893b      	ldrh	r3, [r7, #8]
 8005514:	4293      	cmp	r3, r2
 8005516:	bf28      	it	cs
 8005518:	4613      	movcs	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800551e:	893b      	ldrh	r3, [r7, #8]
 8005520:	461a      	mov	r2, r3
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f9fd 	bl	8005924 <USBD_CtlSendData>
 800552a:	e009      	b.n	8005540 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9e7 	bl	8005902 <USBD_CtlError>
 8005534:	e004      	b.n	8005540 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa31 	bl	800599e <USBD_CtlSendStatus>
 800553c:	e000      	b.n	8005540 <USBD_GetDescriptor+0x2cc>
    return;
 800553e:	bf00      	nop
  }
}
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop

08005548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	889b      	ldrh	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d131      	bne.n	80055be <USBD_SetAddress+0x76>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	88db      	ldrh	r3, [r3, #6]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d12d      	bne.n	80055be <USBD_SetAddress+0x76>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	885b      	ldrh	r3, [r3, #2]
 8005566:	2b7f      	cmp	r3, #127	; 0x7f
 8005568:	d829      	bhi.n	80055be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	885b      	ldrh	r3, [r3, #2]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d104      	bne.n	800558c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9bc 	bl	8005902 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800558a:	e01d      	b.n	80055c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7bfa      	ldrb	r2, [r7, #15]
 8005590:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f003 facd 	bl	8008b38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9fd 	bl	800599e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d004      	beq.n	80055b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b2:	e009      	b.n	80055c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055bc:	e004      	b.n	80055c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f99e 	bl	8005902 <USBD_CtlError>
  }
}
 80055c6:	bf00      	nop
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	885b      	ldrh	r3, [r3, #2]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b4e      	ldr	r3, [pc, #312]	; (8005720 <USBD_SetConfig+0x150>)
 80055e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80055e8:	4b4d      	ldr	r3, [pc, #308]	; (8005720 <USBD_SetConfig+0x150>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d905      	bls.n	80055fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f985 	bl	8005902 <USBD_CtlError>
    return USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e08c      	b.n	8005716 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d002      	beq.n	800560e <USBD_SetConfig+0x3e>
 8005608:	2b03      	cmp	r3, #3
 800560a:	d029      	beq.n	8005660 <USBD_SetConfig+0x90>
 800560c:	e075      	b.n	80056fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800560e:	4b44      	ldr	r3, [pc, #272]	; (8005720 <USBD_SetConfig+0x150>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d020      	beq.n	8005658 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005616:	4b42      	ldr	r3, [pc, #264]	; (8005720 <USBD_SetConfig+0x150>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005620:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <USBD_SetConfig+0x150>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff f83d 	bl	80046a6 <USBD_SetClassConfig>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f962 	bl	8005902 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005646:	e065      	b.n	8005714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9a8 	bl	800599e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2203      	movs	r2, #3
 8005652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005656:	e05d      	b.n	8005714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9a0 	bl	800599e <USBD_CtlSendStatus>
      break;
 800565e:	e059      	b.n	8005714 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005660:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <USBD_SetConfig+0x150>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d112      	bne.n	800568e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <USBD_SetConfig+0x150>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800567a:	4b29      	ldr	r3, [pc, #164]	; (8005720 <USBD_SetConfig+0x150>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff f82c 	bl	80046de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f989 	bl	800599e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800568c:	e042      	b.n	8005714 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800568e:	4b24      	ldr	r3, [pc, #144]	; (8005720 <USBD_SetConfig+0x150>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d02a      	beq.n	80056f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff f81a 	bl	80046de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80056aa:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <USBD_SetConfig+0x150>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <USBD_SetConfig+0x150>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fe fff3 	bl	80046a6 <USBD_SetClassConfig>
 80056c0:	4603      	mov	r3, r0
 80056c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00f      	beq.n	80056ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f918 	bl	8005902 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fe ffff 	bl	80046de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80056e8:	e014      	b.n	8005714 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f957 	bl	800599e <USBD_CtlSendStatus>
      break;
 80056f0:	e010      	b.n	8005714 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f953 	bl	800599e <USBD_CtlSendStatus>
      break;
 80056f8:	e00c      	b.n	8005714 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f900 	bl	8005902 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <USBD_SetConfig+0x150>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fe ffe8 	bl	80046de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
      break;
 8005712:	bf00      	nop
  }

  return ret;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2000016c 	.word	0x2000016c

08005724 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	88db      	ldrh	r3, [r3, #6]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d004      	beq.n	8005740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8e2 	bl	8005902 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800573e:	e023      	b.n	8005788 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	dc02      	bgt.n	8005752 <USBD_GetConfig+0x2e>
 800574c:	2b00      	cmp	r3, #0
 800574e:	dc03      	bgt.n	8005758 <USBD_GetConfig+0x34>
 8005750:	e015      	b.n	800577e <USBD_GetConfig+0x5a>
 8005752:	2b03      	cmp	r3, #3
 8005754:	d00b      	beq.n	800576e <USBD_GetConfig+0x4a>
 8005756:	e012      	b.n	800577e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3308      	adds	r3, #8
 8005762:	2201      	movs	r2, #1
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8dc 	bl	8005924 <USBD_CtlSendData>
        break;
 800576c:	e00c      	b.n	8005788 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	2201      	movs	r2, #1
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8d4 	bl	8005924 <USBD_CtlSendData>
        break;
 800577c:	e004      	b.n	8005788 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8be 	bl	8005902 <USBD_CtlError>
        break;
 8005786:	bf00      	nop
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d81e      	bhi.n	80057e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	88db      	ldrh	r3, [r3, #6]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d004      	beq.n	80057ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8a5 	bl	8005902 <USBD_CtlError>
        break;
 80057b8:	e01a      	b.n	80057f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f043 0202 	orr.w	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	330c      	adds	r3, #12
 80057da:	2202      	movs	r2, #2
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8a0 	bl	8005924 <USBD_CtlSendData>
      break;
 80057e4:	e004      	b.n	80057f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f88a 	bl	8005902 <USBD_CtlError>
      break;
 80057ee:	bf00      	nop
  }
}
 80057f0:	bf00      	nop
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	885b      	ldrh	r3, [r3, #2]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d107      	bne.n	800581a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8c3 	bl	800599e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005818:	e013      	b.n	8005842 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	885b      	ldrh	r3, [r3, #2]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d10b      	bne.n	800583a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	889b      	ldrh	r3, [r3, #4]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b29b      	uxth	r3, r3
 800582a:	b2da      	uxtb	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f8b3 	bl	800599e <USBD_CtlSendStatus>
}
 8005838:	e003      	b.n	8005842 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f860 	bl	8005902 <USBD_CtlError>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585a:	b2db      	uxtb	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	2b02      	cmp	r3, #2
 8005860:	d80b      	bhi.n	800587a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	885b      	ldrh	r3, [r3, #2]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d10c      	bne.n	8005884 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f893 	bl	800599e <USBD_CtlSendStatus>
      }
      break;
 8005878:	e004      	b.n	8005884 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f840 	bl	8005902 <USBD_CtlError>
      break;
 8005882:	e000      	b.n	8005886 <USBD_ClrFeature+0x3c>
      break;
 8005884:	bf00      	nop
  }
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fa40 	bl	8004d3e <SWAPBYTE>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fa33 	bl	8004d3e <SWAPBYTE>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fa26 	bl	8004d3e <SWAPBYTE>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	80da      	strh	r2, [r3, #6]
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800590c:	2180      	movs	r1, #128	; 0x80
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f003 f8a8 	bl	8008a64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005914:	2100      	movs	r1, #0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f003 f8a4 	bl	8008a64 <USBD_LL_StallEP>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2202      	movs	r2, #2
 8005934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	2100      	movs	r1, #0
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f003 f913 	bl	8008b76 <USBD_LL_Transmit>

  return USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	2100      	movs	r1, #0
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f003 f902 	bl	8008b76 <USBD_LL_Transmit>

  return USBD_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	2100      	movs	r1, #0
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f003 f912 	bl	8008bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2204      	movs	r2, #4
 80059aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80059ae:	2300      	movs	r3, #0
 80059b0:	2200      	movs	r2, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f003 f8de 	bl	8008b76 <USBD_LL_Transmit>

  return USBD_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2205      	movs	r2, #5
 80059d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059d4:	2300      	movs	r3, #0
 80059d6:	2200      	movs	r2, #0
 80059d8:	2100      	movs	r1, #0
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f003 f8ec 	bl	8008bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <__NVIC_SetPriority>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	6039      	str	r1, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	db0a      	blt.n	8005a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	490c      	ldr	r1, [pc, #48]	; (8005a38 <__NVIC_SetPriority+0x4c>)
 8005a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0a:	0112      	lsls	r2, r2, #4
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a14:	e00a      	b.n	8005a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4908      	ldr	r1, [pc, #32]	; (8005a3c <__NVIC_SetPriority+0x50>)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3b04      	subs	r3, #4
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	440b      	add	r3, r1
 8005a2a:	761a      	strb	r2, [r3, #24]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	e000e100 	.word	0xe000e100
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <SysTick_Handler+0x1c>)
 8005a46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a48:	f001 fe70 	bl	800772c <xTaskGetSchedulerState>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a52:	f002 fc59 	bl	8008308 <xPortSysTickHandler>
  }
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	e000e010 	.word	0xe000e010

08005a60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a64:	2100      	movs	r1, #0
 8005a66:	f06f 0004 	mvn.w	r0, #4
 8005a6a:	f7ff ffbf 	bl	80059ec <__NVIC_SetPriority>
#endif
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7a:	f3ef 8305 	mrs	r3, IPSR
 8005a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a86:	f06f 0305 	mvn.w	r3, #5
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	e00c      	b.n	8005aa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <osKernelInitialize+0x44>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <osKernelInitialize+0x44>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	e002      	b.n	8005aa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005aa8:	687b      	ldr	r3, [r7, #4]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000170 	.word	0x20000170

08005abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac2:	f3ef 8305 	mrs	r3, IPSR
 8005ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ace:	f06f 0305 	mvn.w	r3, #5
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e010      	b.n	8005af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <osKernelStart+0x48>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d109      	bne.n	8005af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ade:	f7ff ffbf 	bl	8005a60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <osKernelStart+0x48>)
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ae8:	f001 f9c4 	bl	8006e74 <vTaskStartScheduler>
      stat = osOK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	e002      	b.n	8005af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005af8:	687b      	ldr	r3, [r7, #4]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000170 	.word	0x20000170

08005b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af04      	add	r7, sp, #16
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b18:	f3ef 8305 	mrs	r3, IPSR
 8005b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d17e      	bne.n	8005c22 <osThreadNew+0x11a>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d07b      	beq.n	8005c22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b2e:	2318      	movs	r3, #24
 8005b30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d045      	beq.n	8005bce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <osThreadNew+0x48>
        name = attr->name;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <osThreadNew+0x6e>
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b38      	cmp	r3, #56	; 0x38
 8005b68:	d805      	bhi.n	8005b76 <osThreadNew+0x6e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <osThreadNew+0x72>
        return (NULL);
 8005b76:	2300      	movs	r3, #0
 8005b78:	e054      	b.n	8005c24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <osThreadNew+0xa8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2bbb      	cmp	r3, #187	; 0xbb
 8005b98:	d90a      	bls.n	8005bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <osThreadNew+0xa8>
        mem = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e010      	b.n	8005bd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10c      	bne.n	8005bd2 <osThreadNew+0xca>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d108      	bne.n	8005bd2 <osThreadNew+0xca>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <osThreadNew+0xca>
          mem = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	e001      	b.n	8005bd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d110      	bne.n	8005bfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005be0:	9202      	str	r2, [sp, #8]
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fe4e 	bl	8006890 <xTaskCreateStatic>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	e013      	b.n	8005c22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d110      	bne.n	8005c22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f107 0310 	add.w	r3, r7, #16
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fe99 	bl	800694a <xTaskCreate>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d001      	beq.n	8005c22 <osThreadNew+0x11a>
            hTask = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c22:	693b      	ldr	r3, [r7, #16]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	; 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c38:	f3ef 8305 	mrs	r3, IPSR
 8005c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8005c44:	f06f 0305 	mvn.w	r3, #5
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e00b      	b.n	8005c64 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8005c52:	f06f 0303 	mvn.w	r3, #3
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e004      	b.n	8005c64 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f001 f802 	bl	8006c68 <vTaskSuspend>
  }

  return (stat);
 8005c64:	697b      	ldr	r3, [r7, #20]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c7a:	f3ef 8305 	mrs	r3, IPSR
 8005c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c80:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <osThreadResume+0x20>
    stat = osErrorISR;
 8005c86:	f06f 0305 	mvn.w	r3, #5
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e00b      	b.n	8005ca6 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8005c94:	f06f 0303 	mvn.w	r3, #3
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e004      	b.n	8005ca6 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8005ca0:	6938      	ldr	r0, [r7, #16]
 8005ca2:	f001 f889 	bl	8006db8 <vTaskResume>
  }

  return (stat);
 8005ca6:	697b      	ldr	r3, [r7, #20]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb8:	f3ef 8305 	mrs	r3, IPSR
 8005cbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <osDelay+0x1c>
    stat = osErrorISR;
 8005cc4:	f06f 0305 	mvn.w	r3, #5
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e007      	b.n	8005cdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 ff92 	bl	8006c00 <vTaskDelay>
    }
  }

  return (stat);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4a06      	ldr	r2, [pc, #24]	; (8005d18 <vApplicationGetIdleTaskMemory+0x30>)
 8005cfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2280      	movs	r2, #128	; 0x80
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000174 	.word	0x20000174
 8005d18:	20000230 	.word	0x20000230

08005d1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4a06      	ldr	r2, [pc, #24]	; (8005d4c <vApplicationGetTimerTaskMemory+0x30>)
 8005d32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d3a:	601a      	str	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000430 	.word	0x20000430
 8005d4c:	200004ec 	.word	0x200004ec

08005d50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f103 0208 	add.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 0208 	add.w	r2, r3, #8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f103 0208 	add.w	r2, r3, #8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d103      	bne.n	8005e12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e00c      	b.n	8005e2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3308      	adds	r3, #8
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e002      	b.n	8005e20 <vListInsert+0x2e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d2f6      	bcs.n	8005e1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6892      	ldr	r2, [r2, #8]
 8005e7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6852      	ldr	r2, [r2, #4]
 8005e84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d103      	bne.n	8005e98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	1e5a      	subs	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ee2:	f002 f97f 	bl	80081e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	3b01      	subs	r3, #1
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d114      	bne.n	8005f62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01a      	beq.n	8005f76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3310      	adds	r3, #16
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fa2f 	bl	80073a8 <xTaskRemoveFromEventList>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d012      	beq.n	8005f76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <xQueueGenericReset+0xcc>)
 8005f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	e009      	b.n	8005f76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3310      	adds	r3, #16
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fef2 	bl	8005d50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff feed 	bl	8005d50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f76:	f002 f965 	bl	8008244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f7a:	2301      	movs	r3, #1
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08e      	sub	sp, #56	; 0x38
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <xQueueGenericCreateStatic+0x52>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <xQueueGenericCreateStatic+0x56>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <xQueueGenericCreateStatic+0x58>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	623b      	str	r3, [r7, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <xQueueGenericCreateStatic+0x7e>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <xQueueGenericCreateStatic+0x82>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <xQueueGenericCreateStatic+0x84>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	61fb      	str	r3, [r7, #28]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006026:	2350      	movs	r3, #80	; 0x50
 8006028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b50      	cmp	r3, #80	; 0x50
 800602e:	d00a      	beq.n	8006046 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	61bb      	str	r3, [r7, #24]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006046:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00d      	beq.n	800606e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800605a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f805 	bl	8006078 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006070:	4618      	mov	r0, r3
 8006072:	3730      	adds	r7, #48	; 0x30
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	e002      	b.n	800609a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060a6:	2101      	movs	r1, #1
 80060a8:	69b8      	ldr	r0, [r7, #24]
 80060aa:	f7ff ff05 	bl	8005eb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060ce:	2300      	movs	r3, #0
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <xQueueGenericSend+0x32>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <xQueueGenericSend+0x40>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <xQueueGenericSend+0x44>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <xQueueGenericSend+0x46>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <xQueueGenericSend+0x60>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d103      	bne.n	800612e <xQueueGenericSend+0x6e>
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <xQueueGenericSend+0x72>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <xQueueGenericSend+0x74>
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xQueueGenericSend+0x8e>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	623b      	str	r3, [r7, #32]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800614e:	f001 faed 	bl	800772c <xTaskGetSchedulerState>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <xQueueGenericSend+0x9e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <xQueueGenericSend+0xa2>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <xQueueGenericSend+0xa4>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xQueueGenericSend+0xbe>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	61fb      	str	r3, [r7, #28]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800617e:	f002 f831 	bl	80081e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	429a      	cmp	r2, r3
 800618c:	d302      	bcc.n	8006194 <xQueueGenericSend+0xd4>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d129      	bne.n	80061e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800619a:	f000 fa0b 	bl	80065b4 <prvCopyDataToQueue>
 800619e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f8fb 	bl	80073a8 <xTaskRemoveFromEventList>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d013      	beq.n	80061e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061b8:	4b3f      	ldr	r3, [pc, #252]	; (80062b8 <xQueueGenericSend+0x1f8>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	e00a      	b.n	80061e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061d0:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <xQueueGenericSend+0x1f8>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061e0:	f002 f830 	bl	8008244 <vPortExitCritical>
				return pdPASS;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e063      	b.n	80062b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ee:	f002 f829 	bl	8008244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e05c      	b.n	80062b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061fc:	f107 0314 	add.w	r3, r7, #20
 8006200:	4618      	mov	r0, r3
 8006202:	f001 f935 	bl	8007470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006206:	2301      	movs	r3, #1
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800620a:	f002 f81b 	bl	8008244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800620e:	f000 fea1 	bl	8006f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006212:	f001 ffe7 	bl	80081e4 <vPortEnterCritical>
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800621c:	b25b      	sxtb	r3, r3
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d103      	bne.n	800622c <xQueueGenericSend+0x16c>
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d103      	bne.n	8006242 <xQueueGenericSend+0x182>
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006242:	f001 ffff 	bl	8008244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006246:	1d3a      	adds	r2, r7, #4
 8006248:	f107 0314 	add.w	r3, r7, #20
 800624c:	4611      	mov	r1, r2
 800624e:	4618      	mov	r0, r3
 8006250:	f001 f924 	bl	800749c <xTaskCheckForTimeOut>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d124      	bne.n	80062a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800625a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625c:	f000 faa2 	bl	80067a4 <prvIsQueueFull>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	3310      	adds	r3, #16
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4611      	mov	r1, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f001 f84a 	bl	8007308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006276:	f000 fa2d 	bl	80066d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800627a:	f000 fe79 	bl	8006f70 <xTaskResumeAll>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f af7c 	bne.w	800617e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <xQueueGenericSend+0x1f8>)
 8006288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	e772      	b.n	800617e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800629a:	f000 fa1b 	bl	80066d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800629e:	f000 fe67 	bl	8006f70 <xTaskResumeAll>
 80062a2:	e76c      	b.n	800617e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a6:	f000 fa15 	bl	80066d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062aa:	f000 fe61 	bl	8006f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3738      	adds	r7, #56	; 0x38
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b090      	sub	sp, #64	; 0x40
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <xQueueGenericSendFromISR+0x3c>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <xQueueGenericSendFromISR+0x40>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <xQueueGenericSendFromISR+0x42>
 80062fc:	2300      	movs	r3, #0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d103      	bne.n	8006326 <xQueueGenericSendFromISR+0x6a>
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <xQueueGenericSendFromISR+0x6e>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <xQueueGenericSendFromISR+0x70>
 800632a:	2300      	movs	r3, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	623b      	str	r3, [r7, #32]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006346:	f002 f82f 	bl	80083a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800634a:	f3ef 8211 	mrs	r2, BASEPRI
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	61fa      	str	r2, [r7, #28]
 8006360:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006362:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	429a      	cmp	r2, r3
 8006370:	d302      	bcc.n	8006378 <xQueueGenericSendFromISR+0xbc>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d12f      	bne.n	80063d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800637e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800638e:	f000 f911 	bl	80065b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006392:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d112      	bne.n	80063c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d016      	beq.n	80063d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fffd 	bl	80073a8 <xTaskRemoveFromEventList>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e007      	b.n	80063d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063c6:	3301      	adds	r3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	b25a      	sxtb	r2, r3
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063d2:	2301      	movs	r3, #1
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063d6:	e001      	b.n	80063dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3740      	adds	r7, #64	; 0x40
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <xQueueReceive+0x30>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	623b      	str	r3, [r7, #32]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d103      	bne.n	8006432 <xQueueReceive+0x3e>
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <xQueueReceive+0x42>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <xQueueReceive+0x44>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueReceive+0x5e>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	61fb      	str	r3, [r7, #28]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006452:	f001 f96b 	bl	800772c <xTaskGetSchedulerState>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <xQueueReceive+0x6e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <xQueueReceive+0x72>
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <xQueueReceive+0x74>
 8006466:	2300      	movs	r3, #0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xQueueReceive+0x8e>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	61bb      	str	r3, [r7, #24]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006482:	f001 feaf 	bl	80081e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01f      	beq.n	80064d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006496:	f000 f8f7 	bl	8006688 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	1e5a      	subs	r2, r3, #1
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00f      	beq.n	80064ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	3310      	adds	r3, #16
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 ff7a 	bl	80073a8 <xTaskRemoveFromEventList>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064ba:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <xQueueReceive+0x1bc>)
 80064bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064ca:	f001 febb 	bl	8008244 <vPortExitCritical>
				return pdPASS;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e069      	b.n	80065a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064d8:	f001 feb4 	bl	8008244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064dc:	2300      	movs	r3, #0
 80064de:	e062      	b.n	80065a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064e6:	f107 0310 	add.w	r3, r7, #16
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 ffc0 	bl	8007470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064f4:	f001 fea6 	bl	8008244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064f8:	f000 fd2c 	bl	8006f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064fc:	f001 fe72 	bl	80081e4 <vPortEnterCritical>
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006506:	b25b      	sxtb	r3, r3
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d103      	bne.n	8006516 <xQueueReceive+0x122>
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800651c:	b25b      	sxtb	r3, r3
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006522:	d103      	bne.n	800652c <xQueueReceive+0x138>
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800652c:	f001 fe8a 	bl	8008244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006530:	1d3a      	adds	r2, r7, #4
 8006532:	f107 0310 	add.w	r3, r7, #16
 8006536:	4611      	mov	r1, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ffaf 	bl	800749c <xTaskCheckForTimeOut>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d123      	bne.n	800658c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006546:	f000 f917 	bl	8006778 <prvIsQueueEmpty>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d017      	beq.n	8006580 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fed5 	bl	8007308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800655e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006560:	f000 f8b8 	bl	80066d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006564:	f000 fd04 	bl	8006f70 <xTaskResumeAll>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d189      	bne.n	8006482 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800656e:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xQueueReceive+0x1bc>)
 8006570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	e780      	b.n	8006482 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006582:	f000 f8a7 	bl	80066d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006586:	f000 fcf3 	bl	8006f70 <xTaskResumeAll>
 800658a:	e77a      	b.n	8006482 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f000 f8a1 	bl	80066d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006592:	f000 fced 	bl	8006f70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006598:	f000 f8ee 	bl	8006778 <prvIsQueueEmpty>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f43f af6f 	beq.w	8006482 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3730      	adds	r7, #48	; 0x30
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10d      	bne.n	80065ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d14d      	bne.n	8006676 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f8c2 	bl	8007768 <xTaskPriorityDisinherit>
 80065e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	e043      	b.n	8006676 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d119      	bne.n	8006628 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6858      	ldr	r0, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	461a      	mov	r2, r3
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	f002 fc4b 	bl	8008e9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	441a      	add	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	d32b      	bcc.n	8006676 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	e026      	b.n	8006676 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68d8      	ldr	r0, [r3, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	461a      	mov	r2, r3
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	f002 fc31 	bl	8008e9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	425b      	negs	r3, r3
 8006642:	441a      	add	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d207      	bcs.n	8006664 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	425b      	negs	r3, r3
 800665e:	441a      	add	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d105      	bne.n	8006676 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	3b01      	subs	r3, #1
 8006674:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800667e:	697b      	ldr	r3, [r7, #20]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d018      	beq.n	80066cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	441a      	add	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d303      	bcc.n	80066bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68d9      	ldr	r1, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	461a      	mov	r2, r3
 80066c6:	6838      	ldr	r0, [r7, #0]
 80066c8:	f002 fbe7 	bl	8008e9a <memcpy>
	}
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066dc:	f001 fd82 	bl	80081e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e8:	e011      	b.n	800670e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d012      	beq.n	8006718 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3324      	adds	r3, #36	; 0x24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fe56 	bl	80073a8 <xTaskRemoveFromEventList>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006702:	f000 ff2d 	bl	8007560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	3b01      	subs	r3, #1
 800670a:	b2db      	uxtb	r3, r3
 800670c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800670e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	dce9      	bgt.n	80066ea <prvUnlockQueue+0x16>
 8006716:	e000      	b.n	800671a <prvUnlockQueue+0x46>
					break;
 8006718:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	22ff      	movs	r2, #255	; 0xff
 800671e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006722:	f001 fd8f 	bl	8008244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006726:	f001 fd5d 	bl	80081e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006730:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006732:	e011      	b.n	8006758 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d012      	beq.n	8006762 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3310      	adds	r3, #16
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fe31 	bl	80073a8 <xTaskRemoveFromEventList>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800674c:	f000 ff08 	bl	8007560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	3b01      	subs	r3, #1
 8006754:	b2db      	uxtb	r3, r3
 8006756:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dce9      	bgt.n	8006734 <prvUnlockQueue+0x60>
 8006760:	e000      	b.n	8006764 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006762:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	22ff      	movs	r2, #255	; 0xff
 8006768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800676c:	f001 fd6a 	bl	8008244 <vPortExitCritical>
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006780:	f001 fd30 	bl	80081e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e001      	b.n	8006796 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006796:	f001 fd55 	bl	8008244 <vPortExitCritical>

	return xReturn;
 800679a:	68fb      	ldr	r3, [r7, #12]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067ac:	f001 fd1a 	bl	80081e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d102      	bne.n	80067c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067bc:	2301      	movs	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e001      	b.n	80067c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067c6:	f001 fd3d 	bl	8008244 <vPortExitCritical>

	return xReturn;
 80067ca:	68fb      	ldr	r3, [r7, #12]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e014      	b.n	800680e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067e4:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <vQueueAddToRegistry+0x50>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067f0:	490c      	ldr	r1, [pc, #48]	; (8006824 <vQueueAddToRegistry+0x50>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <vQueueAddToRegistry+0x50>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4413      	add	r3, r2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006806:	e006      	b.n	8006816 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b07      	cmp	r3, #7
 8006812:	d9e7      	bls.n	80067e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	200008ec 	.word	0x200008ec

08006828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006838:	f001 fcd4 	bl	80081e4 <vPortEnterCritical>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006842:	b25b      	sxtb	r3, r3
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d103      	bne.n	8006852 <vQueueWaitForMessageRestricted+0x2a>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006858:	b25b      	sxtb	r3, r3
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d103      	bne.n	8006868 <vQueueWaitForMessageRestricted+0x40>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006868:	f001 fcec 	bl	8008244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	2b00      	cmp	r3, #0
 8006872:	d106      	bne.n	8006882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fd67 	bl	8007350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006882:	6978      	ldr	r0, [r7, #20]
 8006884:	f7ff ff26 	bl	80066d4 <prvUnlockQueue>
	}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08e      	sub	sp, #56	; 0x38
 8006894:	af04      	add	r7, sp, #16
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	623b      	str	r3, [r7, #32]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	61fb      	str	r3, [r7, #28]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068d6:	23bc      	movs	r3, #188	; 0xbc
 80068d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2bbc      	cmp	r3, #188	; 0xbc
 80068de:	d00a      	beq.n	80068f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	61bb      	str	r3, [r7, #24]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01e      	beq.n	800693c <xTaskCreateStatic+0xac>
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800690c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	2202      	movs	r2, #2
 8006912:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006916:	2300      	movs	r3, #0
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	9302      	str	r3, [sp, #8]
 800691e:	f107 0314 	add.w	r3, r7, #20
 8006922:	9301      	str	r3, [sp, #4]
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f850 	bl	80069d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006936:	f000 f8f3 	bl	8006b20 <prvAddNewTaskToReadyList>
 800693a:	e001      	b.n	8006940 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006940:	697b      	ldr	r3, [r7, #20]
	}
 8006942:	4618      	mov	r0, r3
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800694a:	b580      	push	{r7, lr}
 800694c:	b08c      	sub	sp, #48	; 0x30
 800694e:	af04      	add	r7, sp, #16
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	603b      	str	r3, [r7, #0]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fd62 	bl	8008428 <pvPortMalloc>
 8006964:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00e      	beq.n	800698a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800696c:	20bc      	movs	r0, #188	; 0xbc
 800696e:	f001 fd5b 	bl	8008428 <pvPortMalloc>
 8006972:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
 8006980:	e005      	b.n	800698e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006982:	6978      	ldr	r0, [r7, #20]
 8006984:	f001 fe1c 	bl	80085c0 <vPortFree>
 8006988:	e001      	b.n	800698e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d017      	beq.n	80069c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	2300      	movs	r3, #0
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	9302      	str	r3, [sp, #8]
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f80e 	bl	80069d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069b8:	69f8      	ldr	r0, [r7, #28]
 80069ba:	f000 f8b1 	bl	8006b20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069be:	2301      	movs	r3, #1
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e002      	b.n	80069ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295
 80069c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069ca:	69bb      	ldr	r3, [r7, #24]
	}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	461a      	mov	r2, r3
 80069ec:	21a5      	movs	r1, #165	; 0xa5
 80069ee:	f002 fa62 	bl	8008eb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069fc:	3b01      	subs	r3, #1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f023 0307 	bic.w	r3, r3, #7
 8006a0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01f      	beq.n	8006a72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e012      	b.n	8006a5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	7819      	ldrb	r1, [r3, #0]
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	3334      	adds	r3, #52	; 0x34
 8006a48:	460a      	mov	r2, r1
 8006a4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d9e9      	bls.n	8006a38 <prvInitialiseNewTask+0x64>
 8006a64:	e000      	b.n	8006a68 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a70:	e003      	b.n	8006a7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b37      	cmp	r3, #55	; 0x37
 8006a7e:	d901      	bls.n	8006a84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a80:	2337      	movs	r3, #55	; 0x37
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2200      	movs	r2, #0
 8006a94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff f978 	bl	8005d90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff f973 	bl	8005d90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	3354      	adds	r3, #84	; 0x54
 8006ad4:	2260      	movs	r2, #96	; 0x60
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 f9ec 	bl	8008eb6 <memset>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	4a0c      	ldr	r2, [pc, #48]	; (8006b14 <prvInitialiseNewTask+0x140>)
 8006ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	; (8006b18 <prvInitialiseNewTask+0x144>)
 8006ae8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	4a0b      	ldr	r2, [pc, #44]	; (8006b1c <prvInitialiseNewTask+0x148>)
 8006aee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	69b8      	ldr	r0, [r7, #24]
 8006af6:	f001 fa47 	bl	8007f88 <pxPortInitialiseStack>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0c:	bf00      	nop
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	0800a20c 	.word	0x0800a20c
 8006b18:	0800a22c 	.word	0x0800a22c
 8006b1c:	0800a1ec 	.word	0x0800a1ec

08006b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b28:	f001 fb5c 	bl	80081e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b2c:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <prvAddNewTaskToReadyList+0xc4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3301      	adds	r3, #1
 8006b32:	4a2c      	ldr	r2, [pc, #176]	; (8006be4 <prvAddNewTaskToReadyList+0xc4>)
 8006b34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b36:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b3e:	4a2a      	ldr	r2, [pc, #168]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b44:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <prvAddNewTaskToReadyList+0xc4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d110      	bne.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b4c:	f000 fd2c 	bl	80075a8 <prvInitialiseTaskLists>
 8006b50:	e00d      	b.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b52:	4b26      	ldr	r3, [pc, #152]	; (8006bec <prvAddNewTaskToReadyList+0xcc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b5a:	4b23      	ldr	r3, [pc, #140]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d802      	bhi.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <prvAddNewTaskToReadyList+0xd0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <prvAddNewTaskToReadyList+0xd0>)
 8006b76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <prvAddNewTaskToReadyList+0xd0>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <prvAddNewTaskToReadyList+0xd4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d903      	bls.n	8006b94 <prvAddNewTaskToReadyList+0x74>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <prvAddNewTaskToReadyList+0xd4>)
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <prvAddNewTaskToReadyList+0xd8>)
 8006ba2:	441a      	add	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f7ff f8fd 	bl	8005daa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bb0:	f001 fb48 	bl	8008244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bb4:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <prvAddNewTaskToReadyList+0xcc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00e      	beq.n	8006bda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d207      	bcs.n	8006bda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bca:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <prvAddNewTaskToReadyList+0xdc>)
 8006bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bda:	bf00      	nop
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000e00 	.word	0x20000e00
 8006be8:	2000092c 	.word	0x2000092c
 8006bec:	20000e0c 	.word	0x20000e0c
 8006bf0:	20000e1c 	.word	0x20000e1c
 8006bf4:	20000e08 	.word	0x20000e08
 8006bf8:	20000930 	.word	0x20000930
 8006bfc:	e000ed04 	.word	0xe000ed04

08006c00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c12:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <vTaskDelay+0x60>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <vTaskDelay+0x30>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	60bb      	str	r3, [r7, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c30:	f000 f990 	bl	8006f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c34:	2100      	movs	r1, #0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fe04 	bl	8007844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c3c:	f000 f998 	bl	8006f70 <xTaskResumeAll>
 8006c40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d107      	bne.n	8006c58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c48:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <vTaskDelay+0x64>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20000e28 	.word	0x20000e28
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c70:	f001 fab8 	bl	80081e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <vTaskSuspend+0x18>
 8006c7a:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <vTaskSuspend+0xd4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	e000      	b.n	8006c82 <vTaskSuspend+0x1a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff f8eb 	bl	8005e64 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d004      	beq.n	8006ca0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3318      	adds	r3, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff f8e2 	bl	8005e64 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4826      	ldr	r0, [pc, #152]	; (8006d40 <vTaskSuspend+0xd8>)
 8006ca8:	f7ff f87f 	bl	8005daa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d103      	bne.n	8006cc0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006cc0:	f001 fac0 	bl	8008244 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006cc4:	4b1f      	ldr	r3, [pc, #124]	; (8006d44 <vTaskSuspend+0xdc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006ccc:	f001 fa8a 	bl	80081e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006cd0:	f000 fd0c 	bl	80076ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006cd4:	f001 fab6 	bl	8008244 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006cd8:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <vTaskSuspend+0xd4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d127      	bne.n	8006d32 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <vTaskSuspend+0xdc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d017      	beq.n	8006d1a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006cea:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <vTaskSuspend+0xe0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <vTaskSuspend+0xa0>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <vTaskSuspend+0xe4>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d18:	e00b      	b.n	8006d32 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <vTaskSuspend+0xd8>)
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <vTaskSuspend+0xe8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d103      	bne.n	8006d2e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <vTaskSuspend+0xd4>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
	}
 8006d2c:	e001      	b.n	8006d32 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006d2e:	f000 fa87 	bl	8007240 <vTaskSwitchContext>
	}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	2000092c 	.word	0x2000092c
 8006d40:	20000dec 	.word	0x20000dec
 8006d44:	20000e0c 	.word	0x20000e0c
 8006d48:	20000e28 	.word	0x20000e28
 8006d4c:	e000ed04 	.word	0xe000ed04
 8006d50:	20000e00 	.word	0x20000e00

08006d54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60fb      	str	r3, [r7, #12]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <prvTaskIsTaskSuspended+0x5c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10a      	bne.n	8006da0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <prvTaskIsTaskSuspended+0x60>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d005      	beq.n	8006da0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006da0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006da2:	4618      	mov	r0, r3
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000dec 	.word	0x20000dec
 8006db4:	20000dc0 	.word	0x20000dc0

08006db8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <vTaskResume+0x28>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60bb      	str	r3, [r7, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006de0:	4b20      	ldr	r3, [pc, #128]	; (8006e64 <vTaskResume+0xac>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d038      	beq.n	8006e5c <vTaskResume+0xa4>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d035      	beq.n	8006e5c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006df0:	f001 f9f8 	bl	80081e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff ffad 	bl	8006d54 <prvTaskIsTaskSuspended>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d02b      	beq.n	8006e58 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff f82d 	bl	8005e64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <vTaskResume+0xb0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d903      	bls.n	8006e1e <vTaskResume+0x66>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <vTaskResume+0xb0>)
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <vTaskResume+0xb4>)
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7fe ffb8 	bl	8005daa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <vTaskResume+0xac>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d307      	bcc.n	8006e58 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <vTaskResume+0xb8>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006e58:	f001 f9f4 	bl	8008244 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	2000092c 	.word	0x2000092c
 8006e68:	20000e08 	.word	0x20000e08
 8006e6c:	20000930 	.word	0x20000930
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e82:	463a      	mov	r2, r7
 8006e84:	1d39      	adds	r1, r7, #4
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe ff2c 	bl	8005ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	9202      	str	r2, [sp, #8]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	4924      	ldr	r1, [pc, #144]	; (8006f34 <vTaskStartScheduler+0xc0>)
 8006ea4:	4824      	ldr	r0, [pc, #144]	; (8006f38 <vTaskStartScheduler+0xc4>)
 8006ea6:	f7ff fcf3 	bl	8006890 <xTaskCreateStatic>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4a23      	ldr	r2, [pc, #140]	; (8006f3c <vTaskStartScheduler+0xc8>)
 8006eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eb0:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <vTaskStartScheduler+0xc8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e001      	b.n	8006ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d102      	bne.n	8006ece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ec8:	f000 fd10 	bl	80078ec <xTimerCreateTimerTask>
 8006ecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d11b      	bne.n	8006f0c <vTaskStartScheduler+0x98>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	613b      	str	r3, [r7, #16]
}
 8006ee6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <vTaskStartScheduler+0xcc>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3354      	adds	r3, #84	; 0x54
 8006eee:	4a15      	ldr	r2, [pc, #84]	; (8006f44 <vTaskStartScheduler+0xd0>)
 8006ef0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <vTaskStartScheduler+0xd4>)
 8006ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <vTaskStartScheduler+0xd8>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f00:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <vTaskStartScheduler+0xdc>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f06:	f001 f8cb 	bl	80080a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f0a:	e00e      	b.n	8006f2a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f12:	d10a      	bne.n	8006f2a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	60fb      	str	r3, [r7, #12]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <vTaskStartScheduler+0xb4>
}
 8006f2a:	bf00      	nop
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	0800a1bc 	.word	0x0800a1bc
 8006f38:	08007579 	.word	0x08007579
 8006f3c:	20000e24 	.word	0x20000e24
 8006f40:	2000092c 	.word	0x2000092c
 8006f44:	20000010 	.word	0x20000010
 8006f48:	20000e20 	.word	0x20000e20
 8006f4c:	20000e0c 	.word	0x20000e0c
 8006f50:	20000e04 	.word	0x20000e04

08006f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f58:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <vTaskSuspendAll+0x18>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	4a03      	ldr	r2, [pc, #12]	; (8006f6c <vTaskSuspendAll+0x18>)
 8006f60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f62:	bf00      	nop
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000e28 	.word	0x20000e28

08006f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f7e:	4b42      	ldr	r3, [pc, #264]	; (8007088 <xTaskResumeAll+0x118>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xTaskResumeAll+0x2c>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	603b      	str	r3, [r7, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f9c:	f001 f922 	bl	80081e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fa0:	4b39      	ldr	r3, [pc, #228]	; (8007088 <xTaskResumeAll+0x118>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	4a38      	ldr	r2, [pc, #224]	; (8007088 <xTaskResumeAll+0x118>)
 8006fa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006faa:	4b37      	ldr	r3, [pc, #220]	; (8007088 <xTaskResumeAll+0x118>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d162      	bne.n	8007078 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fb2:	4b36      	ldr	r3, [pc, #216]	; (800708c <xTaskResumeAll+0x11c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d05e      	beq.n	8007078 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fba:	e02f      	b.n	800701c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b34      	ldr	r3, [pc, #208]	; (8007090 <xTaskResumeAll+0x120>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3318      	adds	r3, #24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe ff4b 	bl	8005e64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe ff46 	bl	8005e64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4b2d      	ldr	r3, [pc, #180]	; (8007094 <xTaskResumeAll+0x124>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <xTaskResumeAll+0x7c>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a2a      	ldr	r2, [pc, #168]	; (8007094 <xTaskResumeAll+0x124>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4a27      	ldr	r2, [pc, #156]	; (8007098 <xTaskResumeAll+0x128>)
 8006ffa:	441a      	add	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe fed1 	bl	8005daa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700c:	4b23      	ldr	r3, [pc, #140]	; (800709c <xTaskResumeAll+0x12c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007016:	4b22      	ldr	r3, [pc, #136]	; (80070a0 <xTaskResumeAll+0x130>)
 8007018:	2201      	movs	r2, #1
 800701a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800701c:	4b1c      	ldr	r3, [pc, #112]	; (8007090 <xTaskResumeAll+0x120>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1cb      	bne.n	8006fbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800702a:	f000 fb5f 	bl	80076ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800702e:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <xTaskResumeAll+0x134>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d010      	beq.n	800705c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800703a:	f000 f847 	bl	80070cc <xTaskIncrementTick>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007044:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <xTaskResumeAll+0x130>)
 8007046:	2201      	movs	r2, #1
 8007048:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3b01      	subs	r3, #1
 800704e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1f1      	bne.n	800703a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007056:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <xTaskResumeAll+0x134>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800705c:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <xTaskResumeAll+0x130>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d009      	beq.n	8007078 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007064:	2301      	movs	r3, #1
 8007066:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <xTaskResumeAll+0x138>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007078:	f001 f8e4 	bl	8008244 <vPortExitCritical>

	return xAlreadyYielded;
 800707c:	68bb      	ldr	r3, [r7, #8]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000e28 	.word	0x20000e28
 800708c:	20000e00 	.word	0x20000e00
 8007090:	20000dc0 	.word	0x20000dc0
 8007094:	20000e08 	.word	0x20000e08
 8007098:	20000930 	.word	0x20000930
 800709c:	2000092c 	.word	0x2000092c
 80070a0:	20000e14 	.word	0x20000e14
 80070a4:	20000e10 	.word	0x20000e10
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <xTaskGetTickCount+0x1c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070b8:	687b      	ldr	r3, [r7, #4]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000e04 	.word	0x20000e04

080070cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d6:	4b4f      	ldr	r3, [pc, #316]	; (8007214 <xTaskIncrementTick+0x148>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 808f 	bne.w	80071fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070e0:	4b4d      	ldr	r3, [pc, #308]	; (8007218 <xTaskIncrementTick+0x14c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070e8:	4a4b      	ldr	r2, [pc, #300]	; (8007218 <xTaskIncrementTick+0x14c>)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d120      	bne.n	8007136 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070f4:	4b49      	ldr	r3, [pc, #292]	; (800721c <xTaskIncrementTick+0x150>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <xTaskIncrementTick+0x48>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	603b      	str	r3, [r7, #0]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <xTaskIncrementTick+0x46>
 8007114:	4b41      	ldr	r3, [pc, #260]	; (800721c <xTaskIncrementTick+0x150>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	4b41      	ldr	r3, [pc, #260]	; (8007220 <xTaskIncrementTick+0x154>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a3f      	ldr	r2, [pc, #252]	; (800721c <xTaskIncrementTick+0x150>)
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	4a3f      	ldr	r2, [pc, #252]	; (8007220 <xTaskIncrementTick+0x154>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	4b3e      	ldr	r3, [pc, #248]	; (8007224 <xTaskIncrementTick+0x158>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3301      	adds	r3, #1
 800712e:	4a3d      	ldr	r2, [pc, #244]	; (8007224 <xTaskIncrementTick+0x158>)
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	f000 fadb 	bl	80076ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007136:	4b3c      	ldr	r3, [pc, #240]	; (8007228 <xTaskIncrementTick+0x15c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	429a      	cmp	r2, r3
 800713e:	d349      	bcc.n	80071d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007140:	4b36      	ldr	r3, [pc, #216]	; (800721c <xTaskIncrementTick+0x150>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714a:	4b37      	ldr	r3, [pc, #220]	; (8007228 <xTaskIncrementTick+0x15c>)
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	601a      	str	r2, [r3, #0]
					break;
 8007152:	e03f      	b.n	80071d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007154:	4b31      	ldr	r3, [pc, #196]	; (800721c <xTaskIncrementTick+0x150>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d203      	bcs.n	8007174 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800716c:	4a2e      	ldr	r2, [pc, #184]	; (8007228 <xTaskIncrementTick+0x15c>)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007172:	e02f      	b.n	80071d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe fe73 	bl	8005e64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3318      	adds	r3, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fe6a 	bl	8005e64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <xTaskIncrementTick+0x160>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d903      	bls.n	80071a4 <xTaskIncrementTick+0xd8>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	4a22      	ldr	r2, [pc, #136]	; (800722c <xTaskIncrementTick+0x160>)
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4a1f      	ldr	r2, [pc, #124]	; (8007230 <xTaskIncrementTick+0x164>)
 80071b2:	441a      	add	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f7fe fdf5 	bl	8005daa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <xTaskIncrementTick+0x168>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d3b8      	bcc.n	8007140 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071ce:	2301      	movs	r3, #1
 80071d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d2:	e7b5      	b.n	8007140 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071d4:	4b17      	ldr	r3, [pc, #92]	; (8007234 <xTaskIncrementTick+0x168>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071da:	4915      	ldr	r1, [pc, #84]	; (8007230 <xTaskIncrementTick+0x164>)
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d901      	bls.n	80071f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071f0:	4b11      	ldr	r3, [pc, #68]	; (8007238 <xTaskIncrementTick+0x16c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e004      	b.n	8007208 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <xTaskIncrementTick+0x170>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a0d      	ldr	r2, [pc, #52]	; (800723c <xTaskIncrementTick+0x170>)
 8007206:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007208:	697b      	ldr	r3, [r7, #20]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000e28 	.word	0x20000e28
 8007218:	20000e04 	.word	0x20000e04
 800721c:	20000db8 	.word	0x20000db8
 8007220:	20000dbc 	.word	0x20000dbc
 8007224:	20000e18 	.word	0x20000e18
 8007228:	20000e20 	.word	0x20000e20
 800722c:	20000e08 	.word	0x20000e08
 8007230:	20000930 	.word	0x20000930
 8007234:	2000092c 	.word	0x2000092c
 8007238:	20000e14 	.word	0x20000e14
 800723c:	20000e10 	.word	0x20000e10

08007240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007246:	4b2a      	ldr	r3, [pc, #168]	; (80072f0 <vTaskSwitchContext+0xb0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800724e:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <vTaskSwitchContext+0xb4>)
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007254:	e046      	b.n	80072e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007256:	4b27      	ldr	r3, [pc, #156]	; (80072f4 <vTaskSwitchContext+0xb4>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <vTaskSwitchContext+0xb8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e010      	b.n	8007286 <vTaskSwitchContext+0x46>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <vTaskSwitchContext+0x40>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	607b      	str	r3, [r7, #4]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vTaskSwitchContext+0x3e>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3b01      	subs	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	491d      	ldr	r1, [pc, #116]	; (80072fc <vTaskSwitchContext+0xbc>)
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0e4      	beq.n	8007264 <vTaskSwitchContext+0x24>
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4a15      	ldr	r2, [pc, #84]	; (80072fc <vTaskSwitchContext+0xbc>)
 80072a6:	4413      	add	r3, r2
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	605a      	str	r2, [r3, #4]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3308      	adds	r3, #8
 80072bc:	429a      	cmp	r2, r3
 80072be:	d104      	bne.n	80072ca <vTaskSwitchContext+0x8a>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4a0b      	ldr	r2, [pc, #44]	; (8007300 <vTaskSwitchContext+0xc0>)
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <vTaskSwitchContext+0xb8>)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <vTaskSwitchContext+0xc0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3354      	adds	r3, #84	; 0x54
 80072e0:	4a08      	ldr	r2, [pc, #32]	; (8007304 <vTaskSwitchContext+0xc4>)
 80072e2:	6013      	str	r3, [r2, #0]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20000e28 	.word	0x20000e28
 80072f4:	20000e14 	.word	0x20000e14
 80072f8:	20000e08 	.word	0x20000e08
 80072fc:	20000930 	.word	0x20000930
 8007300:	2000092c 	.word	0x2000092c
 8007304:	20000010 	.word	0x20000010

08007308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <vTaskPlaceOnEventList+0x44>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3318      	adds	r3, #24
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fe fd5b 	bl	8005df2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800733c:	2101      	movs	r1, #1
 800733e:	6838      	ldr	r0, [r7, #0]
 8007340:	f000 fa80 	bl	8007844 <prvAddCurrentTaskToDelayedList>
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	2000092c 	.word	0x2000092c

08007350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	617b      	str	r3, [r7, #20]
}
 8007374:	bf00      	nop
 8007376:	e7fe      	b.n	8007376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3318      	adds	r3, #24
 800737e:	4619      	mov	r1, r3
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f7fe fd12 	bl	8005daa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	68b8      	ldr	r0, [r7, #8]
 8007396:	f000 fa55 	bl	8007844 <prvAddCurrentTaskToDelayedList>
	}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	2000092c 	.word	0x2000092c

080073a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	60fb      	str	r3, [r7, #12]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3318      	adds	r3, #24
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fd43 	bl	8005e64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073de:	4b1e      	ldr	r3, [pc, #120]	; (8007458 <xTaskRemoveFromEventList+0xb0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11d      	bne.n	8007422 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fd3a 	bl	8005e64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	4b19      	ldr	r3, [pc, #100]	; (800745c <xTaskRemoveFromEventList+0xb4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d903      	bls.n	8007404 <xTaskRemoveFromEventList+0x5c>
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4a16      	ldr	r2, [pc, #88]	; (800745c <xTaskRemoveFromEventList+0xb4>)
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4a13      	ldr	r2, [pc, #76]	; (8007460 <xTaskRemoveFromEventList+0xb8>)
 8007412:	441a      	add	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe fcc5 	bl	8005daa <vListInsertEnd>
 8007420:	e005      	b.n	800742e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3318      	adds	r3, #24
 8007426:	4619      	mov	r1, r3
 8007428:	480e      	ldr	r0, [pc, #56]	; (8007464 <xTaskRemoveFromEventList+0xbc>)
 800742a:	f7fe fcbe 	bl	8005daa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <xTaskRemoveFromEventList+0xc0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	429a      	cmp	r2, r3
 800743a:	d905      	bls.n	8007448 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <xTaskRemoveFromEventList+0xc4>)
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e001      	b.n	800744c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800744c:	697b      	ldr	r3, [r7, #20]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000e28 	.word	0x20000e28
 800745c:	20000e08 	.word	0x20000e08
 8007460:	20000930 	.word	0x20000930
 8007464:	20000dc0 	.word	0x20000dc0
 8007468:	2000092c 	.word	0x2000092c
 800746c:	20000e14 	.word	0x20000e14

08007470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <vTaskInternalSetTimeOutState+0x24>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <vTaskInternalSetTimeOutState+0x28>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	20000e18 	.word	0x20000e18
 8007498:	20000e04 	.word	0x20000e04

0800749c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	613b      	str	r3, [r7, #16]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074de:	f000 fe81 	bl	80081e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <xTaskCheckForTimeOut+0xbc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d102      	bne.n	8007502 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	e023      	b.n	800754a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <xTaskCheckForTimeOut+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d007      	beq.n	800751e <xTaskCheckForTimeOut+0x82>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	e015      	b.n	800754a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	429a      	cmp	r2, r3
 8007526:	d20b      	bcs.n	8007540 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff9b 	bl	8007470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e004      	b.n	800754a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007546:	2301      	movs	r3, #1
 8007548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800754a:	f000 fe7b 	bl	8008244 <vPortExitCritical>

	return xReturn;
 800754e:	69fb      	ldr	r3, [r7, #28]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000e04 	.word	0x20000e04
 800755c:	20000e18 	.word	0x20000e18

08007560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <vTaskMissedYield+0x14>)
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]
}
 800756a:	bf00      	nop
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	20000e14 	.word	0x20000e14

08007578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007580:	f000 f852 	bl	8007628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <prvIdleTask+0x28>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d9f9      	bls.n	8007580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <prvIdleTask+0x2c>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800759c:	e7f0      	b.n	8007580 <prvIdleTask+0x8>
 800759e:	bf00      	nop
 80075a0:	20000930 	.word	0x20000930
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ae:	2300      	movs	r3, #0
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	e00c      	b.n	80075ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4a12      	ldr	r2, [pc, #72]	; (8007608 <prvInitialiseTaskLists+0x60>)
 80075c0:	4413      	add	r3, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fbc4 	bl	8005d50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3301      	adds	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b37      	cmp	r3, #55	; 0x37
 80075d2:	d9ef      	bls.n	80075b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075d4:	480d      	ldr	r0, [pc, #52]	; (800760c <prvInitialiseTaskLists+0x64>)
 80075d6:	f7fe fbbb 	bl	8005d50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075da:	480d      	ldr	r0, [pc, #52]	; (8007610 <prvInitialiseTaskLists+0x68>)
 80075dc:	f7fe fbb8 	bl	8005d50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075e0:	480c      	ldr	r0, [pc, #48]	; (8007614 <prvInitialiseTaskLists+0x6c>)
 80075e2:	f7fe fbb5 	bl	8005d50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075e6:	480c      	ldr	r0, [pc, #48]	; (8007618 <prvInitialiseTaskLists+0x70>)
 80075e8:	f7fe fbb2 	bl	8005d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075ec:	480b      	ldr	r0, [pc, #44]	; (800761c <prvInitialiseTaskLists+0x74>)
 80075ee:	f7fe fbaf 	bl	8005d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075f2:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <prvInitialiseTaskLists+0x78>)
 80075f4:	4a05      	ldr	r2, [pc, #20]	; (800760c <prvInitialiseTaskLists+0x64>)
 80075f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <prvInitialiseTaskLists+0x7c>)
 80075fa:	4a05      	ldr	r2, [pc, #20]	; (8007610 <prvInitialiseTaskLists+0x68>)
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000930 	.word	0x20000930
 800760c:	20000d90 	.word	0x20000d90
 8007610:	20000da4 	.word	0x20000da4
 8007614:	20000dc0 	.word	0x20000dc0
 8007618:	20000dd4 	.word	0x20000dd4
 800761c:	20000dec 	.word	0x20000dec
 8007620:	20000db8 	.word	0x20000db8
 8007624:	20000dbc 	.word	0x20000dbc

08007628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800762e:	e019      	b.n	8007664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007630:	f000 fdd8 	bl	80081e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <prvCheckTasksWaitingTermination+0x50>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fc0f 	bl	8005e64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <prvCheckTasksWaitingTermination+0x54>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	4a0b      	ldr	r2, [pc, #44]	; (800767c <prvCheckTasksWaitingTermination+0x54>)
 800764e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3b01      	subs	r3, #1
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800765a:	f000 fdf3 	bl	8008244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f810 	bl	8007684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <prvCheckTasksWaitingTermination+0x58>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e1      	bne.n	8007630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000dd4 	.word	0x20000dd4
 800767c:	20000e00 	.word	0x20000e00
 8007680:	20000de8 	.word	0x20000de8

08007684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3354      	adds	r3, #84	; 0x54
 8007690:	4618      	mov	r0, r3
 8007692:	f001 fd49 	bl	8009128 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800769c:	2b00      	cmp	r3, #0
 800769e:	d108      	bne.n	80076b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 ff8b 	bl	80085c0 <vPortFree>
				vPortFree( pxTCB );
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 ff88 	bl	80085c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076b0:	e018      	b.n	80076e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d103      	bne.n	80076c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 ff7f 	bl	80085c0 <vPortFree>
	}
 80076c2:	e00f      	b.n	80076e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d00a      	beq.n	80076e4 <prvDeleteTCB+0x60>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	60fb      	str	r3, [r7, #12]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <prvDeleteTCB+0x5e>
	}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076f2:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <prvResetNextTaskUnblockTime+0x38>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <prvResetNextTaskUnblockTime+0x3c>)
 80076fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007704:	e008      	b.n	8007718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <prvResetNextTaskUnblockTime+0x38>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a04      	ldr	r2, [pc, #16]	; (8007728 <prvResetNextTaskUnblockTime+0x3c>)
 8007716:	6013      	str	r3, [r2, #0]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000db8 	.word	0x20000db8
 8007728:	20000e20 	.word	0x20000e20

0800772c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <xTaskGetSchedulerState+0x34>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800773a:	2301      	movs	r3, #1
 800773c:	607b      	str	r3, [r7, #4]
 800773e:	e008      	b.n	8007752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007740:	4b08      	ldr	r3, [pc, #32]	; (8007764 <xTaskGetSchedulerState+0x38>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007748:	2302      	movs	r3, #2
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	e001      	b.n	8007752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007752:	687b      	ldr	r3, [r7, #4]
	}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20000e0c 	.word	0x20000e0c
 8007764:	20000e28 	.word	0x20000e28

08007768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d056      	beq.n	800782c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800777e:	4b2e      	ldr	r3, [pc, #184]	; (8007838 <xTaskPriorityDisinherit+0xd0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	429a      	cmp	r2, r3
 8007786:	d00a      	beq.n	800779e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	60fb      	str	r3, [r7, #12]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	1e5a      	subs	r2, r3, #1
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d02c      	beq.n	800782c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d128      	bne.n	800782c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fb40 	bl	8005e64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fc:	4b0f      	ldr	r3, [pc, #60]	; (800783c <xTaskPriorityDisinherit+0xd4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d903      	bls.n	800780c <xTaskPriorityDisinherit+0xa4>
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a0c      	ldr	r2, [pc, #48]	; (800783c <xTaskPriorityDisinherit+0xd4>)
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4a09      	ldr	r2, [pc, #36]	; (8007840 <xTaskPriorityDisinherit+0xd8>)
 800781a:	441a      	add	r2, r3
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7fe fac1 	bl	8005daa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007828:	2301      	movs	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800782c:	697b      	ldr	r3, [r7, #20]
	}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	2000092c 	.word	0x2000092c
 800783c:	20000e08 	.word	0x20000e08
 8007840:	20000930 	.word	0x20000930

08007844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007854:	4b20      	ldr	r3, [pc, #128]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3304      	adds	r3, #4
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fb02 	bl	8005e64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007866:	d10a      	bne.n	800787e <prvAddCurrentTaskToDelayedList+0x3a>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800786e:	4b1a      	ldr	r3, [pc, #104]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4819      	ldr	r0, [pc, #100]	; (80078dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007878:	f7fe fa97 	bl	8005daa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800787c:	e026      	b.n	80078cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	429a      	cmp	r2, r3
 8007894:	d209      	bcs.n	80078aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007896:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3304      	adds	r3, #4
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f7fe faa5 	bl	8005df2 <vListInsert>
}
 80078a8:	e010      	b.n	80078cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078aa:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f7fe fa9b 	bl	8005df2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078bc:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d202      	bcs.n	80078cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078c6:	4a08      	ldr	r2, [pc, #32]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6013      	str	r3, [r2, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000e04 	.word	0x20000e04
 80078d8:	2000092c 	.word	0x2000092c
 80078dc:	20000dec 	.word	0x20000dec
 80078e0:	20000dbc 	.word	0x20000dbc
 80078e4:	20000db8 	.word	0x20000db8
 80078e8:	20000e20 	.word	0x20000e20

080078ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078f6:	f000 fb07 	bl	8007f08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078fa:	4b1c      	ldr	r3, [pc, #112]	; (800796c <xTimerCreateTimerTask+0x80>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d021      	beq.n	8007946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800790a:	1d3a      	adds	r2, r7, #4
 800790c:	f107 0108 	add.w	r1, r7, #8
 8007910:	f107 030c 	add.w	r3, r7, #12
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fa01 	bl	8005d1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	9202      	str	r2, [sp, #8]
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	2302      	movs	r3, #2
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	2300      	movs	r3, #0
 800792a:	460a      	mov	r2, r1
 800792c:	4910      	ldr	r1, [pc, #64]	; (8007970 <xTimerCreateTimerTask+0x84>)
 800792e:	4811      	ldr	r0, [pc, #68]	; (8007974 <xTimerCreateTimerTask+0x88>)
 8007930:	f7fe ffae 	bl	8006890 <xTaskCreateStatic>
 8007934:	4603      	mov	r3, r0
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <xTimerCreateTimerTask+0x8c>)
 8007938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <xTimerCreateTimerTask+0x8c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007942:	2301      	movs	r3, #1
 8007944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	613b      	str	r3, [r7, #16]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007962:	697b      	ldr	r3, [r7, #20]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20000e5c 	.word	0x20000e5c
 8007970:	0800a1c4 	.word	0x0800a1c4
 8007974:	08007ab1 	.word	0x08007ab1
 8007978:	20000e60 	.word	0x20000e60

0800797c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08a      	sub	sp, #40	; 0x28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800798a:	2300      	movs	r3, #0
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	623b      	str	r3, [r7, #32]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079aa:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <xTimerGenericCommand+0x98>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02a      	beq.n	8007a08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b05      	cmp	r3, #5
 80079c2:	dc18      	bgt.n	80079f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079c4:	f7ff feb2 	bl	800772c <xTaskGetSchedulerState>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d109      	bne.n	80079e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <xTimerGenericCommand+0x98>)
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f107 0110 	add.w	r1, r7, #16
 80079d6:	2300      	movs	r3, #0
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	f7fe fb71 	bl	80060c0 <xQueueGenericSend>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24
 80079e0:	e012      	b.n	8007a08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <xTimerGenericCommand+0x98>)
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	f107 0110 	add.w	r1, r7, #16
 80079ea:	2300      	movs	r3, #0
 80079ec:	2200      	movs	r2, #0
 80079ee:	f7fe fb67 	bl	80060c0 <xQueueGenericSend>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24
 80079f4:	e008      	b.n	8007a08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <xTimerGenericCommand+0x98>)
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f107 0110 	add.w	r1, r7, #16
 80079fe:	2300      	movs	r3, #0
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	f7fe fc5b 	bl	80062bc <xQueueGenericSendFromISR>
 8007a06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000e5c 	.word	0x20000e5c

08007a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a22:	4b22      	ldr	r3, [pc, #136]	; (8007aac <prvProcessExpiredTimer+0x94>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fa17 	bl	8005e64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d022      	beq.n	8007a8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	18d1      	adds	r1, r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	6978      	ldr	r0, [r7, #20]
 8007a52:	f000 f8d1 	bl	8007bf8 <prvInsertTimerInActiveList>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01f      	beq.n	8007a9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	2100      	movs	r1, #0
 8007a66:	6978      	ldr	r0, [r7, #20]
 8007a68:	f7ff ff88 	bl	800797c <xTimerGenericCommand>
 8007a6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d113      	bne.n	8007a9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	60fb      	str	r3, [r7, #12]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a90:	f023 0301 	bic.w	r3, r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	6978      	ldr	r0, [r7, #20]
 8007aa2:	4798      	blx	r3
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000e54 	.word	0x20000e54

08007ab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ab8:	f107 0308 	add.w	r3, r7, #8
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f857 	bl	8007b70 <prvGetNextExpireTime>
 8007ac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f803 	bl	8007ad4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ace:	f000 f8d5 	bl	8007c7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ad2:	e7f1      	b.n	8007ab8 <prvTimerTask+0x8>

08007ad4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ade:	f7ff fa39 	bl	8006f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f866 	bl	8007bb8 <prvSampleTimeNow>
 8007aec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d130      	bne.n	8007b56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10a      	bne.n	8007b10 <prvProcessTimerOrBlockTask+0x3c>
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d806      	bhi.n	8007b10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b02:	f7ff fa35 	bl	8006f70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff ff85 	bl	8007a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b0e:	e024      	b.n	8007b5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b16:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <prvProcessTimerOrBlockTask+0x90>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <prvProcessTimerOrBlockTask+0x50>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <prvProcessTimerOrBlockTask+0x52>
 8007b24:	2300      	movs	r3, #0
 8007b26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <prvProcessTimerOrBlockTask+0x94>)
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	f7fe fe77 	bl	8006828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b3a:	f7ff fa19 	bl	8006f70 <xTaskResumeAll>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <prvProcessTimerOrBlockTask+0x98>)
 8007b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	f3bf 8f6f 	isb	sy
}
 8007b54:	e001      	b.n	8007b5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b56:	f7ff fa0b 	bl	8006f70 <xTaskResumeAll>
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000e58 	.word	0x20000e58
 8007b68:	20000e5c 	.word	0x20000e5c
 8007b6c:	e000ed04 	.word	0xe000ed04

08007b70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <prvGetNextExpireTime+0x44>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <prvGetNextExpireTime+0x16>
 8007b82:	2201      	movs	r2, #1
 8007b84:	e000      	b.n	8007b88 <prvGetNextExpireTime+0x18>
 8007b86:	2200      	movs	r2, #0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d105      	bne.n	8007ba0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <prvGetNextExpireTime+0x44>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	e001      	b.n	8007ba4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000e54 	.word	0x20000e54

08007bb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bc0:	f7ff fa74 	bl	80070ac <xTaskGetTickCount>
 8007bc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <prvSampleTimeNow+0x3c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d205      	bcs.n	8007bdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bd0:	f000 f936 	bl	8007e40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e002      	b.n	8007be2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007be2:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <prvSampleTimeNow+0x3c>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007be8:	68fb      	ldr	r3, [r7, #12]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000e64 	.word	0x20000e64

08007bf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d812      	bhi.n	8007c44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d302      	bcc.n	8007c32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	e01b      	b.n	8007c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c32:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <prvInsertTimerInActiveList+0x7c>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7fe f8d8 	bl	8005df2 <vListInsert>
 8007c42:	e012      	b.n	8007c6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d206      	bcs.n	8007c5a <prvInsertTimerInActiveList+0x62>
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d302      	bcc.n	8007c5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e007      	b.n	8007c6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c5a:	4b07      	ldr	r3, [pc, #28]	; (8007c78 <prvInsertTimerInActiveList+0x80>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3304      	adds	r3, #4
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7fe f8c4 	bl	8005df2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c6a:	697b      	ldr	r3, [r7, #20]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000e58 	.word	0x20000e58
 8007c78:	20000e54 	.word	0x20000e54

08007c7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08e      	sub	sp, #56	; 0x38
 8007c80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c82:	e0ca      	b.n	8007e1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da18      	bge.n	8007cbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61fb      	str	r3, [r7, #28]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb2:	6850      	ldr	r0, [r2, #4]
 8007cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb6:	6892      	ldr	r2, [r2, #8]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f2c0 80aa 	blt.w	8007e18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe f8c5 	bl	8005e64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cda:	463b      	mov	r3, r7
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff ff6b 	bl	8007bb8 <prvSampleTimeNow>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	f200 8097 	bhi.w	8007e1a <prvProcessReceivedCommands+0x19e>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <prvProcessReceivedCommands+0x78>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d1d 	.word	0x08007d1d
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d1d 	.word	0x08007d1d
 8007d00:	08007d91 	.word	0x08007d91
 8007d04:	08007da5 	.word	0x08007da5
 8007d08:	08007def 	.word	0x08007def
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d1d 	.word	0x08007d1d
 8007d14:	08007d91 	.word	0x08007d91
 8007d18:	08007da5 	.word	0x08007da5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d22:	f043 0301 	orr.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	18d1      	adds	r1, r2, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d3c:	f7ff ff5c 	bl	8007bf8 <prvInsertTimerInActiveList>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d069      	beq.n	8007e1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d05e      	beq.n	8007e1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	441a      	add	r2, r3
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6e:	f7ff fe05 	bl	800797c <xTimerGenericCommand>
 8007d72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d14f      	bne.n	8007e1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	61bb      	str	r3, [r7, #24]
}
 8007d8c:	bf00      	nop
 8007d8e:	e7fe      	b.n	8007d8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d96:	f023 0301 	bic.w	r3, r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007da2:	e03a      	b.n	8007e1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	617b      	str	r3, [r7, #20]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	18d1      	adds	r1, r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de8:	f7ff ff06 	bl	8007bf8 <prvInsertTimerInActiveList>
					break;
 8007dec:	e015      	b.n	8007e1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dfe:	f000 fbdf 	bl	80085c0 <vPortFree>
 8007e02:	e00a      	b.n	8007e1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e16:	e000      	b.n	8007e1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e1a:	4b08      	ldr	r3, [pc, #32]	; (8007e3c <prvProcessReceivedCommands+0x1c0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	1d39      	adds	r1, r7, #4
 8007e20:	2200      	movs	r2, #0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fae6 	bl	80063f4 <xQueueReceive>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f47f af2a 	bne.w	8007c84 <prvProcessReceivedCommands+0x8>
	}
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3730      	adds	r7, #48	; 0x30
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000e5c 	.word	0x20000e5c

08007e40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e46:	e048      	b.n	8007eda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e48:	4b2d      	ldr	r3, [pc, #180]	; (8007f00 <prvSwitchTimerLists+0xc0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <prvSwitchTimerLists+0xc0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fd ffff 	bl	8005e64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d02e      	beq.n	8007eda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d90e      	bls.n	8007eac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e9a:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <prvSwitchTimerLists+0xc0>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7fd ffa4 	bl	8005df2 <vListInsert>
 8007eaa:	e016      	b.n	8007eda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eac:	2300      	movs	r3, #0
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fd60 	bl	800797c <xTimerGenericCommand>
 8007ebc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	603b      	str	r3, [r7, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <prvSwitchTimerLists+0xc0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1b1      	bne.n	8007e48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ee4:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <prvSwitchTimerLists+0xc0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007eea:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <prvSwitchTimerLists+0xc4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a04      	ldr	r2, [pc, #16]	; (8007f00 <prvSwitchTimerLists+0xc0>)
 8007ef0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ef2:	4a04      	ldr	r2, [pc, #16]	; (8007f04 <prvSwitchTimerLists+0xc4>)
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	6013      	str	r3, [r2, #0]
}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20000e54 	.word	0x20000e54
 8007f04:	20000e58 	.word	0x20000e58

08007f08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f0e:	f000 f969 	bl	80081e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d120      	bne.n	8007f5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f1a:	4814      	ldr	r0, [pc, #80]	; (8007f6c <prvCheckForValidListAndQueue+0x64>)
 8007f1c:	f7fd ff18 	bl	8005d50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f20:	4813      	ldr	r0, [pc, #76]	; (8007f70 <prvCheckForValidListAndQueue+0x68>)
 8007f22:	f7fd ff15 	bl	8005d50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <prvCheckForValidListAndQueue+0x6c>)
 8007f28:	4a10      	ldr	r2, [pc, #64]	; (8007f6c <prvCheckForValidListAndQueue+0x64>)
 8007f2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f2c:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvCheckForValidListAndQueue+0x70>)
 8007f2e:	4a10      	ldr	r2, [pc, #64]	; (8007f70 <prvCheckForValidListAndQueue+0x68>)
 8007f30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f32:	2300      	movs	r3, #0
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <prvCheckForValidListAndQueue+0x74>)
 8007f38:	4a11      	ldr	r2, [pc, #68]	; (8007f80 <prvCheckForValidListAndQueue+0x78>)
 8007f3a:	2110      	movs	r1, #16
 8007f3c:	200a      	movs	r0, #10
 8007f3e:	f7fe f823 	bl	8005f88 <xQueueGenericCreateStatic>
 8007f42:	4603      	mov	r3, r0
 8007f44:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	490b      	ldr	r1, [pc, #44]	; (8007f84 <prvCheckForValidListAndQueue+0x7c>)
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fc3c 	bl	80067d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f5c:	f000 f972 	bl	8008244 <vPortExitCritical>
}
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000e5c 	.word	0x20000e5c
 8007f6c:	20000e2c 	.word	0x20000e2c
 8007f70:	20000e40 	.word	0x20000e40
 8007f74:	20000e54 	.word	0x20000e54
 8007f78:	20000e58 	.word	0x20000e58
 8007f7c:	20000f08 	.word	0x20000f08
 8007f80:	20000e68 	.word	0x20000e68
 8007f84:	0800a1cc 	.word	0x0800a1cc

08007f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3b04      	subs	r3, #4
 8007f98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3b04      	subs	r3, #4
 8007fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f023 0201 	bic.w	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fb8:	4a0c      	ldr	r2, [pc, #48]	; (8007fec <pxPortInitialiseStack+0x64>)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3b14      	subs	r3, #20
 8007fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3b04      	subs	r3, #4
 8007fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f06f 0202 	mvn.w	r2, #2
 8007fd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3b20      	subs	r3, #32
 8007fdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fde:	68fb      	ldr	r3, [r7, #12]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	08007ff1 	.word	0x08007ff1

08007ff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <prvTaskExitError+0x54>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d00a      	beq.n	800801a <prvTaskExitError+0x2a>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	60fb      	str	r3, [r7, #12]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <prvTaskExitError+0x28>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	60bb      	str	r3, [r7, #8]
}
 800802c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800802e:	bf00      	nop
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0fc      	beq.n	8008030 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	2000000c 	.word	0x2000000c
	...

08008050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <pxCurrentTCBConst2>)
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	6808      	ldr	r0, [r1, #0]
 8008056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805a:	f380 8809 	msr	PSP, r0
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8811 	msr	BASEPRI, r0
 800806a:	4770      	bx	lr
 800806c:	f3af 8000 	nop.w

08008070 <pxCurrentTCBConst2>:
 8008070:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008078:	4808      	ldr	r0, [pc, #32]	; (800809c <prvPortStartFirstTask+0x24>)
 800807a:	6800      	ldr	r0, [r0, #0]
 800807c:	6800      	ldr	r0, [r0, #0]
 800807e:	f380 8808 	msr	MSP, r0
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8814 	msr	CONTROL, r0
 800808a:	b662      	cpsie	i
 800808c:	b661      	cpsie	f
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	df00      	svc	0
 8008098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800809a:	bf00      	nop
 800809c:	e000ed08 	.word	0xe000ed08

080080a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080a6:	4b46      	ldr	r3, [pc, #280]	; (80081c0 <xPortStartScheduler+0x120>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a46      	ldr	r2, [pc, #280]	; (80081c4 <xPortStartScheduler+0x124>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d10a      	bne.n	80080c6 <xPortStartScheduler+0x26>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	613b      	str	r3, [r7, #16]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080c6:	4b3e      	ldr	r3, [pc, #248]	; (80081c0 <xPortStartScheduler+0x120>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a3f      	ldr	r2, [pc, #252]	; (80081c8 <xPortStartScheduler+0x128>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10a      	bne.n	80080e6 <xPortStartScheduler+0x46>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080e6:	4b39      	ldr	r3, [pc, #228]	; (80081cc <xPortStartScheduler+0x12c>)
 80080e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	22ff      	movs	r2, #255	; 0xff
 80080f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4b31      	ldr	r3, [pc, #196]	; (80081d0 <xPortStartScheduler+0x130>)
 800810c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <xPortStartScheduler+0x134>)
 8008110:	2207      	movs	r2, #7
 8008112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008114:	e009      	b.n	800812a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008116:	4b2f      	ldr	r3, [pc, #188]	; (80081d4 <xPortStartScheduler+0x134>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3b01      	subs	r3, #1
 800811c:	4a2d      	ldr	r2, [pc, #180]	; (80081d4 <xPortStartScheduler+0x134>)
 800811e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d0ef      	beq.n	8008116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008136:	4b27      	ldr	r3, [pc, #156]	; (80081d4 <xPortStartScheduler+0x134>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1c3 0307 	rsb	r3, r3, #7
 800813e:	2b04      	cmp	r3, #4
 8008140:	d00a      	beq.n	8008158 <xPortStartScheduler+0xb8>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	60bb      	str	r3, [r7, #8]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008158:	4b1e      	ldr	r3, [pc, #120]	; (80081d4 <xPortStartScheduler+0x134>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <xPortStartScheduler+0x134>)
 8008160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008162:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <xPortStartScheduler+0x134>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800816a:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <xPortStartScheduler+0x134>)
 800816c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008176:	4b18      	ldr	r3, [pc, #96]	; (80081d8 <xPortStartScheduler+0x138>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <xPortStartScheduler+0x138>)
 800817c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008182:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <xPortStartScheduler+0x138>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a14      	ldr	r2, [pc, #80]	; (80081d8 <xPortStartScheduler+0x138>)
 8008188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800818c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800818e:	f000 f8dd 	bl	800834c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008192:	4b12      	ldr	r3, [pc, #72]	; (80081dc <xPortStartScheduler+0x13c>)
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008198:	f000 f8fc 	bl	8008394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800819c:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <xPortStartScheduler+0x140>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <xPortStartScheduler+0x140>)
 80081a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081a8:	f7ff ff66 	bl	8008078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081ac:	f7ff f848 	bl	8007240 <vTaskSwitchContext>
	prvTaskExitError();
 80081b0:	f7ff ff1e 	bl	8007ff0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	e000ed00 	.word	0xe000ed00
 80081c4:	410fc271 	.word	0x410fc271
 80081c8:	410fc270 	.word	0x410fc270
 80081cc:	e000e400 	.word	0xe000e400
 80081d0:	20000f58 	.word	0x20000f58
 80081d4:	20000f5c 	.word	0x20000f5c
 80081d8:	e000ed20 	.word	0xe000ed20
 80081dc:	2000000c 	.word	0x2000000c
 80081e0:	e000ef34 	.word	0xe000ef34

080081e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	607b      	str	r3, [r7, #4]
}
 80081fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081fe:	4b0f      	ldr	r3, [pc, #60]	; (800823c <vPortEnterCritical+0x58>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3301      	adds	r3, #1
 8008204:	4a0d      	ldr	r2, [pc, #52]	; (800823c <vPortEnterCritical+0x58>)
 8008206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008208:	4b0c      	ldr	r3, [pc, #48]	; (800823c <vPortEnterCritical+0x58>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10f      	bne.n	8008230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <vPortEnterCritical+0x5c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <vPortEnterCritical+0x4c>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	603b      	str	r3, [r7, #0]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <vPortEnterCritical+0x4a>
	}
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	2000000c 	.word	0x2000000c
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <vPortExitCritical+0x50>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <vPortExitCritical+0x24>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	607b      	str	r3, [r7, #4]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <vPortExitCritical+0x50>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3b01      	subs	r3, #1
 800826e:	4a09      	ldr	r2, [pc, #36]	; (8008294 <vPortExitCritical+0x50>)
 8008270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <vPortExitCritical+0x50>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d105      	bne.n	8008286 <vPortExitCritical+0x42>
 800827a:	2300      	movs	r3, #0
 800827c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f383 8811 	msr	BASEPRI, r3
}
 8008284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	2000000c 	.word	0x2000000c
	...

080082a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082a0:	f3ef 8009 	mrs	r0, PSP
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	4b15      	ldr	r3, [pc, #84]	; (8008300 <pxCurrentTCBConst>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f01e 0f10 	tst.w	lr, #16
 80082b0:	bf08      	it	eq
 80082b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ba:	6010      	str	r0, [r2, #0]
 80082bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082c4:	f380 8811 	msr	BASEPRI, r0
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f7fe ffb6 	bl	8007240 <vTaskSwitchContext>
 80082d4:	f04f 0000 	mov.w	r0, #0
 80082d8:	f380 8811 	msr	BASEPRI, r0
 80082dc:	bc09      	pop	{r0, r3}
 80082de:	6819      	ldr	r1, [r3, #0]
 80082e0:	6808      	ldr	r0, [r1, #0]
 80082e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e6:	f01e 0f10 	tst.w	lr, #16
 80082ea:	bf08      	it	eq
 80082ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082f0:	f380 8809 	msr	PSP, r0
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	f3af 8000 	nop.w

08008300 <pxCurrentTCBConst>:
 8008300:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop

08008308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	607b      	str	r3, [r7, #4]
}
 8008320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008322:	f7fe fed3 	bl	80070cc <xTaskIncrementTick>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <xPortSysTickHandler+0x40>)
 800832e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	f383 8811 	msr	BASEPRI, r3
}
 800833e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008350:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <vPortSetupTimerInterrupt+0x34>)
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <vPortSetupTimerInterrupt+0x38>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800835c:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <vPortSetupTimerInterrupt+0x3c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a0a      	ldr	r2, [pc, #40]	; (800838c <vPortSetupTimerInterrupt+0x40>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	099b      	lsrs	r3, r3, #6
 8008368:	4a09      	ldr	r2, [pc, #36]	; (8008390 <vPortSetupTimerInterrupt+0x44>)
 800836a:	3b01      	subs	r3, #1
 800836c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800836e:	4b04      	ldr	r3, [pc, #16]	; (8008380 <vPortSetupTimerInterrupt+0x34>)
 8008370:	2207      	movs	r2, #7
 8008372:	601a      	str	r2, [r3, #0]
}
 8008374:	bf00      	nop
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	e000e010 	.word	0xe000e010
 8008384:	e000e018 	.word	0xe000e018
 8008388:	20000000 	.word	0x20000000
 800838c:	10624dd3 	.word	0x10624dd3
 8008390:	e000e014 	.word	0xe000e014

08008394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083a4 <vPortEnableVFP+0x10>
 8008398:	6801      	ldr	r1, [r0, #0]
 800839a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800839e:	6001      	str	r1, [r0, #0]
 80083a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083a2:	bf00      	nop
 80083a4:	e000ed88 	.word	0xe000ed88

080083a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ae:	f3ef 8305 	mrs	r3, IPSR
 80083b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	d914      	bls.n	80083e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ba:	4a17      	ldr	r2, [pc, #92]	; (8008418 <vPortValidateInterruptPriority+0x70>)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083c4:	4b15      	ldr	r3, [pc, #84]	; (800841c <vPortValidateInterruptPriority+0x74>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	7afa      	ldrb	r2, [r7, #11]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d20a      	bcs.n	80083e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083e4:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <vPortValidateInterruptPriority+0x78>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <vPortValidateInterruptPriority+0x7c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d90a      	bls.n	800840a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	603b      	str	r3, [r7, #0]
}
 8008406:	bf00      	nop
 8008408:	e7fe      	b.n	8008408 <vPortValidateInterruptPriority+0x60>
	}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	e000e3f0 	.word	0xe000e3f0
 800841c:	20000f58 	.word	0x20000f58
 8008420:	e000ed0c 	.word	0xe000ed0c
 8008424:	20000f5c 	.word	0x20000f5c

08008428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08a      	sub	sp, #40	; 0x28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008430:	2300      	movs	r3, #0
 8008432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008434:	f7fe fd8e 	bl	8006f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008438:	4b5b      	ldr	r3, [pc, #364]	; (80085a8 <pvPortMalloc+0x180>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008440:	f000 f920 	bl	8008684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008444:	4b59      	ldr	r3, [pc, #356]	; (80085ac <pvPortMalloc+0x184>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4013      	ands	r3, r2
 800844c:	2b00      	cmp	r3, #0
 800844e:	f040 8093 	bne.w	8008578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01d      	beq.n	8008494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008458:	2208      	movs	r2, #8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b00      	cmp	r3, #0
 8008468:	d014      	beq.n	8008494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f023 0307 	bic.w	r3, r3, #7
 8008470:	3308      	adds	r3, #8
 8008472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <pvPortMalloc+0x6c>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	617b      	str	r3, [r7, #20]
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d06e      	beq.n	8008578 <pvPortMalloc+0x150>
 800849a:	4b45      	ldr	r3, [pc, #276]	; (80085b0 <pvPortMalloc+0x188>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d869      	bhi.n	8008578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084a4:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <pvPortMalloc+0x18c>)
 80084a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084a8:	4b42      	ldr	r3, [pc, #264]	; (80085b4 <pvPortMalloc+0x18c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ae:	e004      	b.n	80084ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d903      	bls.n	80084cc <pvPortMalloc+0xa4>
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f1      	bne.n	80084b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084cc:	4b36      	ldr	r3, [pc, #216]	; (80085a8 <pvPortMalloc+0x180>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d050      	beq.n	8008578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2208      	movs	r2, #8
 80084dc:	4413      	add	r3, r2
 80084de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	2308      	movs	r3, #8
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d91f      	bls.n	8008538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <pvPortMalloc+0xf8>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	613b      	str	r3, [r7, #16]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	1ad2      	subs	r2, r2, r3
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008532:	69b8      	ldr	r0, [r7, #24]
 8008534:	f000 f908 	bl	8008748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008538:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <pvPortMalloc+0x188>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	4a1b      	ldr	r2, [pc, #108]	; (80085b0 <pvPortMalloc+0x188>)
 8008544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008546:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <pvPortMalloc+0x188>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <pvPortMalloc+0x190>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d203      	bcs.n	800855a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008552:	4b17      	ldr	r3, [pc, #92]	; (80085b0 <pvPortMalloc+0x188>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <pvPortMalloc+0x190>)
 8008558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <pvPortMalloc+0x184>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	431a      	orrs	r2, r3
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800856e:	4b13      	ldr	r3, [pc, #76]	; (80085bc <pvPortMalloc+0x194>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3301      	adds	r3, #1
 8008574:	4a11      	ldr	r2, [pc, #68]	; (80085bc <pvPortMalloc+0x194>)
 8008576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008578:	f7fe fcfa 	bl	8006f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <pvPortMalloc+0x174>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60fb      	str	r3, [r7, #12]
}
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <pvPortMalloc+0x172>
	return pvReturn;
 800859c:	69fb      	ldr	r3, [r7, #28]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3728      	adds	r7, #40	; 0x28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20004b68 	.word	0x20004b68
 80085ac:	20004b7c 	.word	0x20004b7c
 80085b0:	20004b6c 	.word	0x20004b6c
 80085b4:	20004b60 	.word	0x20004b60
 80085b8:	20004b70 	.word	0x20004b70
 80085bc:	20004b74 	.word	0x20004b74

080085c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d04d      	beq.n	800866e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085d2:	2308      	movs	r3, #8
 80085d4:	425b      	negs	r3, r3
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4413      	add	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	4b24      	ldr	r3, [pc, #144]	; (8008678 <vPortFree+0xb8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <vPortFree+0x44>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	60fb      	str	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <vPortFree+0x62>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	60bb      	str	r3, [r7, #8]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <vPortFree+0xb8>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4013      	ands	r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01e      	beq.n	800866e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11a      	bne.n	800866e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <vPortFree+0xb8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008648:	f7fe fc84 	bl	8006f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <vPortFree+0xbc>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4413      	add	r3, r2
 8008656:	4a09      	ldr	r2, [pc, #36]	; (800867c <vPortFree+0xbc>)
 8008658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800865a:	6938      	ldr	r0, [r7, #16]
 800865c:	f000 f874 	bl	8008748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <vPortFree+0xc0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	4a06      	ldr	r2, [pc, #24]	; (8008680 <vPortFree+0xc0>)
 8008668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800866a:	f7fe fc81 	bl	8006f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800866e:	bf00      	nop
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20004b7c 	.word	0x20004b7c
 800867c:	20004b6c 	.word	0x20004b6c
 8008680:	20004b78 	.word	0x20004b78

08008684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800868a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800868e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008690:	4b27      	ldr	r3, [pc, #156]	; (8008730 <prvHeapInit+0xac>)
 8008692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00c      	beq.n	80086b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3307      	adds	r3, #7
 80086a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <prvHeapInit+0xac>)
 80086b4:	4413      	add	r3, r2
 80086b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086bc:	4a1d      	ldr	r2, [pc, #116]	; (8008734 <prvHeapInit+0xb0>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086c2:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <prvHeapInit+0xb0>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	4413      	add	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086d0:	2208      	movs	r2, #8
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0307 	bic.w	r3, r3, #7
 80086de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a15      	ldr	r2, [pc, #84]	; (8008738 <prvHeapInit+0xb4>)
 80086e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <prvHeapInit+0xb4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2200      	movs	r2, #0
 80086ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ee:	4b12      	ldr	r3, [pc, #72]	; (8008738 <prvHeapInit+0xb4>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008704:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <prvHeapInit+0xb4>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	4a0a      	ldr	r2, [pc, #40]	; (800873c <prvHeapInit+0xb8>)
 8008712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <prvHeapInit+0xbc>)
 800871a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <prvHeapInit+0xc0>)
 800871e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008722:	601a      	str	r2, [r3, #0]
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	20000f60 	.word	0x20000f60
 8008734:	20004b60 	.word	0x20004b60
 8008738:	20004b68 	.word	0x20004b68
 800873c:	20004b70 	.word	0x20004b70
 8008740:	20004b6c 	.word	0x20004b6c
 8008744:	20004b7c 	.word	0x20004b7c

08008748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008750:	4b28      	ldr	r3, [pc, #160]	; (80087f4 <prvInsertBlockIntoFreeList+0xac>)
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e002      	b.n	800875c <prvInsertBlockIntoFreeList+0x14>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	429a      	cmp	r2, r3
 8008764:	d8f7      	bhi.n	8008756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4413      	add	r3, r2
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	429a      	cmp	r2, r3
 8008776:	d108      	bne.n	800878a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	441a      	add	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d118      	bne.n	80087d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <prvInsertBlockIntoFreeList+0xb0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d00d      	beq.n	80087c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	441a      	add	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e008      	b.n	80087d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087c6:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <prvInsertBlockIntoFreeList+0xb0>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e003      	b.n	80087d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d002      	beq.n	80087e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087e6:	bf00      	nop
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20004b60 	.word	0x20004b60
 80087f8:	20004b68 	.word	0x20004b68

080087fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <CDC_Transmit_FS+0x48>)
 800880e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008812:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800881e:	2301      	movs	r3, #1
 8008820:	e00b      	b.n	800883a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008822:	887b      	ldrh	r3, [r7, #2]
 8008824:	461a      	mov	r2, r3
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4806      	ldr	r0, [pc, #24]	; (8008844 <CDC_Transmit_FS+0x48>)
 800882a:	f7fb fec9 	bl	80045c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800882e:	4805      	ldr	r0, [pc, #20]	; (8008844 <CDC_Transmit_FS+0x48>)
 8008830:	f7fb fee8 	bl	8004604 <USBD_CDC_TransmitPacket>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20004b80 	.word	0x20004b80

08008848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fb ff57 	bl	8004712 <USBD_LL_SetupStage>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	4619      	mov	r1, r3
 8008896:	f7fb ff91 	bl	80047bc <USBD_LL_DataOutStage>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	334c      	adds	r3, #76	; 0x4c
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7fc f82a 	bl	8004922 <USBD_LL_DataInStage>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fc f95e 	bl	8004ba6 <USBD_LL_SOF>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d001      	beq.n	800890a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008906:	f7f8 f841 	bl	800098c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008910:	7bfa      	ldrb	r2, [r7, #15]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7fc f908 	bl	8004b2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008920:	4618      	mov	r0, r3
 8008922:	f7fc f8b0 	bl	8004a86 <USBD_LL_Reset>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800893e:	4618      	mov	r0, r3
 8008940:	f7fc f903 	bl	8004b4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008964:	4b04      	ldr	r3, [pc, #16]	; (8008978 <HAL_PCD_SuspendCallback+0x48>)
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	4a03      	ldr	r2, [pc, #12]	; (8008978 <HAL_PCD_SuspendCallback+0x48>)
 800896a:	f043 0306 	orr.w	r3, r3, #6
 800896e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800898a:	4618      	mov	r0, r3
 800898c:	f7fc f8f3 	bl	8004b76 <USBD_LL_Resume>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fc f94b 	bl	8004c4a <USBD_LL_IsoOUTIncomplete>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fc f907 	bl	8004be6 <USBD_LL_IsoINIncomplete>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fc f95d 	bl	8004cae <USBD_LL_DevConnected>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fc f95a 	bl	8004cc4 <USBD_LL_DevDisconnected>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4603      	mov	r3, r0
 8008a28:	70fb      	strb	r3, [r7, #3]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70bb      	strb	r3, [r7, #2]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a40:	78bb      	ldrb	r3, [r7, #2]
 8008a42:	883a      	ldrh	r2, [r7, #0]
 8008a44:	78f9      	ldrb	r1, [r7, #3]
 8008a46:	f7f9 fa83 	bl	8001f50 <HAL_PCD_EP_Open>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f8d3 	bl	8008bfc <USBD_Get_USB_Status>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f9 fb61 	bl	800214a <HAL_PCD_EP_SetStall>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f8b4 	bl	8008bfc <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f9 fba6 	bl	8002212 <HAL_PCD_EP_ClrStall>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f895 	bl	8008bfc <USBD_Get_USB_Status>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008af2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	da0b      	bge.n	8008b14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	4613      	mov	r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	333e      	adds	r3, #62	; 0x3e
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	e00b      	b.n	8008b2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008b2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f9 f9d5 	bl	8001f06 <HAL_PCD_SetAddress>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f84a 	bl	8008bfc <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b086      	sub	sp, #24
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
 8008b82:	460b      	mov	r3, r1
 8008b84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b94:	7af9      	ldrb	r1, [r7, #11]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	f7f9 fa8c 	bl	80020b6 <HAL_PCD_EP_Transmit>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f829 	bl	8008bfc <USBD_Get_USB_Status>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bae:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bd6:	7af9      	ldrb	r1, [r7, #11]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	f7f9 fa20 	bl	8002020 <HAL_PCD_EP_Receive>
 8008be0:	4603      	mov	r3, r0
 8008be2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f808 	bl	8008bfc <USBD_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d817      	bhi.n	8008c40 <USBD_Get_USB_Status+0x44>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <USBD_Get_USB_Status+0x1c>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c2f 	.word	0x08008c2f
 8008c20:	08008c35 	.word	0x08008c35
 8008c24:	08008c3b 	.word	0x08008c3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	e00b      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	73fb      	strb	r3, [r7, #15]
    break;
 8008c32:	e008      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
    break;
 8008c38:	e005      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3e:	e002      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	bf00      	nop
  }
  return usb_status;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <__errno>:
 8008c54:	4b01      	ldr	r3, [pc, #4]	; (8008c5c <__errno+0x8>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000010 	.word	0x20000010

08008c60 <std>:
 8008c60:	2300      	movs	r3, #0
 8008c62:	b510      	push	{r4, lr}
 8008c64:	4604      	mov	r4, r0
 8008c66:	e9c0 3300 	strd	r3, r3, [r0]
 8008c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6e:	6083      	str	r3, [r0, #8]
 8008c70:	8181      	strh	r1, [r0, #12]
 8008c72:	6643      	str	r3, [r0, #100]	; 0x64
 8008c74:	81c2      	strh	r2, [r0, #14]
 8008c76:	6183      	str	r3, [r0, #24]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	305c      	adds	r0, #92	; 0x5c
 8008c7e:	f000 f91a 	bl	8008eb6 <memset>
 8008c82:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <std+0x38>)
 8008c84:	6263      	str	r3, [r4, #36]	; 0x24
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <std+0x3c>)
 8008c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c8a:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <std+0x40>)
 8008c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c8e:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <std+0x44>)
 8008c90:	6224      	str	r4, [r4, #32]
 8008c92:	6323      	str	r3, [r4, #48]	; 0x30
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	bf00      	nop
 8008c98:	08009241 	.word	0x08009241
 8008c9c:	08009263 	.word	0x08009263
 8008ca0:	0800929b 	.word	0x0800929b
 8008ca4:	080092bf 	.word	0x080092bf

08008ca8 <_cleanup_r>:
 8008ca8:	4901      	ldr	r1, [pc, #4]	; (8008cb0 <_cleanup_r+0x8>)
 8008caa:	f000 b8af 	b.w	8008e0c <_fwalk_reent>
 8008cae:	bf00      	nop
 8008cb0:	08009599 	.word	0x08009599

08008cb4 <__sfmoreglue>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	2268      	movs	r2, #104	; 0x68
 8008cb8:	1e4d      	subs	r5, r1, #1
 8008cba:	4355      	muls	r5, r2
 8008cbc:	460e      	mov	r6, r1
 8008cbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cc2:	f000 f921 	bl	8008f08 <_malloc_r>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	b140      	cbz	r0, 8008cdc <__sfmoreglue+0x28>
 8008cca:	2100      	movs	r1, #0
 8008ccc:	e9c0 1600 	strd	r1, r6, [r0]
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	60a0      	str	r0, [r4, #8]
 8008cd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cd8:	f000 f8ed 	bl	8008eb6 <memset>
 8008cdc:	4620      	mov	r0, r4
 8008cde:	bd70      	pop	{r4, r5, r6, pc}

08008ce0 <__sfp_lock_acquire>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sfp_lock_acquire+0x8>)
 8008ce2:	f000 b8d8 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20005369 	.word	0x20005369

08008cec <__sfp_lock_release>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sfp_lock_release+0x8>)
 8008cee:	f000 b8d3 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20005369 	.word	0x20005369

08008cf8 <__sinit_lock_acquire>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__sinit_lock_acquire+0x8>)
 8008cfa:	f000 b8cc 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	2000536a 	.word	0x2000536a

08008d04 <__sinit_lock_release>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__sinit_lock_release+0x8>)
 8008d06:	f000 b8c7 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	2000536a 	.word	0x2000536a

08008d10 <__sinit>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	4604      	mov	r4, r0
 8008d14:	f7ff fff0 	bl	8008cf8 <__sinit_lock_acquire>
 8008d18:	69a3      	ldr	r3, [r4, #24]
 8008d1a:	b11b      	cbz	r3, 8008d24 <__sinit+0x14>
 8008d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d20:	f7ff bff0 	b.w	8008d04 <__sinit_lock_release>
 8008d24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d28:	6523      	str	r3, [r4, #80]	; 0x50
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <__sinit+0x68>)
 8008d2c:	4a13      	ldr	r2, [pc, #76]	; (8008d7c <__sinit+0x6c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	bf04      	itt	eq
 8008d36:	2301      	moveq	r3, #1
 8008d38:	61a3      	streq	r3, [r4, #24]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 f820 	bl	8008d80 <__sfp>
 8008d40:	6060      	str	r0, [r4, #4]
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f81c 	bl	8008d80 <__sfp>
 8008d48:	60a0      	str	r0, [r4, #8]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 f818 	bl	8008d80 <__sfp>
 8008d50:	2200      	movs	r2, #0
 8008d52:	60e0      	str	r0, [r4, #12]
 8008d54:	2104      	movs	r1, #4
 8008d56:	6860      	ldr	r0, [r4, #4]
 8008d58:	f7ff ff82 	bl	8008c60 <std>
 8008d5c:	68a0      	ldr	r0, [r4, #8]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	2109      	movs	r1, #9
 8008d62:	f7ff ff7d 	bl	8008c60 <std>
 8008d66:	68e0      	ldr	r0, [r4, #12]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	2112      	movs	r1, #18
 8008d6c:	f7ff ff78 	bl	8008c60 <std>
 8008d70:	2301      	movs	r3, #1
 8008d72:	61a3      	str	r3, [r4, #24]
 8008d74:	e7d2      	b.n	8008d1c <__sinit+0xc>
 8008d76:	bf00      	nop
 8008d78:	0800a24c 	.word	0x0800a24c
 8008d7c:	08008ca9 	.word	0x08008ca9

08008d80 <__sfp>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	4607      	mov	r7, r0
 8008d84:	f7ff ffac 	bl	8008ce0 <__sfp_lock_acquire>
 8008d88:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <__sfp+0x84>)
 8008d8a:	681e      	ldr	r6, [r3, #0]
 8008d8c:	69b3      	ldr	r3, [r6, #24]
 8008d8e:	b913      	cbnz	r3, 8008d96 <__sfp+0x16>
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7ff ffbd 	bl	8008d10 <__sinit>
 8008d96:	3648      	adds	r6, #72	; 0x48
 8008d98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	d503      	bpl.n	8008da8 <__sfp+0x28>
 8008da0:	6833      	ldr	r3, [r6, #0]
 8008da2:	b30b      	cbz	r3, 8008de8 <__sfp+0x68>
 8008da4:	6836      	ldr	r6, [r6, #0]
 8008da6:	e7f7      	b.n	8008d98 <__sfp+0x18>
 8008da8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dac:	b9d5      	cbnz	r5, 8008de4 <__sfp+0x64>
 8008dae:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <__sfp+0x88>)
 8008db0:	60e3      	str	r3, [r4, #12]
 8008db2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008db6:	6665      	str	r5, [r4, #100]	; 0x64
 8008db8:	f000 f86c 	bl	8008e94 <__retarget_lock_init_recursive>
 8008dbc:	f7ff ff96 	bl	8008cec <__sfp_lock_release>
 8008dc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dc8:	6025      	str	r5, [r4, #0]
 8008dca:	61a5      	str	r5, [r4, #24]
 8008dcc:	2208      	movs	r2, #8
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dd4:	f000 f86f 	bl	8008eb6 <memset>
 8008dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008de0:	4620      	mov	r0, r4
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	3468      	adds	r4, #104	; 0x68
 8008de6:	e7d9      	b.n	8008d9c <__sfp+0x1c>
 8008de8:	2104      	movs	r1, #4
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7ff ff62 	bl	8008cb4 <__sfmoreglue>
 8008df0:	4604      	mov	r4, r0
 8008df2:	6030      	str	r0, [r6, #0]
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1d5      	bne.n	8008da4 <__sfp+0x24>
 8008df8:	f7ff ff78 	bl	8008cec <__sfp_lock_release>
 8008dfc:	230c      	movs	r3, #12
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	e7ee      	b.n	8008de0 <__sfp+0x60>
 8008e02:	bf00      	nop
 8008e04:	0800a24c 	.word	0x0800a24c
 8008e08:	ffff0001 	.word	0xffff0001

08008e0c <_fwalk_reent>:
 8008e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4606      	mov	r6, r0
 8008e12:	4688      	mov	r8, r1
 8008e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e18:	2700      	movs	r7, #0
 8008e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e22:	d505      	bpl.n	8008e30 <_fwalk_reent+0x24>
 8008e24:	6824      	ldr	r4, [r4, #0]
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	d1f7      	bne.n	8008e1a <_fwalk_reent+0xe>
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e30:	89ab      	ldrh	r3, [r5, #12]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d907      	bls.n	8008e46 <_fwalk_reent+0x3a>
 8008e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	d003      	beq.n	8008e46 <_fwalk_reent+0x3a>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4630      	mov	r0, r6
 8008e42:	47c0      	blx	r8
 8008e44:	4307      	orrs	r7, r0
 8008e46:	3568      	adds	r5, #104	; 0x68
 8008e48:	e7e9      	b.n	8008e1e <_fwalk_reent+0x12>
	...

08008e4c <__libc_init_array>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4d0d      	ldr	r5, [pc, #52]	; (8008e84 <__libc_init_array+0x38>)
 8008e50:	4c0d      	ldr	r4, [pc, #52]	; (8008e88 <__libc_init_array+0x3c>)
 8008e52:	1b64      	subs	r4, r4, r5
 8008e54:	10a4      	asrs	r4, r4, #2
 8008e56:	2600      	movs	r6, #0
 8008e58:	42a6      	cmp	r6, r4
 8008e5a:	d109      	bne.n	8008e70 <__libc_init_array+0x24>
 8008e5c:	4d0b      	ldr	r5, [pc, #44]	; (8008e8c <__libc_init_array+0x40>)
 8008e5e:	4c0c      	ldr	r4, [pc, #48]	; (8008e90 <__libc_init_array+0x44>)
 8008e60:	f001 f976 	bl	800a150 <_init>
 8008e64:	1b64      	subs	r4, r4, r5
 8008e66:	10a4      	asrs	r4, r4, #2
 8008e68:	2600      	movs	r6, #0
 8008e6a:	42a6      	cmp	r6, r4
 8008e6c:	d105      	bne.n	8008e7a <__libc_init_array+0x2e>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e74:	4798      	blx	r3
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7ee      	b.n	8008e58 <__libc_init_array+0xc>
 8008e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7e:	4798      	blx	r3
 8008e80:	3601      	adds	r6, #1
 8008e82:	e7f2      	b.n	8008e6a <__libc_init_array+0x1e>
 8008e84:	0800a28c 	.word	0x0800a28c
 8008e88:	0800a28c 	.word	0x0800a28c
 8008e8c:	0800a28c 	.word	0x0800a28c
 8008e90:	0800a290 	.word	0x0800a290

08008e94 <__retarget_lock_init_recursive>:
 8008e94:	4770      	bx	lr

08008e96 <__retarget_lock_acquire_recursive>:
 8008e96:	4770      	bx	lr

08008e98 <__retarget_lock_release_recursive>:
 8008e98:	4770      	bx	lr

08008e9a <memcpy>:
 8008e9a:	440a      	add	r2, r1
 8008e9c:	4291      	cmp	r1, r2
 8008e9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea2:	d100      	bne.n	8008ea6 <memcpy+0xc>
 8008ea4:	4770      	bx	lr
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb0:	4291      	cmp	r1, r2
 8008eb2:	d1f9      	bne.n	8008ea8 <memcpy+0xe>
 8008eb4:	bd10      	pop	{r4, pc}

08008eb6 <memset>:
 8008eb6:	4402      	add	r2, r0
 8008eb8:	4603      	mov	r3, r0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d100      	bne.n	8008ec0 <memset+0xa>
 8008ebe:	4770      	bx	lr
 8008ec0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec4:	e7f9      	b.n	8008eba <memset+0x4>
	...

08008ec8 <sbrk_aligned>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4e0e      	ldr	r6, [pc, #56]	; (8008f04 <sbrk_aligned+0x3c>)
 8008ecc:	460c      	mov	r4, r1
 8008ece:	6831      	ldr	r1, [r6, #0]
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	b911      	cbnz	r1, 8008eda <sbrk_aligned+0x12>
 8008ed4:	f000 f984 	bl	80091e0 <_sbrk_r>
 8008ed8:	6030      	str	r0, [r6, #0]
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f000 f97f 	bl	80091e0 <_sbrk_r>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	d00a      	beq.n	8008efc <sbrk_aligned+0x34>
 8008ee6:	1cc4      	adds	r4, r0, #3
 8008ee8:	f024 0403 	bic.w	r4, r4, #3
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d007      	beq.n	8008f00 <sbrk_aligned+0x38>
 8008ef0:	1a21      	subs	r1, r4, r0
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f974 	bl	80091e0 <_sbrk_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d101      	bne.n	8008f00 <sbrk_aligned+0x38>
 8008efc:	f04f 34ff 	mov.w	r4, #4294967295
 8008f00:	4620      	mov	r0, r4
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	20005370 	.word	0x20005370

08008f08 <_malloc_r>:
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	1ccd      	adds	r5, r1, #3
 8008f0e:	f025 0503 	bic.w	r5, r5, #3
 8008f12:	3508      	adds	r5, #8
 8008f14:	2d0c      	cmp	r5, #12
 8008f16:	bf38      	it	cc
 8008f18:	250c      	movcc	r5, #12
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	db01      	blt.n	8008f24 <_malloc_r+0x1c>
 8008f20:	42a9      	cmp	r1, r5
 8008f22:	d905      	bls.n	8008f30 <_malloc_r+0x28>
 8008f24:	230c      	movs	r3, #12
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	2600      	movs	r6, #0
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f30:	4e2e      	ldr	r6, [pc, #184]	; (8008fec <_malloc_r+0xe4>)
 8008f32:	f000 fbe5 	bl	8009700 <__malloc_lock>
 8008f36:	6833      	ldr	r3, [r6, #0]
 8008f38:	461c      	mov	r4, r3
 8008f3a:	bb34      	cbnz	r4, 8008f8a <_malloc_r+0x82>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f7ff ffc2 	bl	8008ec8 <sbrk_aligned>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	4604      	mov	r4, r0
 8008f48:	d14d      	bne.n	8008fe6 <_malloc_r+0xde>
 8008f4a:	6834      	ldr	r4, [r6, #0]
 8008f4c:	4626      	mov	r6, r4
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	d140      	bne.n	8008fd4 <_malloc_r+0xcc>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	4631      	mov	r1, r6
 8008f56:	4638      	mov	r0, r7
 8008f58:	eb04 0803 	add.w	r8, r4, r3
 8008f5c:	f000 f940 	bl	80091e0 <_sbrk_r>
 8008f60:	4580      	cmp	r8, r0
 8008f62:	d13a      	bne.n	8008fda <_malloc_r+0xd2>
 8008f64:	6821      	ldr	r1, [r4, #0]
 8008f66:	3503      	adds	r5, #3
 8008f68:	1a6d      	subs	r5, r5, r1
 8008f6a:	f025 0503 	bic.w	r5, r5, #3
 8008f6e:	3508      	adds	r5, #8
 8008f70:	2d0c      	cmp	r5, #12
 8008f72:	bf38      	it	cc
 8008f74:	250c      	movcc	r5, #12
 8008f76:	4629      	mov	r1, r5
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff ffa5 	bl	8008ec8 <sbrk_aligned>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d02b      	beq.n	8008fda <_malloc_r+0xd2>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	442b      	add	r3, r5
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	e00e      	b.n	8008fa8 <_malloc_r+0xa0>
 8008f8a:	6822      	ldr	r2, [r4, #0]
 8008f8c:	1b52      	subs	r2, r2, r5
 8008f8e:	d41e      	bmi.n	8008fce <_malloc_r+0xc6>
 8008f90:	2a0b      	cmp	r2, #11
 8008f92:	d916      	bls.n	8008fc2 <_malloc_r+0xba>
 8008f94:	1961      	adds	r1, r4, r5
 8008f96:	42a3      	cmp	r3, r4
 8008f98:	6025      	str	r5, [r4, #0]
 8008f9a:	bf18      	it	ne
 8008f9c:	6059      	strne	r1, [r3, #4]
 8008f9e:	6863      	ldr	r3, [r4, #4]
 8008fa0:	bf08      	it	eq
 8008fa2:	6031      	streq	r1, [r6, #0]
 8008fa4:	5162      	str	r2, [r4, r5]
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f104 060b 	add.w	r6, r4, #11
 8008fae:	f000 fbad 	bl	800970c <__malloc_unlock>
 8008fb2:	f026 0607 	bic.w	r6, r6, #7
 8008fb6:	1d23      	adds	r3, r4, #4
 8008fb8:	1af2      	subs	r2, r6, r3
 8008fba:	d0b6      	beq.n	8008f2a <_malloc_r+0x22>
 8008fbc:	1b9b      	subs	r3, r3, r6
 8008fbe:	50a3      	str	r3, [r4, r2]
 8008fc0:	e7b3      	b.n	8008f2a <_malloc_r+0x22>
 8008fc2:	6862      	ldr	r2, [r4, #4]
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	bf0c      	ite	eq
 8008fc8:	6032      	streq	r2, [r6, #0]
 8008fca:	605a      	strne	r2, [r3, #4]
 8008fcc:	e7ec      	b.n	8008fa8 <_malloc_r+0xa0>
 8008fce:	4623      	mov	r3, r4
 8008fd0:	6864      	ldr	r4, [r4, #4]
 8008fd2:	e7b2      	b.n	8008f3a <_malloc_r+0x32>
 8008fd4:	4634      	mov	r4, r6
 8008fd6:	6876      	ldr	r6, [r6, #4]
 8008fd8:	e7b9      	b.n	8008f4e <_malloc_r+0x46>
 8008fda:	230c      	movs	r3, #12
 8008fdc:	603b      	str	r3, [r7, #0]
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f000 fb94 	bl	800970c <__malloc_unlock>
 8008fe4:	e7a1      	b.n	8008f2a <_malloc_r+0x22>
 8008fe6:	6025      	str	r5, [r4, #0]
 8008fe8:	e7de      	b.n	8008fa8 <_malloc_r+0xa0>
 8008fea:	bf00      	nop
 8008fec:	2000536c 	.word	0x2000536c

08008ff0 <iprintf>:
 8008ff0:	b40f      	push	{r0, r1, r2, r3}
 8008ff2:	4b0a      	ldr	r3, [pc, #40]	; (800901c <iprintf+0x2c>)
 8008ff4:	b513      	push	{r0, r1, r4, lr}
 8008ff6:	681c      	ldr	r4, [r3, #0]
 8008ff8:	b124      	cbz	r4, 8009004 <iprintf+0x14>
 8008ffa:	69a3      	ldr	r3, [r4, #24]
 8008ffc:	b913      	cbnz	r3, 8009004 <iprintf+0x14>
 8008ffe:	4620      	mov	r0, r4
 8009000:	f7ff fe86 	bl	8008d10 <__sinit>
 8009004:	ab05      	add	r3, sp, #20
 8009006:	9a04      	ldr	r2, [sp, #16]
 8009008:	68a1      	ldr	r1, [r4, #8]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	4620      	mov	r0, r4
 800900e:	f000 fd55 	bl	8009abc <_vfiprintf_r>
 8009012:	b002      	add	sp, #8
 8009014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009018:	b004      	add	sp, #16
 800901a:	4770      	bx	lr
 800901c:	20000010 	.word	0x20000010

08009020 <_puts_r>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	460e      	mov	r6, r1
 8009024:	4605      	mov	r5, r0
 8009026:	b118      	cbz	r0, 8009030 <_puts_r+0x10>
 8009028:	6983      	ldr	r3, [r0, #24]
 800902a:	b90b      	cbnz	r3, 8009030 <_puts_r+0x10>
 800902c:	f7ff fe70 	bl	8008d10 <__sinit>
 8009030:	69ab      	ldr	r3, [r5, #24]
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	b913      	cbnz	r3, 800903c <_puts_r+0x1c>
 8009036:	4628      	mov	r0, r5
 8009038:	f7ff fe6a 	bl	8008d10 <__sinit>
 800903c:	4b2c      	ldr	r3, [pc, #176]	; (80090f0 <_puts_r+0xd0>)
 800903e:	429c      	cmp	r4, r3
 8009040:	d120      	bne.n	8009084 <_puts_r+0x64>
 8009042:	686c      	ldr	r4, [r5, #4]
 8009044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009046:	07db      	lsls	r3, r3, #31
 8009048:	d405      	bmi.n	8009056 <_puts_r+0x36>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	0598      	lsls	r0, r3, #22
 800904e:	d402      	bmi.n	8009056 <_puts_r+0x36>
 8009050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009052:	f7ff ff20 	bl	8008e96 <__retarget_lock_acquire_recursive>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	0719      	lsls	r1, r3, #28
 800905a:	d51d      	bpl.n	8009098 <_puts_r+0x78>
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	b1db      	cbz	r3, 8009098 <_puts_r+0x78>
 8009060:	3e01      	subs	r6, #1
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009068:	3b01      	subs	r3, #1
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	bb39      	cbnz	r1, 80090be <_puts_r+0x9e>
 800906e:	2b00      	cmp	r3, #0
 8009070:	da38      	bge.n	80090e4 <_puts_r+0xc4>
 8009072:	4622      	mov	r2, r4
 8009074:	210a      	movs	r1, #10
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f926 	bl	80092c8 <__swbuf_r>
 800907c:	3001      	adds	r0, #1
 800907e:	d011      	beq.n	80090a4 <_puts_r+0x84>
 8009080:	250a      	movs	r5, #10
 8009082:	e011      	b.n	80090a8 <_puts_r+0x88>
 8009084:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <_puts_r+0xd4>)
 8009086:	429c      	cmp	r4, r3
 8009088:	d101      	bne.n	800908e <_puts_r+0x6e>
 800908a:	68ac      	ldr	r4, [r5, #8]
 800908c:	e7da      	b.n	8009044 <_puts_r+0x24>
 800908e:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <_puts_r+0xd8>)
 8009090:	429c      	cmp	r4, r3
 8009092:	bf08      	it	eq
 8009094:	68ec      	ldreq	r4, [r5, #12]
 8009096:	e7d5      	b.n	8009044 <_puts_r+0x24>
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f000 f978 	bl	8009390 <__swsetup_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0dd      	beq.n	8009060 <_puts_r+0x40>
 80090a4:	f04f 35ff 	mov.w	r5, #4294967295
 80090a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d405      	bmi.n	80090ba <_puts_r+0x9a>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	059b      	lsls	r3, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_puts_r+0x9a>
 80090b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b6:	f7ff feef 	bl	8008e98 <__retarget_lock_release_recursive>
 80090ba:	4628      	mov	r0, r5
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da04      	bge.n	80090cc <_puts_r+0xac>
 80090c2:	69a2      	ldr	r2, [r4, #24]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	dc06      	bgt.n	80090d6 <_puts_r+0xb6>
 80090c8:	290a      	cmp	r1, #10
 80090ca:	d004      	beq.n	80090d6 <_puts_r+0xb6>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	6022      	str	r2, [r4, #0]
 80090d2:	7019      	strb	r1, [r3, #0]
 80090d4:	e7c5      	b.n	8009062 <_puts_r+0x42>
 80090d6:	4622      	mov	r2, r4
 80090d8:	4628      	mov	r0, r5
 80090da:	f000 f8f5 	bl	80092c8 <__swbuf_r>
 80090de:	3001      	adds	r0, #1
 80090e0:	d1bf      	bne.n	8009062 <_puts_r+0x42>
 80090e2:	e7df      	b.n	80090a4 <_puts_r+0x84>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	250a      	movs	r5, #10
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	701d      	strb	r5, [r3, #0]
 80090ee:	e7db      	b.n	80090a8 <_puts_r+0x88>
 80090f0:	0800a20c 	.word	0x0800a20c
 80090f4:	0800a22c 	.word	0x0800a22c
 80090f8:	0800a1ec 	.word	0x0800a1ec

080090fc <puts>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <puts+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f7ff bf8d 	b.w	8009020 <_puts_r>
 8009106:	bf00      	nop
 8009108:	20000010 	.word	0x20000010

0800910c <cleanup_glue>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	460c      	mov	r4, r1
 8009110:	6809      	ldr	r1, [r1, #0]
 8009112:	4605      	mov	r5, r0
 8009114:	b109      	cbz	r1, 800911a <cleanup_glue+0xe>
 8009116:	f7ff fff9 	bl	800910c <cleanup_glue>
 800911a:	4621      	mov	r1, r4
 800911c:	4628      	mov	r0, r5
 800911e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009122:	f000 baf9 	b.w	8009718 <_free_r>
	...

08009128 <_reclaim_reent>:
 8009128:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <_reclaim_reent+0xb4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4283      	cmp	r3, r0
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	4604      	mov	r4, r0
 8009132:	d051      	beq.n	80091d8 <_reclaim_reent+0xb0>
 8009134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009136:	b143      	cbz	r3, 800914a <_reclaim_reent+0x22>
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d14a      	bne.n	80091d4 <_reclaim_reent+0xac>
 800913e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009140:	6819      	ldr	r1, [r3, #0]
 8009142:	b111      	cbz	r1, 800914a <_reclaim_reent+0x22>
 8009144:	4620      	mov	r0, r4
 8009146:	f000 fae7 	bl	8009718 <_free_r>
 800914a:	6961      	ldr	r1, [r4, #20]
 800914c:	b111      	cbz	r1, 8009154 <_reclaim_reent+0x2c>
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fae2 	bl	8009718 <_free_r>
 8009154:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009156:	b111      	cbz	r1, 800915e <_reclaim_reent+0x36>
 8009158:	4620      	mov	r0, r4
 800915a:	f000 fadd 	bl	8009718 <_free_r>
 800915e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009160:	b111      	cbz	r1, 8009168 <_reclaim_reent+0x40>
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fad8 	bl	8009718 <_free_r>
 8009168:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800916a:	b111      	cbz	r1, 8009172 <_reclaim_reent+0x4a>
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fad3 	bl	8009718 <_free_r>
 8009172:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009174:	b111      	cbz	r1, 800917c <_reclaim_reent+0x54>
 8009176:	4620      	mov	r0, r4
 8009178:	f000 face 	bl	8009718 <_free_r>
 800917c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800917e:	b111      	cbz	r1, 8009186 <_reclaim_reent+0x5e>
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fac9 	bl	8009718 <_free_r>
 8009186:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009188:	b111      	cbz	r1, 8009190 <_reclaim_reent+0x68>
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fac4 	bl	8009718 <_free_r>
 8009190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009192:	b111      	cbz	r1, 800919a <_reclaim_reent+0x72>
 8009194:	4620      	mov	r0, r4
 8009196:	f000 fabf 	bl	8009718 <_free_r>
 800919a:	69a3      	ldr	r3, [r4, #24]
 800919c:	b1e3      	cbz	r3, 80091d8 <_reclaim_reent+0xb0>
 800919e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091a0:	4620      	mov	r0, r4
 80091a2:	4798      	blx	r3
 80091a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80091a6:	b1b9      	cbz	r1, 80091d8 <_reclaim_reent+0xb0>
 80091a8:	4620      	mov	r0, r4
 80091aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091ae:	f7ff bfad 	b.w	800910c <cleanup_glue>
 80091b2:	5949      	ldr	r1, [r1, r5]
 80091b4:	b941      	cbnz	r1, 80091c8 <_reclaim_reent+0xa0>
 80091b6:	3504      	adds	r5, #4
 80091b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ba:	2d80      	cmp	r5, #128	; 0x80
 80091bc:	68d9      	ldr	r1, [r3, #12]
 80091be:	d1f8      	bne.n	80091b2 <_reclaim_reent+0x8a>
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 faa9 	bl	8009718 <_free_r>
 80091c6:	e7ba      	b.n	800913e <_reclaim_reent+0x16>
 80091c8:	680e      	ldr	r6, [r1, #0]
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 faa4 	bl	8009718 <_free_r>
 80091d0:	4631      	mov	r1, r6
 80091d2:	e7ef      	b.n	80091b4 <_reclaim_reent+0x8c>
 80091d4:	2500      	movs	r5, #0
 80091d6:	e7ef      	b.n	80091b8 <_reclaim_reent+0x90>
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	bf00      	nop
 80091dc:	20000010 	.word	0x20000010

080091e0 <_sbrk_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d06      	ldr	r5, [pc, #24]	; (80091fc <_sbrk_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	f7f7 fd36 	bl	8000c5c <_sbrk>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_sbrk_r+0x1a>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_sbrk_r+0x1a>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20005374 	.word	0x20005374

08009200 <siprintf>:
 8009200:	b40e      	push	{r1, r2, r3}
 8009202:	b500      	push	{lr}
 8009204:	b09c      	sub	sp, #112	; 0x70
 8009206:	ab1d      	add	r3, sp, #116	; 0x74
 8009208:	9002      	str	r0, [sp, #8]
 800920a:	9006      	str	r0, [sp, #24]
 800920c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009210:	4809      	ldr	r0, [pc, #36]	; (8009238 <siprintf+0x38>)
 8009212:	9107      	str	r1, [sp, #28]
 8009214:	9104      	str	r1, [sp, #16]
 8009216:	4909      	ldr	r1, [pc, #36]	; (800923c <siprintf+0x3c>)
 8009218:	f853 2b04 	ldr.w	r2, [r3], #4
 800921c:	9105      	str	r1, [sp, #20]
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	a902      	add	r1, sp, #8
 8009224:	f000 fb20 	bl	8009868 <_svfiprintf_r>
 8009228:	9b02      	ldr	r3, [sp, #8]
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	b01c      	add	sp, #112	; 0x70
 8009230:	f85d eb04 	ldr.w	lr, [sp], #4
 8009234:	b003      	add	sp, #12
 8009236:	4770      	bx	lr
 8009238:	20000010 	.word	0x20000010
 800923c:	ffff0208 	.word	0xffff0208

08009240 <__sread>:
 8009240:	b510      	push	{r4, lr}
 8009242:	460c      	mov	r4, r1
 8009244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009248:	f000 fefc 	bl	800a044 <_read_r>
 800924c:	2800      	cmp	r0, #0
 800924e:	bfab      	itete	ge
 8009250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009252:	89a3      	ldrhlt	r3, [r4, #12]
 8009254:	181b      	addge	r3, r3, r0
 8009256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800925a:	bfac      	ite	ge
 800925c:	6563      	strge	r3, [r4, #84]	; 0x54
 800925e:	81a3      	strhlt	r3, [r4, #12]
 8009260:	bd10      	pop	{r4, pc}

08009262 <__swrite>:
 8009262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009266:	461f      	mov	r7, r3
 8009268:	898b      	ldrh	r3, [r1, #12]
 800926a:	05db      	lsls	r3, r3, #23
 800926c:	4605      	mov	r5, r0
 800926e:	460c      	mov	r4, r1
 8009270:	4616      	mov	r6, r2
 8009272:	d505      	bpl.n	8009280 <__swrite+0x1e>
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	2302      	movs	r3, #2
 800927a:	2200      	movs	r2, #0
 800927c:	f000 f9c8 	bl	8009610 <_lseek_r>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	4632      	mov	r2, r6
 800928e:	463b      	mov	r3, r7
 8009290:	4628      	mov	r0, r5
 8009292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	f000 b869 	b.w	800936c <_write_r>

0800929a <__sseek>:
 800929a:	b510      	push	{r4, lr}
 800929c:	460c      	mov	r4, r1
 800929e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a2:	f000 f9b5 	bl	8009610 <_lseek_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	bf15      	itete	ne
 80092ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80092ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092b6:	81a3      	strheq	r3, [r4, #12]
 80092b8:	bf18      	it	ne
 80092ba:	81a3      	strhne	r3, [r4, #12]
 80092bc:	bd10      	pop	{r4, pc}

080092be <__sclose>:
 80092be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c2:	f000 b8d3 	b.w	800946c <_close_r>
	...

080092c8 <__swbuf_r>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	460e      	mov	r6, r1
 80092cc:	4614      	mov	r4, r2
 80092ce:	4605      	mov	r5, r0
 80092d0:	b118      	cbz	r0, 80092da <__swbuf_r+0x12>
 80092d2:	6983      	ldr	r3, [r0, #24]
 80092d4:	b90b      	cbnz	r3, 80092da <__swbuf_r+0x12>
 80092d6:	f7ff fd1b 	bl	8008d10 <__sinit>
 80092da:	4b21      	ldr	r3, [pc, #132]	; (8009360 <__swbuf_r+0x98>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	d12b      	bne.n	8009338 <__swbuf_r+0x70>
 80092e0:	686c      	ldr	r4, [r5, #4]
 80092e2:	69a3      	ldr	r3, [r4, #24]
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	071a      	lsls	r2, r3, #28
 80092ea:	d52f      	bpl.n	800934c <__swbuf_r+0x84>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	b36b      	cbz	r3, 800934c <__swbuf_r+0x84>
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	1ac0      	subs	r0, r0, r3
 80092f6:	6963      	ldr	r3, [r4, #20]
 80092f8:	b2f6      	uxtb	r6, r6
 80092fa:	4283      	cmp	r3, r0
 80092fc:	4637      	mov	r7, r6
 80092fe:	dc04      	bgt.n	800930a <__swbuf_r+0x42>
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 f948 	bl	8009598 <_fflush_r>
 8009308:	bb30      	cbnz	r0, 8009358 <__swbuf_r+0x90>
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	3b01      	subs	r3, #1
 800930e:	60a3      	str	r3, [r4, #8]
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	701e      	strb	r6, [r3, #0]
 8009318:	6963      	ldr	r3, [r4, #20]
 800931a:	3001      	adds	r0, #1
 800931c:	4283      	cmp	r3, r0
 800931e:	d004      	beq.n	800932a <__swbuf_r+0x62>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	07db      	lsls	r3, r3, #31
 8009324:	d506      	bpl.n	8009334 <__swbuf_r+0x6c>
 8009326:	2e0a      	cmp	r6, #10
 8009328:	d104      	bne.n	8009334 <__swbuf_r+0x6c>
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f933 	bl	8009598 <_fflush_r>
 8009332:	b988      	cbnz	r0, 8009358 <__swbuf_r+0x90>
 8009334:	4638      	mov	r0, r7
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <__swbuf_r+0x9c>)
 800933a:	429c      	cmp	r4, r3
 800933c:	d101      	bne.n	8009342 <__swbuf_r+0x7a>
 800933e:	68ac      	ldr	r4, [r5, #8]
 8009340:	e7cf      	b.n	80092e2 <__swbuf_r+0x1a>
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <__swbuf_r+0xa0>)
 8009344:	429c      	cmp	r4, r3
 8009346:	bf08      	it	eq
 8009348:	68ec      	ldreq	r4, [r5, #12]
 800934a:	e7ca      	b.n	80092e2 <__swbuf_r+0x1a>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f81e 	bl	8009390 <__swsetup_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0cb      	beq.n	80092f0 <__swbuf_r+0x28>
 8009358:	f04f 37ff 	mov.w	r7, #4294967295
 800935c:	e7ea      	b.n	8009334 <__swbuf_r+0x6c>
 800935e:	bf00      	nop
 8009360:	0800a20c 	.word	0x0800a20c
 8009364:	0800a22c 	.word	0x0800a22c
 8009368:	0800a1ec 	.word	0x0800a1ec

0800936c <_write_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4d07      	ldr	r5, [pc, #28]	; (800938c <_write_r+0x20>)
 8009370:	4604      	mov	r4, r0
 8009372:	4608      	mov	r0, r1
 8009374:	4611      	mov	r1, r2
 8009376:	2200      	movs	r2, #0
 8009378:	602a      	str	r2, [r5, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	f7f7 f929 	bl	80005d2 <_write>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_write_r+0x1e>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_write_r+0x1e>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	20005374 	.word	0x20005374

08009390 <__swsetup_r>:
 8009390:	4b32      	ldr	r3, [pc, #200]	; (800945c <__swsetup_r+0xcc>)
 8009392:	b570      	push	{r4, r5, r6, lr}
 8009394:	681d      	ldr	r5, [r3, #0]
 8009396:	4606      	mov	r6, r0
 8009398:	460c      	mov	r4, r1
 800939a:	b125      	cbz	r5, 80093a6 <__swsetup_r+0x16>
 800939c:	69ab      	ldr	r3, [r5, #24]
 800939e:	b913      	cbnz	r3, 80093a6 <__swsetup_r+0x16>
 80093a0:	4628      	mov	r0, r5
 80093a2:	f7ff fcb5 	bl	8008d10 <__sinit>
 80093a6:	4b2e      	ldr	r3, [pc, #184]	; (8009460 <__swsetup_r+0xd0>)
 80093a8:	429c      	cmp	r4, r3
 80093aa:	d10f      	bne.n	80093cc <__swsetup_r+0x3c>
 80093ac:	686c      	ldr	r4, [r5, #4]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093b4:	0719      	lsls	r1, r3, #28
 80093b6:	d42c      	bmi.n	8009412 <__swsetup_r+0x82>
 80093b8:	06dd      	lsls	r5, r3, #27
 80093ba:	d411      	bmi.n	80093e0 <__swsetup_r+0x50>
 80093bc:	2309      	movs	r3, #9
 80093be:	6033      	str	r3, [r6, #0]
 80093c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ca:	e03e      	b.n	800944a <__swsetup_r+0xba>
 80093cc:	4b25      	ldr	r3, [pc, #148]	; (8009464 <__swsetup_r+0xd4>)
 80093ce:	429c      	cmp	r4, r3
 80093d0:	d101      	bne.n	80093d6 <__swsetup_r+0x46>
 80093d2:	68ac      	ldr	r4, [r5, #8]
 80093d4:	e7eb      	b.n	80093ae <__swsetup_r+0x1e>
 80093d6:	4b24      	ldr	r3, [pc, #144]	; (8009468 <__swsetup_r+0xd8>)
 80093d8:	429c      	cmp	r4, r3
 80093da:	bf08      	it	eq
 80093dc:	68ec      	ldreq	r4, [r5, #12]
 80093de:	e7e6      	b.n	80093ae <__swsetup_r+0x1e>
 80093e0:	0758      	lsls	r0, r3, #29
 80093e2:	d512      	bpl.n	800940a <__swsetup_r+0x7a>
 80093e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093e6:	b141      	cbz	r1, 80093fa <__swsetup_r+0x6a>
 80093e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ec:	4299      	cmp	r1, r3
 80093ee:	d002      	beq.n	80093f6 <__swsetup_r+0x66>
 80093f0:	4630      	mov	r0, r6
 80093f2:	f000 f991 	bl	8009718 <_free_r>
 80093f6:	2300      	movs	r3, #0
 80093f8:	6363      	str	r3, [r4, #52]	; 0x34
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	2300      	movs	r3, #0
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f043 0308 	orr.w	r3, r3, #8
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	b94b      	cbnz	r3, 800942a <__swsetup_r+0x9a>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800941c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009420:	d003      	beq.n	800942a <__swsetup_r+0x9a>
 8009422:	4621      	mov	r1, r4
 8009424:	4630      	mov	r0, r6
 8009426:	f000 f92b 	bl	8009680 <__smakebuf_r>
 800942a:	89a0      	ldrh	r0, [r4, #12]
 800942c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009430:	f010 0301 	ands.w	r3, r0, #1
 8009434:	d00a      	beq.n	800944c <__swsetup_r+0xbc>
 8009436:	2300      	movs	r3, #0
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	6963      	ldr	r3, [r4, #20]
 800943c:	425b      	negs	r3, r3
 800943e:	61a3      	str	r3, [r4, #24]
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	b943      	cbnz	r3, 8009456 <__swsetup_r+0xc6>
 8009444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009448:	d1ba      	bne.n	80093c0 <__swsetup_r+0x30>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	0781      	lsls	r1, r0, #30
 800944e:	bf58      	it	pl
 8009450:	6963      	ldrpl	r3, [r4, #20]
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	e7f4      	b.n	8009440 <__swsetup_r+0xb0>
 8009456:	2000      	movs	r0, #0
 8009458:	e7f7      	b.n	800944a <__swsetup_r+0xba>
 800945a:	bf00      	nop
 800945c:	20000010 	.word	0x20000010
 8009460:	0800a20c 	.word	0x0800a20c
 8009464:	0800a22c 	.word	0x0800a22c
 8009468:	0800a1ec 	.word	0x0800a1ec

0800946c <_close_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d06      	ldr	r5, [pc, #24]	; (8009488 <_close_r+0x1c>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	602b      	str	r3, [r5, #0]
 8009478:	f7f7 fbbb 	bl	8000bf2 <_close>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_close_r+0x1a>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_close_r+0x1a>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20005374 	.word	0x20005374

0800948c <__sflush_r>:
 800948c:	898a      	ldrh	r2, [r1, #12]
 800948e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009492:	4605      	mov	r5, r0
 8009494:	0710      	lsls	r0, r2, #28
 8009496:	460c      	mov	r4, r1
 8009498:	d458      	bmi.n	800954c <__sflush_r+0xc0>
 800949a:	684b      	ldr	r3, [r1, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	dc05      	bgt.n	80094ac <__sflush_r+0x20>
 80094a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dc02      	bgt.n	80094ac <__sflush_r+0x20>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ae:	2e00      	cmp	r6, #0
 80094b0:	d0f9      	beq.n	80094a6 <__sflush_r+0x1a>
 80094b2:	2300      	movs	r3, #0
 80094b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094b8:	682f      	ldr	r7, [r5, #0]
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	d032      	beq.n	8009524 <__sflush_r+0x98>
 80094be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	075a      	lsls	r2, r3, #29
 80094c4:	d505      	bpl.n	80094d2 <__sflush_r+0x46>
 80094c6:	6863      	ldr	r3, [r4, #4]
 80094c8:	1ac0      	subs	r0, r0, r3
 80094ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094cc:	b10b      	cbz	r3, 80094d2 <__sflush_r+0x46>
 80094ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094d0:	1ac0      	subs	r0, r0, r3
 80094d2:	2300      	movs	r3, #0
 80094d4:	4602      	mov	r2, r0
 80094d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094d8:	6a21      	ldr	r1, [r4, #32]
 80094da:	4628      	mov	r0, r5
 80094dc:	47b0      	blx	r6
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	d106      	bne.n	80094f2 <__sflush_r+0x66>
 80094e4:	6829      	ldr	r1, [r5, #0]
 80094e6:	291d      	cmp	r1, #29
 80094e8:	d82c      	bhi.n	8009544 <__sflush_r+0xb8>
 80094ea:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <__sflush_r+0x108>)
 80094ec:	40ca      	lsrs	r2, r1
 80094ee:	07d6      	lsls	r6, r2, #31
 80094f0:	d528      	bpl.n	8009544 <__sflush_r+0xb8>
 80094f2:	2200      	movs	r2, #0
 80094f4:	6062      	str	r2, [r4, #4]
 80094f6:	04d9      	lsls	r1, r3, #19
 80094f8:	6922      	ldr	r2, [r4, #16]
 80094fa:	6022      	str	r2, [r4, #0]
 80094fc:	d504      	bpl.n	8009508 <__sflush_r+0x7c>
 80094fe:	1c42      	adds	r2, r0, #1
 8009500:	d101      	bne.n	8009506 <__sflush_r+0x7a>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b903      	cbnz	r3, 8009508 <__sflush_r+0x7c>
 8009506:	6560      	str	r0, [r4, #84]	; 0x54
 8009508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800950a:	602f      	str	r7, [r5, #0]
 800950c:	2900      	cmp	r1, #0
 800950e:	d0ca      	beq.n	80094a6 <__sflush_r+0x1a>
 8009510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009514:	4299      	cmp	r1, r3
 8009516:	d002      	beq.n	800951e <__sflush_r+0x92>
 8009518:	4628      	mov	r0, r5
 800951a:	f000 f8fd 	bl	8009718 <_free_r>
 800951e:	2000      	movs	r0, #0
 8009520:	6360      	str	r0, [r4, #52]	; 0x34
 8009522:	e7c1      	b.n	80094a8 <__sflush_r+0x1c>
 8009524:	6a21      	ldr	r1, [r4, #32]
 8009526:	2301      	movs	r3, #1
 8009528:	4628      	mov	r0, r5
 800952a:	47b0      	blx	r6
 800952c:	1c41      	adds	r1, r0, #1
 800952e:	d1c7      	bne.n	80094c0 <__sflush_r+0x34>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0c4      	beq.n	80094c0 <__sflush_r+0x34>
 8009536:	2b1d      	cmp	r3, #29
 8009538:	d001      	beq.n	800953e <__sflush_r+0xb2>
 800953a:	2b16      	cmp	r3, #22
 800953c:	d101      	bne.n	8009542 <__sflush_r+0xb6>
 800953e:	602f      	str	r7, [r5, #0]
 8009540:	e7b1      	b.n	80094a6 <__sflush_r+0x1a>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	e7ad      	b.n	80094a8 <__sflush_r+0x1c>
 800954c:	690f      	ldr	r7, [r1, #16]
 800954e:	2f00      	cmp	r7, #0
 8009550:	d0a9      	beq.n	80094a6 <__sflush_r+0x1a>
 8009552:	0793      	lsls	r3, r2, #30
 8009554:	680e      	ldr	r6, [r1, #0]
 8009556:	bf08      	it	eq
 8009558:	694b      	ldreq	r3, [r1, #20]
 800955a:	600f      	str	r7, [r1, #0]
 800955c:	bf18      	it	ne
 800955e:	2300      	movne	r3, #0
 8009560:	eba6 0807 	sub.w	r8, r6, r7
 8009564:	608b      	str	r3, [r1, #8]
 8009566:	f1b8 0f00 	cmp.w	r8, #0
 800956a:	dd9c      	ble.n	80094a6 <__sflush_r+0x1a>
 800956c:	6a21      	ldr	r1, [r4, #32]
 800956e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009570:	4643      	mov	r3, r8
 8009572:	463a      	mov	r2, r7
 8009574:	4628      	mov	r0, r5
 8009576:	47b0      	blx	r6
 8009578:	2800      	cmp	r0, #0
 800957a:	dc06      	bgt.n	800958a <__sflush_r+0xfe>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e78e      	b.n	80094a8 <__sflush_r+0x1c>
 800958a:	4407      	add	r7, r0
 800958c:	eba8 0800 	sub.w	r8, r8, r0
 8009590:	e7e9      	b.n	8009566 <__sflush_r+0xda>
 8009592:	bf00      	nop
 8009594:	20400001 	.word	0x20400001

08009598 <_fflush_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	690b      	ldr	r3, [r1, #16]
 800959c:	4605      	mov	r5, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	b913      	cbnz	r3, 80095a8 <_fflush_r+0x10>
 80095a2:	2500      	movs	r5, #0
 80095a4:	4628      	mov	r0, r5
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	b118      	cbz	r0, 80095b2 <_fflush_r+0x1a>
 80095aa:	6983      	ldr	r3, [r0, #24]
 80095ac:	b90b      	cbnz	r3, 80095b2 <_fflush_r+0x1a>
 80095ae:	f7ff fbaf 	bl	8008d10 <__sinit>
 80095b2:	4b14      	ldr	r3, [pc, #80]	; (8009604 <_fflush_r+0x6c>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	d11b      	bne.n	80095f0 <_fflush_r+0x58>
 80095b8:	686c      	ldr	r4, [r5, #4]
 80095ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0ef      	beq.n	80095a2 <_fflush_r+0xa>
 80095c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095c4:	07d0      	lsls	r0, r2, #31
 80095c6:	d404      	bmi.n	80095d2 <_fflush_r+0x3a>
 80095c8:	0599      	lsls	r1, r3, #22
 80095ca:	d402      	bmi.n	80095d2 <_fflush_r+0x3a>
 80095cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ce:	f7ff fc62 	bl	8008e96 <__retarget_lock_acquire_recursive>
 80095d2:	4628      	mov	r0, r5
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7ff ff59 	bl	800948c <__sflush_r>
 80095da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095dc:	07da      	lsls	r2, r3, #31
 80095de:	4605      	mov	r5, r0
 80095e0:	d4e0      	bmi.n	80095a4 <_fflush_r+0xc>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	059b      	lsls	r3, r3, #22
 80095e6:	d4dd      	bmi.n	80095a4 <_fflush_r+0xc>
 80095e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ea:	f7ff fc55 	bl	8008e98 <__retarget_lock_release_recursive>
 80095ee:	e7d9      	b.n	80095a4 <_fflush_r+0xc>
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <_fflush_r+0x70>)
 80095f2:	429c      	cmp	r4, r3
 80095f4:	d101      	bne.n	80095fa <_fflush_r+0x62>
 80095f6:	68ac      	ldr	r4, [r5, #8]
 80095f8:	e7df      	b.n	80095ba <_fflush_r+0x22>
 80095fa:	4b04      	ldr	r3, [pc, #16]	; (800960c <_fflush_r+0x74>)
 80095fc:	429c      	cmp	r4, r3
 80095fe:	bf08      	it	eq
 8009600:	68ec      	ldreq	r4, [r5, #12]
 8009602:	e7da      	b.n	80095ba <_fflush_r+0x22>
 8009604:	0800a20c 	.word	0x0800a20c
 8009608:	0800a22c 	.word	0x0800a22c
 800960c:	0800a1ec 	.word	0x0800a1ec

08009610 <_lseek_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_lseek_r+0x20>)
 8009614:	4604      	mov	r4, r0
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	2200      	movs	r2, #0
 800961c:	602a      	str	r2, [r5, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	f7f7 fb0e 	bl	8000c40 <_lseek>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_lseek_r+0x1e>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_lseek_r+0x1e>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	20005374 	.word	0x20005374

08009634 <__swhatbuf_r>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	460e      	mov	r6, r1
 8009638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963c:	2900      	cmp	r1, #0
 800963e:	b096      	sub	sp, #88	; 0x58
 8009640:	4614      	mov	r4, r2
 8009642:	461d      	mov	r5, r3
 8009644:	da08      	bge.n	8009658 <__swhatbuf_r+0x24>
 8009646:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	602a      	str	r2, [r5, #0]
 800964e:	061a      	lsls	r2, r3, #24
 8009650:	d410      	bmi.n	8009674 <__swhatbuf_r+0x40>
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	e00e      	b.n	8009676 <__swhatbuf_r+0x42>
 8009658:	466a      	mov	r2, sp
 800965a:	f000 fd05 	bl	800a068 <_fstat_r>
 800965e:	2800      	cmp	r0, #0
 8009660:	dbf1      	blt.n	8009646 <__swhatbuf_r+0x12>
 8009662:	9a01      	ldr	r2, [sp, #4]
 8009664:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009668:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800966c:	425a      	negs	r2, r3
 800966e:	415a      	adcs	r2, r3
 8009670:	602a      	str	r2, [r5, #0]
 8009672:	e7ee      	b.n	8009652 <__swhatbuf_r+0x1e>
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	2000      	movs	r0, #0
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	b016      	add	sp, #88	; 0x58
 800967c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009680 <__smakebuf_r>:
 8009680:	898b      	ldrh	r3, [r1, #12]
 8009682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009684:	079d      	lsls	r5, r3, #30
 8009686:	4606      	mov	r6, r0
 8009688:	460c      	mov	r4, r1
 800968a:	d507      	bpl.n	800969c <__smakebuf_r+0x1c>
 800968c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	2301      	movs	r3, #1
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	b002      	add	sp, #8
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	ab01      	add	r3, sp, #4
 800969e:	466a      	mov	r2, sp
 80096a0:	f7ff ffc8 	bl	8009634 <__swhatbuf_r>
 80096a4:	9900      	ldr	r1, [sp, #0]
 80096a6:	4605      	mov	r5, r0
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff fc2d 	bl	8008f08 <_malloc_r>
 80096ae:	b948      	cbnz	r0, 80096c4 <__smakebuf_r+0x44>
 80096b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b4:	059a      	lsls	r2, r3, #22
 80096b6:	d4ef      	bmi.n	8009698 <__smakebuf_r+0x18>
 80096b8:	f023 0303 	bic.w	r3, r3, #3
 80096bc:	f043 0302 	orr.w	r3, r3, #2
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	e7e3      	b.n	800968c <__smakebuf_r+0xc>
 80096c4:	4b0d      	ldr	r3, [pc, #52]	; (80096fc <__smakebuf_r+0x7c>)
 80096c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	9b00      	ldr	r3, [sp, #0]
 80096d4:	6163      	str	r3, [r4, #20]
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	6120      	str	r0, [r4, #16]
 80096da:	b15b      	cbz	r3, 80096f4 <__smakebuf_r+0x74>
 80096dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 fcd3 	bl	800a08c <_isatty_r>
 80096e6:	b128      	cbz	r0, 80096f4 <__smakebuf_r+0x74>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	89a0      	ldrh	r0, [r4, #12]
 80096f6:	4305      	orrs	r5, r0
 80096f8:	81a5      	strh	r5, [r4, #12]
 80096fa:	e7cd      	b.n	8009698 <__smakebuf_r+0x18>
 80096fc:	08008ca9 	.word	0x08008ca9

08009700 <__malloc_lock>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__malloc_lock+0x8>)
 8009702:	f7ff bbc8 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8009706:	bf00      	nop
 8009708:	20005368 	.word	0x20005368

0800970c <__malloc_unlock>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__malloc_unlock+0x8>)
 800970e:	f7ff bbc3 	b.w	8008e98 <__retarget_lock_release_recursive>
 8009712:	bf00      	nop
 8009714:	20005368 	.word	0x20005368

08009718 <_free_r>:
 8009718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800971a:	2900      	cmp	r1, #0
 800971c:	d044      	beq.n	80097a8 <_free_r+0x90>
 800971e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009722:	9001      	str	r0, [sp, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	f1a1 0404 	sub.w	r4, r1, #4
 800972a:	bfb8      	it	lt
 800972c:	18e4      	addlt	r4, r4, r3
 800972e:	f7ff ffe7 	bl	8009700 <__malloc_lock>
 8009732:	4a1e      	ldr	r2, [pc, #120]	; (80097ac <_free_r+0x94>)
 8009734:	9801      	ldr	r0, [sp, #4]
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	b933      	cbnz	r3, 8009748 <_free_r+0x30>
 800973a:	6063      	str	r3, [r4, #4]
 800973c:	6014      	str	r4, [r2, #0]
 800973e:	b003      	add	sp, #12
 8009740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009744:	f7ff bfe2 	b.w	800970c <__malloc_unlock>
 8009748:	42a3      	cmp	r3, r4
 800974a:	d908      	bls.n	800975e <_free_r+0x46>
 800974c:	6825      	ldr	r5, [r4, #0]
 800974e:	1961      	adds	r1, r4, r5
 8009750:	428b      	cmp	r3, r1
 8009752:	bf01      	itttt	eq
 8009754:	6819      	ldreq	r1, [r3, #0]
 8009756:	685b      	ldreq	r3, [r3, #4]
 8009758:	1949      	addeq	r1, r1, r5
 800975a:	6021      	streq	r1, [r4, #0]
 800975c:	e7ed      	b.n	800973a <_free_r+0x22>
 800975e:	461a      	mov	r2, r3
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	b10b      	cbz	r3, 8009768 <_free_r+0x50>
 8009764:	42a3      	cmp	r3, r4
 8009766:	d9fa      	bls.n	800975e <_free_r+0x46>
 8009768:	6811      	ldr	r1, [r2, #0]
 800976a:	1855      	adds	r5, r2, r1
 800976c:	42a5      	cmp	r5, r4
 800976e:	d10b      	bne.n	8009788 <_free_r+0x70>
 8009770:	6824      	ldr	r4, [r4, #0]
 8009772:	4421      	add	r1, r4
 8009774:	1854      	adds	r4, r2, r1
 8009776:	42a3      	cmp	r3, r4
 8009778:	6011      	str	r1, [r2, #0]
 800977a:	d1e0      	bne.n	800973e <_free_r+0x26>
 800977c:	681c      	ldr	r4, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	6053      	str	r3, [r2, #4]
 8009782:	4421      	add	r1, r4
 8009784:	6011      	str	r1, [r2, #0]
 8009786:	e7da      	b.n	800973e <_free_r+0x26>
 8009788:	d902      	bls.n	8009790 <_free_r+0x78>
 800978a:	230c      	movs	r3, #12
 800978c:	6003      	str	r3, [r0, #0]
 800978e:	e7d6      	b.n	800973e <_free_r+0x26>
 8009790:	6825      	ldr	r5, [r4, #0]
 8009792:	1961      	adds	r1, r4, r5
 8009794:	428b      	cmp	r3, r1
 8009796:	bf04      	itt	eq
 8009798:	6819      	ldreq	r1, [r3, #0]
 800979a:	685b      	ldreq	r3, [r3, #4]
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	bf04      	itt	eq
 80097a0:	1949      	addeq	r1, r1, r5
 80097a2:	6021      	streq	r1, [r4, #0]
 80097a4:	6054      	str	r4, [r2, #4]
 80097a6:	e7ca      	b.n	800973e <_free_r+0x26>
 80097a8:	b003      	add	sp, #12
 80097aa:	bd30      	pop	{r4, r5, pc}
 80097ac:	2000536c 	.word	0x2000536c

080097b0 <__ssputs_r>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	688e      	ldr	r6, [r1, #8]
 80097b6:	429e      	cmp	r6, r3
 80097b8:	4682      	mov	sl, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	4690      	mov	r8, r2
 80097be:	461f      	mov	r7, r3
 80097c0:	d838      	bhi.n	8009834 <__ssputs_r+0x84>
 80097c2:	898a      	ldrh	r2, [r1, #12]
 80097c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097c8:	d032      	beq.n	8009830 <__ssputs_r+0x80>
 80097ca:	6825      	ldr	r5, [r4, #0]
 80097cc:	6909      	ldr	r1, [r1, #16]
 80097ce:	eba5 0901 	sub.w	r9, r5, r1
 80097d2:	6965      	ldr	r5, [r4, #20]
 80097d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097dc:	3301      	adds	r3, #1
 80097de:	444b      	add	r3, r9
 80097e0:	106d      	asrs	r5, r5, #1
 80097e2:	429d      	cmp	r5, r3
 80097e4:	bf38      	it	cc
 80097e6:	461d      	movcc	r5, r3
 80097e8:	0553      	lsls	r3, r2, #21
 80097ea:	d531      	bpl.n	8009850 <__ssputs_r+0xa0>
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7ff fb8b 	bl	8008f08 <_malloc_r>
 80097f2:	4606      	mov	r6, r0
 80097f4:	b950      	cbnz	r0, 800980c <__ssputs_r+0x5c>
 80097f6:	230c      	movs	r3, #12
 80097f8:	f8ca 3000 	str.w	r3, [sl]
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980c:	6921      	ldr	r1, [r4, #16]
 800980e:	464a      	mov	r2, r9
 8009810:	f7ff fb43 	bl	8008e9a <memcpy>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800981a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	6126      	str	r6, [r4, #16]
 8009822:	6165      	str	r5, [r4, #20]
 8009824:	444e      	add	r6, r9
 8009826:	eba5 0509 	sub.w	r5, r5, r9
 800982a:	6026      	str	r6, [r4, #0]
 800982c:	60a5      	str	r5, [r4, #8]
 800982e:	463e      	mov	r6, r7
 8009830:	42be      	cmp	r6, r7
 8009832:	d900      	bls.n	8009836 <__ssputs_r+0x86>
 8009834:	463e      	mov	r6, r7
 8009836:	6820      	ldr	r0, [r4, #0]
 8009838:	4632      	mov	r2, r6
 800983a:	4641      	mov	r1, r8
 800983c:	f000 fc36 	bl	800a0ac <memmove>
 8009840:	68a3      	ldr	r3, [r4, #8]
 8009842:	1b9b      	subs	r3, r3, r6
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	4433      	add	r3, r6
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	2000      	movs	r0, #0
 800984e:	e7db      	b.n	8009808 <__ssputs_r+0x58>
 8009850:	462a      	mov	r2, r5
 8009852:	f000 fc45 	bl	800a0e0 <_realloc_r>
 8009856:	4606      	mov	r6, r0
 8009858:	2800      	cmp	r0, #0
 800985a:	d1e1      	bne.n	8009820 <__ssputs_r+0x70>
 800985c:	6921      	ldr	r1, [r4, #16]
 800985e:	4650      	mov	r0, sl
 8009860:	f7ff ff5a 	bl	8009718 <_free_r>
 8009864:	e7c7      	b.n	80097f6 <__ssputs_r+0x46>
	...

08009868 <_svfiprintf_r>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	4698      	mov	r8, r3
 800986e:	898b      	ldrh	r3, [r1, #12]
 8009870:	061b      	lsls	r3, r3, #24
 8009872:	b09d      	sub	sp, #116	; 0x74
 8009874:	4607      	mov	r7, r0
 8009876:	460d      	mov	r5, r1
 8009878:	4614      	mov	r4, r2
 800987a:	d50e      	bpl.n	800989a <_svfiprintf_r+0x32>
 800987c:	690b      	ldr	r3, [r1, #16]
 800987e:	b963      	cbnz	r3, 800989a <_svfiprintf_r+0x32>
 8009880:	2140      	movs	r1, #64	; 0x40
 8009882:	f7ff fb41 	bl	8008f08 <_malloc_r>
 8009886:	6028      	str	r0, [r5, #0]
 8009888:	6128      	str	r0, [r5, #16]
 800988a:	b920      	cbnz	r0, 8009896 <_svfiprintf_r+0x2e>
 800988c:	230c      	movs	r3, #12
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	e0d1      	b.n	8009a3a <_svfiprintf_r+0x1d2>
 8009896:	2340      	movs	r3, #64	; 0x40
 8009898:	616b      	str	r3, [r5, #20]
 800989a:	2300      	movs	r3, #0
 800989c:	9309      	str	r3, [sp, #36]	; 0x24
 800989e:	2320      	movs	r3, #32
 80098a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a8:	2330      	movs	r3, #48	; 0x30
 80098aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a54 <_svfiprintf_r+0x1ec>
 80098ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098b2:	f04f 0901 	mov.w	r9, #1
 80098b6:	4623      	mov	r3, r4
 80098b8:	469a      	mov	sl, r3
 80098ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098be:	b10a      	cbz	r2, 80098c4 <_svfiprintf_r+0x5c>
 80098c0:	2a25      	cmp	r2, #37	; 0x25
 80098c2:	d1f9      	bne.n	80098b8 <_svfiprintf_r+0x50>
 80098c4:	ebba 0b04 	subs.w	fp, sl, r4
 80098c8:	d00b      	beq.n	80098e2 <_svfiprintf_r+0x7a>
 80098ca:	465b      	mov	r3, fp
 80098cc:	4622      	mov	r2, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff ff6d 	bl	80097b0 <__ssputs_r>
 80098d6:	3001      	adds	r0, #1
 80098d8:	f000 80aa 	beq.w	8009a30 <_svfiprintf_r+0x1c8>
 80098dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098de:	445a      	add	r2, fp
 80098e0:	9209      	str	r2, [sp, #36]	; 0x24
 80098e2:	f89a 3000 	ldrb.w	r3, [sl]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 80a2 	beq.w	8009a30 <_svfiprintf_r+0x1c8>
 80098ec:	2300      	movs	r3, #0
 80098ee:	f04f 32ff 	mov.w	r2, #4294967295
 80098f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098f6:	f10a 0a01 	add.w	sl, sl, #1
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	9307      	str	r3, [sp, #28]
 80098fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009902:	931a      	str	r3, [sp, #104]	; 0x68
 8009904:	4654      	mov	r4, sl
 8009906:	2205      	movs	r2, #5
 8009908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990c:	4851      	ldr	r0, [pc, #324]	; (8009a54 <_svfiprintf_r+0x1ec>)
 800990e:	f7f6 fc67 	bl	80001e0 <memchr>
 8009912:	9a04      	ldr	r2, [sp, #16]
 8009914:	b9d8      	cbnz	r0, 800994e <_svfiprintf_r+0xe6>
 8009916:	06d0      	lsls	r0, r2, #27
 8009918:	bf44      	itt	mi
 800991a:	2320      	movmi	r3, #32
 800991c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009920:	0711      	lsls	r1, r2, #28
 8009922:	bf44      	itt	mi
 8009924:	232b      	movmi	r3, #43	; 0x2b
 8009926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800992a:	f89a 3000 	ldrb.w	r3, [sl]
 800992e:	2b2a      	cmp	r3, #42	; 0x2a
 8009930:	d015      	beq.n	800995e <_svfiprintf_r+0xf6>
 8009932:	9a07      	ldr	r2, [sp, #28]
 8009934:	4654      	mov	r4, sl
 8009936:	2000      	movs	r0, #0
 8009938:	f04f 0c0a 	mov.w	ip, #10
 800993c:	4621      	mov	r1, r4
 800993e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009942:	3b30      	subs	r3, #48	; 0x30
 8009944:	2b09      	cmp	r3, #9
 8009946:	d94e      	bls.n	80099e6 <_svfiprintf_r+0x17e>
 8009948:	b1b0      	cbz	r0, 8009978 <_svfiprintf_r+0x110>
 800994a:	9207      	str	r2, [sp, #28]
 800994c:	e014      	b.n	8009978 <_svfiprintf_r+0x110>
 800994e:	eba0 0308 	sub.w	r3, r0, r8
 8009952:	fa09 f303 	lsl.w	r3, r9, r3
 8009956:	4313      	orrs	r3, r2
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	46a2      	mov	sl, r4
 800995c:	e7d2      	b.n	8009904 <_svfiprintf_r+0x9c>
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	1d19      	adds	r1, r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	9103      	str	r1, [sp, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfbb      	ittet	lt
 800996a:	425b      	neglt	r3, r3
 800996c:	f042 0202 	orrlt.w	r2, r2, #2
 8009970:	9307      	strge	r3, [sp, #28]
 8009972:	9307      	strlt	r3, [sp, #28]
 8009974:	bfb8      	it	lt
 8009976:	9204      	strlt	r2, [sp, #16]
 8009978:	7823      	ldrb	r3, [r4, #0]
 800997a:	2b2e      	cmp	r3, #46	; 0x2e
 800997c:	d10c      	bne.n	8009998 <_svfiprintf_r+0x130>
 800997e:	7863      	ldrb	r3, [r4, #1]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d135      	bne.n	80099f0 <_svfiprintf_r+0x188>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	1d1a      	adds	r2, r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	9203      	str	r2, [sp, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfb8      	it	lt
 8009990:	f04f 33ff 	movlt.w	r3, #4294967295
 8009994:	3402      	adds	r4, #2
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a64 <_svfiprintf_r+0x1fc>
 800999c:	7821      	ldrb	r1, [r4, #0]
 800999e:	2203      	movs	r2, #3
 80099a0:	4650      	mov	r0, sl
 80099a2:	f7f6 fc1d 	bl	80001e0 <memchr>
 80099a6:	b140      	cbz	r0, 80099ba <_svfiprintf_r+0x152>
 80099a8:	2340      	movs	r3, #64	; 0x40
 80099aa:	eba0 000a 	sub.w	r0, r0, sl
 80099ae:	fa03 f000 	lsl.w	r0, r3, r0
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	4303      	orrs	r3, r0
 80099b6:	3401      	adds	r4, #1
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099be:	4826      	ldr	r0, [pc, #152]	; (8009a58 <_svfiprintf_r+0x1f0>)
 80099c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099c4:	2206      	movs	r2, #6
 80099c6:	f7f6 fc0b 	bl	80001e0 <memchr>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d038      	beq.n	8009a40 <_svfiprintf_r+0x1d8>
 80099ce:	4b23      	ldr	r3, [pc, #140]	; (8009a5c <_svfiprintf_r+0x1f4>)
 80099d0:	bb1b      	cbnz	r3, 8009a1a <_svfiprintf_r+0x1b2>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	3307      	adds	r3, #7
 80099d6:	f023 0307 	bic.w	r3, r3, #7
 80099da:	3308      	adds	r3, #8
 80099dc:	9303      	str	r3, [sp, #12]
 80099de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e0:	4433      	add	r3, r6
 80099e2:	9309      	str	r3, [sp, #36]	; 0x24
 80099e4:	e767      	b.n	80098b6 <_svfiprintf_r+0x4e>
 80099e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099ea:	460c      	mov	r4, r1
 80099ec:	2001      	movs	r0, #1
 80099ee:	e7a5      	b.n	800993c <_svfiprintf_r+0xd4>
 80099f0:	2300      	movs	r3, #0
 80099f2:	3401      	adds	r4, #1
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	4619      	mov	r1, r3
 80099f8:	f04f 0c0a 	mov.w	ip, #10
 80099fc:	4620      	mov	r0, r4
 80099fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a02:	3a30      	subs	r2, #48	; 0x30
 8009a04:	2a09      	cmp	r2, #9
 8009a06:	d903      	bls.n	8009a10 <_svfiprintf_r+0x1a8>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d0c5      	beq.n	8009998 <_svfiprintf_r+0x130>
 8009a0c:	9105      	str	r1, [sp, #20]
 8009a0e:	e7c3      	b.n	8009998 <_svfiprintf_r+0x130>
 8009a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a14:	4604      	mov	r4, r0
 8009a16:	2301      	movs	r3, #1
 8009a18:	e7f0      	b.n	80099fc <_svfiprintf_r+0x194>
 8009a1a:	ab03      	add	r3, sp, #12
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	462a      	mov	r2, r5
 8009a20:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <_svfiprintf_r+0x1f8>)
 8009a22:	a904      	add	r1, sp, #16
 8009a24:	4638      	mov	r0, r7
 8009a26:	f3af 8000 	nop.w
 8009a2a:	1c42      	adds	r2, r0, #1
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	d1d6      	bne.n	80099de <_svfiprintf_r+0x176>
 8009a30:	89ab      	ldrh	r3, [r5, #12]
 8009a32:	065b      	lsls	r3, r3, #25
 8009a34:	f53f af2c 	bmi.w	8009890 <_svfiprintf_r+0x28>
 8009a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a3a:	b01d      	add	sp, #116	; 0x74
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a40:	ab03      	add	r3, sp, #12
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	462a      	mov	r2, r5
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <_svfiprintf_r+0x1f8>)
 8009a48:	a904      	add	r1, sp, #16
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f000 f9d4 	bl	8009df8 <_printf_i>
 8009a50:	e7eb      	b.n	8009a2a <_svfiprintf_r+0x1c2>
 8009a52:	bf00      	nop
 8009a54:	0800a250 	.word	0x0800a250
 8009a58:	0800a25a 	.word	0x0800a25a
 8009a5c:	00000000 	.word	0x00000000
 8009a60:	080097b1 	.word	0x080097b1
 8009a64:	0800a256 	.word	0x0800a256

08009a68 <__sfputc_r>:
 8009a68:	6893      	ldr	r3, [r2, #8]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	b410      	push	{r4}
 8009a70:	6093      	str	r3, [r2, #8]
 8009a72:	da08      	bge.n	8009a86 <__sfputc_r+0x1e>
 8009a74:	6994      	ldr	r4, [r2, #24]
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	db01      	blt.n	8009a7e <__sfputc_r+0x16>
 8009a7a:	290a      	cmp	r1, #10
 8009a7c:	d103      	bne.n	8009a86 <__sfputc_r+0x1e>
 8009a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a82:	f7ff bc21 	b.w	80092c8 <__swbuf_r>
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	1c58      	adds	r0, r3, #1
 8009a8a:	6010      	str	r0, [r2, #0]
 8009a8c:	7019      	strb	r1, [r3, #0]
 8009a8e:	4608      	mov	r0, r1
 8009a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <__sfputs_r>:
 8009a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	4614      	mov	r4, r2
 8009a9e:	18d5      	adds	r5, r2, r3
 8009aa0:	42ac      	cmp	r4, r5
 8009aa2:	d101      	bne.n	8009aa8 <__sfputs_r+0x12>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e007      	b.n	8009ab8 <__sfputs_r+0x22>
 8009aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aac:	463a      	mov	r2, r7
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7ff ffda 	bl	8009a68 <__sfputc_r>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d1f3      	bne.n	8009aa0 <__sfputs_r+0xa>
 8009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009abc <_vfiprintf_r>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	460d      	mov	r5, r1
 8009ac2:	b09d      	sub	sp, #116	; 0x74
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	4698      	mov	r8, r3
 8009ac8:	4606      	mov	r6, r0
 8009aca:	b118      	cbz	r0, 8009ad4 <_vfiprintf_r+0x18>
 8009acc:	6983      	ldr	r3, [r0, #24]
 8009ace:	b90b      	cbnz	r3, 8009ad4 <_vfiprintf_r+0x18>
 8009ad0:	f7ff f91e 	bl	8008d10 <__sinit>
 8009ad4:	4b89      	ldr	r3, [pc, #548]	; (8009cfc <_vfiprintf_r+0x240>)
 8009ad6:	429d      	cmp	r5, r3
 8009ad8:	d11b      	bne.n	8009b12 <_vfiprintf_r+0x56>
 8009ada:	6875      	ldr	r5, [r6, #4]
 8009adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ade:	07d9      	lsls	r1, r3, #31
 8009ae0:	d405      	bmi.n	8009aee <_vfiprintf_r+0x32>
 8009ae2:	89ab      	ldrh	r3, [r5, #12]
 8009ae4:	059a      	lsls	r2, r3, #22
 8009ae6:	d402      	bmi.n	8009aee <_vfiprintf_r+0x32>
 8009ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aea:	f7ff f9d4 	bl	8008e96 <__retarget_lock_acquire_recursive>
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	071b      	lsls	r3, r3, #28
 8009af2:	d501      	bpl.n	8009af8 <_vfiprintf_r+0x3c>
 8009af4:	692b      	ldr	r3, [r5, #16]
 8009af6:	b9eb      	cbnz	r3, 8009b34 <_vfiprintf_r+0x78>
 8009af8:	4629      	mov	r1, r5
 8009afa:	4630      	mov	r0, r6
 8009afc:	f7ff fc48 	bl	8009390 <__swsetup_r>
 8009b00:	b1c0      	cbz	r0, 8009b34 <_vfiprintf_r+0x78>
 8009b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b04:	07dc      	lsls	r4, r3, #31
 8009b06:	d50e      	bpl.n	8009b26 <_vfiprintf_r+0x6a>
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	b01d      	add	sp, #116	; 0x74
 8009b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b12:	4b7b      	ldr	r3, [pc, #492]	; (8009d00 <_vfiprintf_r+0x244>)
 8009b14:	429d      	cmp	r5, r3
 8009b16:	d101      	bne.n	8009b1c <_vfiprintf_r+0x60>
 8009b18:	68b5      	ldr	r5, [r6, #8]
 8009b1a:	e7df      	b.n	8009adc <_vfiprintf_r+0x20>
 8009b1c:	4b79      	ldr	r3, [pc, #484]	; (8009d04 <_vfiprintf_r+0x248>)
 8009b1e:	429d      	cmp	r5, r3
 8009b20:	bf08      	it	eq
 8009b22:	68f5      	ldreq	r5, [r6, #12]
 8009b24:	e7da      	b.n	8009adc <_vfiprintf_r+0x20>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	0598      	lsls	r0, r3, #22
 8009b2a:	d4ed      	bmi.n	8009b08 <_vfiprintf_r+0x4c>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b2e:	f7ff f9b3 	bl	8008e98 <__retarget_lock_release_recursive>
 8009b32:	e7e9      	b.n	8009b08 <_vfiprintf_r+0x4c>
 8009b34:	2300      	movs	r3, #0
 8009b36:	9309      	str	r3, [sp, #36]	; 0x24
 8009b38:	2320      	movs	r3, #32
 8009b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b42:	2330      	movs	r3, #48	; 0x30
 8009b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d08 <_vfiprintf_r+0x24c>
 8009b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b4c:	f04f 0901 	mov.w	r9, #1
 8009b50:	4623      	mov	r3, r4
 8009b52:	469a      	mov	sl, r3
 8009b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b58:	b10a      	cbz	r2, 8009b5e <_vfiprintf_r+0xa2>
 8009b5a:	2a25      	cmp	r2, #37	; 0x25
 8009b5c:	d1f9      	bne.n	8009b52 <_vfiprintf_r+0x96>
 8009b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b62:	d00b      	beq.n	8009b7c <_vfiprintf_r+0xc0>
 8009b64:	465b      	mov	r3, fp
 8009b66:	4622      	mov	r2, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff ff93 	bl	8009a96 <__sfputs_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	f000 80aa 	beq.w	8009cca <_vfiprintf_r+0x20e>
 8009b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b78:	445a      	add	r2, fp
 8009b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80a2 	beq.w	8009cca <_vfiprintf_r+0x20e>
 8009b86:	2300      	movs	r3, #0
 8009b88:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b90:	f10a 0a01 	add.w	sl, sl, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9e:	4654      	mov	r4, sl
 8009ba0:	2205      	movs	r2, #5
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	4858      	ldr	r0, [pc, #352]	; (8009d08 <_vfiprintf_r+0x24c>)
 8009ba8:	f7f6 fb1a 	bl	80001e0 <memchr>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	b9d8      	cbnz	r0, 8009be8 <_vfiprintf_r+0x12c>
 8009bb0:	06d1      	lsls	r1, r2, #27
 8009bb2:	bf44      	itt	mi
 8009bb4:	2320      	movmi	r3, #32
 8009bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bba:	0713      	lsls	r3, r2, #28
 8009bbc:	bf44      	itt	mi
 8009bbe:	232b      	movmi	r3, #43	; 0x2b
 8009bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bca:	d015      	beq.n	8009bf8 <_vfiprintf_r+0x13c>
 8009bcc:	9a07      	ldr	r2, [sp, #28]
 8009bce:	4654      	mov	r4, sl
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	f04f 0c0a 	mov.w	ip, #10
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bdc:	3b30      	subs	r3, #48	; 0x30
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	d94e      	bls.n	8009c80 <_vfiprintf_r+0x1c4>
 8009be2:	b1b0      	cbz	r0, 8009c12 <_vfiprintf_r+0x156>
 8009be4:	9207      	str	r2, [sp, #28]
 8009be6:	e014      	b.n	8009c12 <_vfiprintf_r+0x156>
 8009be8:	eba0 0308 	sub.w	r3, r0, r8
 8009bec:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	46a2      	mov	sl, r4
 8009bf6:	e7d2      	b.n	8009b9e <_vfiprintf_r+0xe2>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	1d19      	adds	r1, r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfbb      	ittet	lt
 8009c04:	425b      	neglt	r3, r3
 8009c06:	f042 0202 	orrlt.w	r2, r2, #2
 8009c0a:	9307      	strge	r3, [sp, #28]
 8009c0c:	9307      	strlt	r3, [sp, #28]
 8009c0e:	bfb8      	it	lt
 8009c10:	9204      	strlt	r2, [sp, #16]
 8009c12:	7823      	ldrb	r3, [r4, #0]
 8009c14:	2b2e      	cmp	r3, #46	; 0x2e
 8009c16:	d10c      	bne.n	8009c32 <_vfiprintf_r+0x176>
 8009c18:	7863      	ldrb	r3, [r4, #1]
 8009c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1c:	d135      	bne.n	8009c8a <_vfiprintf_r+0x1ce>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	1d1a      	adds	r2, r3, #4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	9203      	str	r2, [sp, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfb8      	it	lt
 8009c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c2e:	3402      	adds	r4, #2
 8009c30:	9305      	str	r3, [sp, #20]
 8009c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d18 <_vfiprintf_r+0x25c>
 8009c36:	7821      	ldrb	r1, [r4, #0]
 8009c38:	2203      	movs	r2, #3
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	f7f6 fad0 	bl	80001e0 <memchr>
 8009c40:	b140      	cbz	r0, 8009c54 <_vfiprintf_r+0x198>
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	eba0 000a 	sub.w	r0, r0, sl
 8009c48:	fa03 f000 	lsl.w	r0, r3, r0
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	4303      	orrs	r3, r0
 8009c50:	3401      	adds	r4, #1
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c58:	482c      	ldr	r0, [pc, #176]	; (8009d0c <_vfiprintf_r+0x250>)
 8009c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c5e:	2206      	movs	r2, #6
 8009c60:	f7f6 fabe 	bl	80001e0 <memchr>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d03f      	beq.n	8009ce8 <_vfiprintf_r+0x22c>
 8009c68:	4b29      	ldr	r3, [pc, #164]	; (8009d10 <_vfiprintf_r+0x254>)
 8009c6a:	bb1b      	cbnz	r3, 8009cb4 <_vfiprintf_r+0x1f8>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	3307      	adds	r3, #7
 8009c70:	f023 0307 	bic.w	r3, r3, #7
 8009c74:	3308      	adds	r3, #8
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	443b      	add	r3, r7
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	e767      	b.n	8009b50 <_vfiprintf_r+0x94>
 8009c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c84:	460c      	mov	r4, r1
 8009c86:	2001      	movs	r0, #1
 8009c88:	e7a5      	b.n	8009bd6 <_vfiprintf_r+0x11a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	3401      	adds	r4, #1
 8009c8e:	9305      	str	r3, [sp, #20]
 8009c90:	4619      	mov	r1, r3
 8009c92:	f04f 0c0a 	mov.w	ip, #10
 8009c96:	4620      	mov	r0, r4
 8009c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c9c:	3a30      	subs	r2, #48	; 0x30
 8009c9e:	2a09      	cmp	r2, #9
 8009ca0:	d903      	bls.n	8009caa <_vfiprintf_r+0x1ee>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0c5      	beq.n	8009c32 <_vfiprintf_r+0x176>
 8009ca6:	9105      	str	r1, [sp, #20]
 8009ca8:	e7c3      	b.n	8009c32 <_vfiprintf_r+0x176>
 8009caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cae:	4604      	mov	r4, r0
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e7f0      	b.n	8009c96 <_vfiprintf_r+0x1da>
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	462a      	mov	r2, r5
 8009cba:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <_vfiprintf_r+0x258>)
 8009cbc:	a904      	add	r1, sp, #16
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f3af 8000 	nop.w
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	1c78      	adds	r0, r7, #1
 8009cc8:	d1d6      	bne.n	8009c78 <_vfiprintf_r+0x1bc>
 8009cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ccc:	07d9      	lsls	r1, r3, #31
 8009cce:	d405      	bmi.n	8009cdc <_vfiprintf_r+0x220>
 8009cd0:	89ab      	ldrh	r3, [r5, #12]
 8009cd2:	059a      	lsls	r2, r3, #22
 8009cd4:	d402      	bmi.n	8009cdc <_vfiprintf_r+0x220>
 8009cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd8:	f7ff f8de 	bl	8008e98 <__retarget_lock_release_recursive>
 8009cdc:	89ab      	ldrh	r3, [r5, #12]
 8009cde:	065b      	lsls	r3, r3, #25
 8009ce0:	f53f af12 	bmi.w	8009b08 <_vfiprintf_r+0x4c>
 8009ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce6:	e711      	b.n	8009b0c <_vfiprintf_r+0x50>
 8009ce8:	ab03      	add	r3, sp, #12
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	462a      	mov	r2, r5
 8009cee:	4b09      	ldr	r3, [pc, #36]	; (8009d14 <_vfiprintf_r+0x258>)
 8009cf0:	a904      	add	r1, sp, #16
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 f880 	bl	8009df8 <_printf_i>
 8009cf8:	e7e4      	b.n	8009cc4 <_vfiprintf_r+0x208>
 8009cfa:	bf00      	nop
 8009cfc:	0800a20c 	.word	0x0800a20c
 8009d00:	0800a22c 	.word	0x0800a22c
 8009d04:	0800a1ec 	.word	0x0800a1ec
 8009d08:	0800a250 	.word	0x0800a250
 8009d0c:	0800a25a 	.word	0x0800a25a
 8009d10:	00000000 	.word	0x00000000
 8009d14:	08009a97 	.word	0x08009a97
 8009d18:	0800a256 	.word	0x0800a256

08009d1c <_printf_common>:
 8009d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	4616      	mov	r6, r2
 8009d22:	4699      	mov	r9, r3
 8009d24:	688a      	ldr	r2, [r1, #8]
 8009d26:	690b      	ldr	r3, [r1, #16]
 8009d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	bfb8      	it	lt
 8009d30:	4613      	movlt	r3, r2
 8009d32:	6033      	str	r3, [r6, #0]
 8009d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d38:	4607      	mov	r7, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	b10a      	cbz	r2, 8009d42 <_printf_common+0x26>
 8009d3e:	3301      	adds	r3, #1
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	0699      	lsls	r1, r3, #26
 8009d46:	bf42      	ittt	mi
 8009d48:	6833      	ldrmi	r3, [r6, #0]
 8009d4a:	3302      	addmi	r3, #2
 8009d4c:	6033      	strmi	r3, [r6, #0]
 8009d4e:	6825      	ldr	r5, [r4, #0]
 8009d50:	f015 0506 	ands.w	r5, r5, #6
 8009d54:	d106      	bne.n	8009d64 <_printf_common+0x48>
 8009d56:	f104 0a19 	add.w	sl, r4, #25
 8009d5a:	68e3      	ldr	r3, [r4, #12]
 8009d5c:	6832      	ldr	r2, [r6, #0]
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	42ab      	cmp	r3, r5
 8009d62:	dc26      	bgt.n	8009db2 <_printf_common+0x96>
 8009d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d68:	1e13      	subs	r3, r2, #0
 8009d6a:	6822      	ldr	r2, [r4, #0]
 8009d6c:	bf18      	it	ne
 8009d6e:	2301      	movne	r3, #1
 8009d70:	0692      	lsls	r2, r2, #26
 8009d72:	d42b      	bmi.n	8009dcc <_printf_common+0xb0>
 8009d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d78:	4649      	mov	r1, r9
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	47c0      	blx	r8
 8009d7e:	3001      	adds	r0, #1
 8009d80:	d01e      	beq.n	8009dc0 <_printf_common+0xa4>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	68e5      	ldr	r5, [r4, #12]
 8009d86:	6832      	ldr	r2, [r6, #0]
 8009d88:	f003 0306 	and.w	r3, r3, #6
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	bf08      	it	eq
 8009d90:	1aad      	subeq	r5, r5, r2
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	6922      	ldr	r2, [r4, #16]
 8009d96:	bf0c      	ite	eq
 8009d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d9c:	2500      	movne	r5, #0
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	bfc4      	itt	gt
 8009da2:	1a9b      	subgt	r3, r3, r2
 8009da4:	18ed      	addgt	r5, r5, r3
 8009da6:	2600      	movs	r6, #0
 8009da8:	341a      	adds	r4, #26
 8009daa:	42b5      	cmp	r5, r6
 8009dac:	d11a      	bne.n	8009de4 <_printf_common+0xc8>
 8009dae:	2000      	movs	r0, #0
 8009db0:	e008      	b.n	8009dc4 <_printf_common+0xa8>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4652      	mov	r2, sl
 8009db6:	4649      	mov	r1, r9
 8009db8:	4638      	mov	r0, r7
 8009dba:	47c0      	blx	r8
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d103      	bne.n	8009dc8 <_printf_common+0xac>
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc8:	3501      	adds	r5, #1
 8009dca:	e7c6      	b.n	8009d5a <_printf_common+0x3e>
 8009dcc:	18e1      	adds	r1, r4, r3
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	2030      	movs	r0, #48	; 0x30
 8009dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dd6:	4422      	add	r2, r4
 8009dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009de0:	3302      	adds	r3, #2
 8009de2:	e7c7      	b.n	8009d74 <_printf_common+0x58>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4622      	mov	r2, r4
 8009de8:	4649      	mov	r1, r9
 8009dea:	4638      	mov	r0, r7
 8009dec:	47c0      	blx	r8
 8009dee:	3001      	adds	r0, #1
 8009df0:	d0e6      	beq.n	8009dc0 <_printf_common+0xa4>
 8009df2:	3601      	adds	r6, #1
 8009df4:	e7d9      	b.n	8009daa <_printf_common+0x8e>
	...

08009df8 <_printf_i>:
 8009df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfc:	7e0f      	ldrb	r7, [r1, #24]
 8009dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e00:	2f78      	cmp	r7, #120	; 0x78
 8009e02:	4691      	mov	r9, r2
 8009e04:	4680      	mov	r8, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	469a      	mov	sl, r3
 8009e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e0e:	d807      	bhi.n	8009e20 <_printf_i+0x28>
 8009e10:	2f62      	cmp	r7, #98	; 0x62
 8009e12:	d80a      	bhi.n	8009e2a <_printf_i+0x32>
 8009e14:	2f00      	cmp	r7, #0
 8009e16:	f000 80d8 	beq.w	8009fca <_printf_i+0x1d2>
 8009e1a:	2f58      	cmp	r7, #88	; 0x58
 8009e1c:	f000 80a3 	beq.w	8009f66 <_printf_i+0x16e>
 8009e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e28:	e03a      	b.n	8009ea0 <_printf_i+0xa8>
 8009e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e2e:	2b15      	cmp	r3, #21
 8009e30:	d8f6      	bhi.n	8009e20 <_printf_i+0x28>
 8009e32:	a101      	add	r1, pc, #4	; (adr r1, 8009e38 <_printf_i+0x40>)
 8009e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e38:	08009e91 	.word	0x08009e91
 8009e3c:	08009ea5 	.word	0x08009ea5
 8009e40:	08009e21 	.word	0x08009e21
 8009e44:	08009e21 	.word	0x08009e21
 8009e48:	08009e21 	.word	0x08009e21
 8009e4c:	08009e21 	.word	0x08009e21
 8009e50:	08009ea5 	.word	0x08009ea5
 8009e54:	08009e21 	.word	0x08009e21
 8009e58:	08009e21 	.word	0x08009e21
 8009e5c:	08009e21 	.word	0x08009e21
 8009e60:	08009e21 	.word	0x08009e21
 8009e64:	08009fb1 	.word	0x08009fb1
 8009e68:	08009ed5 	.word	0x08009ed5
 8009e6c:	08009f93 	.word	0x08009f93
 8009e70:	08009e21 	.word	0x08009e21
 8009e74:	08009e21 	.word	0x08009e21
 8009e78:	08009fd3 	.word	0x08009fd3
 8009e7c:	08009e21 	.word	0x08009e21
 8009e80:	08009ed5 	.word	0x08009ed5
 8009e84:	08009e21 	.word	0x08009e21
 8009e88:	08009e21 	.word	0x08009e21
 8009e8c:	08009f9b 	.word	0x08009f9b
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	602a      	str	r2, [r5, #0]
 8009e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e0a3      	b.n	8009fec <_printf_i+0x1f4>
 8009ea4:	6820      	ldr	r0, [r4, #0]
 8009ea6:	6829      	ldr	r1, [r5, #0]
 8009ea8:	0606      	lsls	r6, r0, #24
 8009eaa:	f101 0304 	add.w	r3, r1, #4
 8009eae:	d50a      	bpl.n	8009ec6 <_printf_i+0xce>
 8009eb0:	680e      	ldr	r6, [r1, #0]
 8009eb2:	602b      	str	r3, [r5, #0]
 8009eb4:	2e00      	cmp	r6, #0
 8009eb6:	da03      	bge.n	8009ec0 <_printf_i+0xc8>
 8009eb8:	232d      	movs	r3, #45	; 0x2d
 8009eba:	4276      	negs	r6, r6
 8009ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec0:	485e      	ldr	r0, [pc, #376]	; (800a03c <_printf_i+0x244>)
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	e019      	b.n	8009efa <_printf_i+0x102>
 8009ec6:	680e      	ldr	r6, [r1, #0]
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ece:	bf18      	it	ne
 8009ed0:	b236      	sxthne	r6, r6
 8009ed2:	e7ef      	b.n	8009eb4 <_printf_i+0xbc>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	6820      	ldr	r0, [r4, #0]
 8009ed8:	1d19      	adds	r1, r3, #4
 8009eda:	6029      	str	r1, [r5, #0]
 8009edc:	0601      	lsls	r1, r0, #24
 8009ede:	d501      	bpl.n	8009ee4 <_printf_i+0xec>
 8009ee0:	681e      	ldr	r6, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <_printf_i+0xf2>
 8009ee4:	0646      	lsls	r6, r0, #25
 8009ee6:	d5fb      	bpl.n	8009ee0 <_printf_i+0xe8>
 8009ee8:	881e      	ldrh	r6, [r3, #0]
 8009eea:	4854      	ldr	r0, [pc, #336]	; (800a03c <_printf_i+0x244>)
 8009eec:	2f6f      	cmp	r7, #111	; 0x6f
 8009eee:	bf0c      	ite	eq
 8009ef0:	2308      	moveq	r3, #8
 8009ef2:	230a      	movne	r3, #10
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009efa:	6865      	ldr	r5, [r4, #4]
 8009efc:	60a5      	str	r5, [r4, #8]
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	bfa2      	ittt	ge
 8009f02:	6821      	ldrge	r1, [r4, #0]
 8009f04:	f021 0104 	bicge.w	r1, r1, #4
 8009f08:	6021      	strge	r1, [r4, #0]
 8009f0a:	b90e      	cbnz	r6, 8009f10 <_printf_i+0x118>
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	d04d      	beq.n	8009fac <_printf_i+0x1b4>
 8009f10:	4615      	mov	r5, r2
 8009f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f16:	fb03 6711 	mls	r7, r3, r1, r6
 8009f1a:	5dc7      	ldrb	r7, [r0, r7]
 8009f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f20:	4637      	mov	r7, r6
 8009f22:	42bb      	cmp	r3, r7
 8009f24:	460e      	mov	r6, r1
 8009f26:	d9f4      	bls.n	8009f12 <_printf_i+0x11a>
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d10b      	bne.n	8009f44 <_printf_i+0x14c>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	07de      	lsls	r6, r3, #31
 8009f30:	d508      	bpl.n	8009f44 <_printf_i+0x14c>
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	6861      	ldr	r1, [r4, #4]
 8009f36:	4299      	cmp	r1, r3
 8009f38:	bfde      	ittt	le
 8009f3a:	2330      	movle	r3, #48	; 0x30
 8009f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f44:	1b52      	subs	r2, r2, r5
 8009f46:	6122      	str	r2, [r4, #16]
 8009f48:	f8cd a000 	str.w	sl, [sp]
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	aa03      	add	r2, sp, #12
 8009f50:	4621      	mov	r1, r4
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7ff fee2 	bl	8009d1c <_printf_common>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d14c      	bne.n	8009ff6 <_printf_i+0x1fe>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b004      	add	sp, #16
 8009f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f66:	4835      	ldr	r0, [pc, #212]	; (800a03c <_printf_i+0x244>)
 8009f68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f6c:	6829      	ldr	r1, [r5, #0]
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f74:	6029      	str	r1, [r5, #0]
 8009f76:	061d      	lsls	r5, r3, #24
 8009f78:	d514      	bpl.n	8009fa4 <_printf_i+0x1ac>
 8009f7a:	07df      	lsls	r7, r3, #31
 8009f7c:	bf44      	itt	mi
 8009f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f82:	6023      	strmi	r3, [r4, #0]
 8009f84:	b91e      	cbnz	r6, 8009f8e <_printf_i+0x196>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	f023 0320 	bic.w	r3, r3, #32
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	2310      	movs	r3, #16
 8009f90:	e7b0      	b.n	8009ef4 <_printf_i+0xfc>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	f043 0320 	orr.w	r3, r3, #32
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	2378      	movs	r3, #120	; 0x78
 8009f9c:	4828      	ldr	r0, [pc, #160]	; (800a040 <_printf_i+0x248>)
 8009f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fa2:	e7e3      	b.n	8009f6c <_printf_i+0x174>
 8009fa4:	0659      	lsls	r1, r3, #25
 8009fa6:	bf48      	it	mi
 8009fa8:	b2b6      	uxthmi	r6, r6
 8009faa:	e7e6      	b.n	8009f7a <_printf_i+0x182>
 8009fac:	4615      	mov	r5, r2
 8009fae:	e7bb      	b.n	8009f28 <_printf_i+0x130>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	6826      	ldr	r6, [r4, #0]
 8009fb4:	6961      	ldr	r1, [r4, #20]
 8009fb6:	1d18      	adds	r0, r3, #4
 8009fb8:	6028      	str	r0, [r5, #0]
 8009fba:	0635      	lsls	r5, r6, #24
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_i+0x1cc>
 8009fc0:	6019      	str	r1, [r3, #0]
 8009fc2:	e002      	b.n	8009fca <_printf_i+0x1d2>
 8009fc4:	0670      	lsls	r0, r6, #25
 8009fc6:	d5fb      	bpl.n	8009fc0 <_printf_i+0x1c8>
 8009fc8:	8019      	strh	r1, [r3, #0]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	4615      	mov	r5, r2
 8009fd0:	e7ba      	b.n	8009f48 <_printf_i+0x150>
 8009fd2:	682b      	ldr	r3, [r5, #0]
 8009fd4:	1d1a      	adds	r2, r3, #4
 8009fd6:	602a      	str	r2, [r5, #0]
 8009fd8:	681d      	ldr	r5, [r3, #0]
 8009fda:	6862      	ldr	r2, [r4, #4]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f7f6 f8fe 	bl	80001e0 <memchr>
 8009fe4:	b108      	cbz	r0, 8009fea <_printf_i+0x1f2>
 8009fe6:	1b40      	subs	r0, r0, r5
 8009fe8:	6060      	str	r0, [r4, #4]
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	6123      	str	r3, [r4, #16]
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff4:	e7a8      	b.n	8009f48 <_printf_i+0x150>
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	47d0      	blx	sl
 800a000:	3001      	adds	r0, #1
 800a002:	d0ab      	beq.n	8009f5c <_printf_i+0x164>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	079b      	lsls	r3, r3, #30
 800a008:	d413      	bmi.n	800a032 <_printf_i+0x23a>
 800a00a:	68e0      	ldr	r0, [r4, #12]
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	4298      	cmp	r0, r3
 800a010:	bfb8      	it	lt
 800a012:	4618      	movlt	r0, r3
 800a014:	e7a4      	b.n	8009f60 <_printf_i+0x168>
 800a016:	2301      	movs	r3, #1
 800a018:	4632      	mov	r2, r6
 800a01a:	4649      	mov	r1, r9
 800a01c:	4640      	mov	r0, r8
 800a01e:	47d0      	blx	sl
 800a020:	3001      	adds	r0, #1
 800a022:	d09b      	beq.n	8009f5c <_printf_i+0x164>
 800a024:	3501      	adds	r5, #1
 800a026:	68e3      	ldr	r3, [r4, #12]
 800a028:	9903      	ldr	r1, [sp, #12]
 800a02a:	1a5b      	subs	r3, r3, r1
 800a02c:	42ab      	cmp	r3, r5
 800a02e:	dcf2      	bgt.n	800a016 <_printf_i+0x21e>
 800a030:	e7eb      	b.n	800a00a <_printf_i+0x212>
 800a032:	2500      	movs	r5, #0
 800a034:	f104 0619 	add.w	r6, r4, #25
 800a038:	e7f5      	b.n	800a026 <_printf_i+0x22e>
 800a03a:	bf00      	nop
 800a03c:	0800a261 	.word	0x0800a261
 800a040:	0800a272 	.word	0x0800a272

0800a044 <_read_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	; (800a064 <_read_r+0x20>)
 800a048:	4604      	mov	r4, r0
 800a04a:	4608      	mov	r0, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	602a      	str	r2, [r5, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	f7f6 fdb0 	bl	8000bb8 <_read>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_read_r+0x1e>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_read_r+0x1e>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	20005374 	.word	0x20005374

0800a068 <_fstat_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	; (800a088 <_fstat_r+0x20>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	f7f6 fdc8 	bl	8000c0a <_fstat>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	d102      	bne.n	800a084 <_fstat_r+0x1c>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	b103      	cbz	r3, 800a084 <_fstat_r+0x1c>
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	20005374 	.word	0x20005374

0800a08c <_isatty_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d06      	ldr	r5, [pc, #24]	; (800a0a8 <_isatty_r+0x1c>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	f7f6 fdc7 	bl	8000c2a <_isatty>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_isatty_r+0x1a>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_isatty_r+0x1a>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20005374 	.word	0x20005374

0800a0ac <memmove>:
 800a0ac:	4288      	cmp	r0, r1
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	eb01 0402 	add.w	r4, r1, r2
 800a0b4:	d902      	bls.n	800a0bc <memmove+0x10>
 800a0b6:	4284      	cmp	r4, r0
 800a0b8:	4623      	mov	r3, r4
 800a0ba:	d807      	bhi.n	800a0cc <memmove+0x20>
 800a0bc:	1e43      	subs	r3, r0, #1
 800a0be:	42a1      	cmp	r1, r4
 800a0c0:	d008      	beq.n	800a0d4 <memmove+0x28>
 800a0c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ca:	e7f8      	b.n	800a0be <memmove+0x12>
 800a0cc:	4402      	add	r2, r0
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	428a      	cmp	r2, r1
 800a0d2:	d100      	bne.n	800a0d6 <memmove+0x2a>
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0de:	e7f7      	b.n	800a0d0 <memmove+0x24>

0800a0e0 <_realloc_r>:
 800a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	4614      	mov	r4, r2
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	b921      	cbnz	r1, 800a0f6 <_realloc_r+0x16>
 800a0ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	f7fe bf09 	b.w	8008f08 <_malloc_r>
 800a0f6:	b92a      	cbnz	r2, 800a104 <_realloc_r+0x24>
 800a0f8:	f7ff fb0e 	bl	8009718 <_free_r>
 800a0fc:	4625      	mov	r5, r4
 800a0fe:	4628      	mov	r0, r5
 800a100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a104:	f000 f81b 	bl	800a13e <_malloc_usable_size_r>
 800a108:	4284      	cmp	r4, r0
 800a10a:	4607      	mov	r7, r0
 800a10c:	d802      	bhi.n	800a114 <_realloc_r+0x34>
 800a10e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a112:	d812      	bhi.n	800a13a <_realloc_r+0x5a>
 800a114:	4621      	mov	r1, r4
 800a116:	4640      	mov	r0, r8
 800a118:	f7fe fef6 	bl	8008f08 <_malloc_r>
 800a11c:	4605      	mov	r5, r0
 800a11e:	2800      	cmp	r0, #0
 800a120:	d0ed      	beq.n	800a0fe <_realloc_r+0x1e>
 800a122:	42bc      	cmp	r4, r7
 800a124:	4622      	mov	r2, r4
 800a126:	4631      	mov	r1, r6
 800a128:	bf28      	it	cs
 800a12a:	463a      	movcs	r2, r7
 800a12c:	f7fe feb5 	bl	8008e9a <memcpy>
 800a130:	4631      	mov	r1, r6
 800a132:	4640      	mov	r0, r8
 800a134:	f7ff faf0 	bl	8009718 <_free_r>
 800a138:	e7e1      	b.n	800a0fe <_realloc_r+0x1e>
 800a13a:	4635      	mov	r5, r6
 800a13c:	e7df      	b.n	800a0fe <_realloc_r+0x1e>

0800a13e <_malloc_usable_size_r>:
 800a13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a142:	1f18      	subs	r0, r3, #4
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfbc      	itt	lt
 800a148:	580b      	ldrlt	r3, [r1, r0]
 800a14a:	18c0      	addlt	r0, r0, r3
 800a14c:	4770      	bx	lr
	...

0800a150 <_init>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	bf00      	nop
 800a154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a156:	bc08      	pop	{r3}
 800a158:	469e      	mov	lr, r3
 800a15a:	4770      	bx	lr

0800a15c <_fini>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	bf00      	nop
 800a160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a162:	bc08      	pop	{r3}
 800a164:	469e      	mov	lr, r3
 800a166:	4770      	bx	lr
